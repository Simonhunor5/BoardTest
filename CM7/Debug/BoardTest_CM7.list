
BoardTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800b020  0800b020  0000c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b468  0800b468  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b468  0800b468  0000c468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b470  0800b470  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b470  0800b470  0000c470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b474  0800b474  0000c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  0800b478  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  24000060  0800b4d8  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000350  0800b4d8  0000d350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b36  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004073  00000000  00000000  0002fbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00033c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c8  00000000  00000000  00035310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045601  00000000  00000000  000364d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a47  00000000  00000000  0007bad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b2ea1  00000000  00000000  000a1520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002543c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064d8  00000000  00000000  00254404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0025a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b008 	.word	0x0800b008

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b008 	.word	0x0800b008

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	@ 0x40
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007c2:	4b82      	ldr	r3, [pc, #520]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a80      	ldr	r2, [pc, #512]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b7e      	ldr	r3, [pc, #504]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e0:	4b7a      	ldr	r3, [pc, #488]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a79      	ldr	r2, [pc, #484]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b76      	ldr	r3, [pc, #472]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80007fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b73      	ldr	r3, [pc, #460]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000804:	4a71      	ldr	r2, [pc, #452]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080e:	4b6f      	ldr	r3, [pc, #444]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	623b      	str	r3, [r7, #32]
 800081a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b6b      	ldr	r3, [pc, #428]	@ (80009cc <MX_GPIO_Init+0x220>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000822:	4a6a      	ldr	r2, [pc, #424]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082c:	4b67      	ldr	r3, [pc, #412]	@ (80009cc <MX_GPIO_Init+0x220>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	61fb      	str	r3, [r7, #28]
 8000838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b64      	ldr	r3, [pc, #400]	@ (80009cc <MX_GPIO_Init+0x220>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	4a62      	ldr	r2, [pc, #392]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084a:	4b60      	ldr	r3, [pc, #384]	@ (80009cc <MX_GPIO_Init+0x220>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000858:	4b5c      	ldr	r3, [pc, #368]	@ (80009cc <MX_GPIO_Init+0x220>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085e:	4a5b      	ldr	r2, [pc, #364]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000860:	f043 0310 	orr.w	r3, r3, #16
 8000864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000868:	4b58      	ldr	r3, [pc, #352]	@ (80009cc <MX_GPIO_Init+0x220>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b55      	ldr	r3, [pc, #340]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087c:	4a53      	ldr	r2, [pc, #332]	@ (80009cc <MX_GPIO_Init+0x220>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000886:	4b51      	ldr	r3, [pc, #324]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b4d      	ldr	r3, [pc, #308]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089a:	4a4c      	ldr	r2, [pc, #304]	@ (80009cc <MX_GPIO_Init+0x220>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a4:	4b49      	ldr	r3, [pc, #292]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008b2:	4b46      	ldr	r3, [pc, #280]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	4a44      	ldr	r2, [pc, #272]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c2:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d0:	4b3e      	ldr	r3, [pc, #248]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d6:	4a3d      	ldr	r2, [pc, #244]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e0:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GP1_Pin|GP2_Pin|GP3_Pin|GP4_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80008f4:	4836      	ldr	r0, [pc, #216]	@ (80009d0 <MX_GPIO_Init+0x224>)
 80008f6:	f002 fb8f 	bl	8003018 <HAL_GPIO_WritePin>
                          |GP5_Pin|GP6_Pin|GP7_Pin|GP8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_EN_GPIO_Port, MIC_EN_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	4834      	ldr	r0, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x228>)
 8000902:	f002 fb89 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, REDLED1_Pin|REDLED2_Pin|ORANGELED1_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2107      	movs	r1, #7
 800090a:	4833      	ldr	r0, [pc, #204]	@ (80009d8 <MX_GPIO_Init+0x22c>)
 800090c:	f002 fb84 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ORANGELED2_Pin|BLUELED1_Pin|BLUELED2_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	211c      	movs	r1, #28
 8000914:	4831      	ldr	r0, [pc, #196]	@ (80009dc <MX_GPIO_Init+0x230>)
 8000916:	f002 fb7f 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GP1_Pin|GP2_Pin|GP3_Pin|GP4_Pin
 800091a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GP5_Pin|GP6_Pin|GP7_Pin|GP8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000930:	4619      	mov	r1, r3
 8000932:	4827      	ldr	r0, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0x224>)
 8000934:	f002 f89e 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_EN_Pin;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(MIC_EN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094e:	4619      	mov	r1, r3
 8000950:	4820      	ldr	r0, [pc, #128]	@ (80009d4 <MX_GPIO_Init+0x228>)
 8000952:	f002 f88f 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = REDLED1_Pin|REDLED2_Pin|ORANGELED1_Pin;
 8000956:	2307      	movs	r3, #7
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	481a      	ldr	r0, [pc, #104]	@ (80009d8 <MX_GPIO_Init+0x22c>)
 800096e:	f002 f881 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ORANGELED2_Pin|BLUELED1_Pin|BLUELED2_Pin;
 8000972:	231c      	movs	r3, #28
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <MX_GPIO_Init+0x230>)
 800098a:	f002 f873 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 800098e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000998:	2301      	movs	r3, #1
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	@ (80009dc <MX_GPIO_Init+0x230>)
 80009a4:	f002 f866 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCARD_DETECT_Pin;
 80009a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDCARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_GPIO_Init+0x230>)
 80009be:	f002 f859 	bl	8002a74 <HAL_GPIO_Init>

}
 80009c2:	bf00      	nop
 80009c4:	3740      	adds	r7, #64	@ 0x40
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58021000 	.word	0x58021000
 80009d4:	58020c00 	.word	0x58020c00
 80009d8:	58022800 	.word	0x58022800
 80009dc:	58021800 	.word	0x58021800

080009e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	@ (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f002 fb44 	bl	80030a8 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fd2b 	bl	8001480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f003 f8c7 	bl	8003bc0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fd22 	bl	8001480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f003 f909 	bl	8003c56 <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fd19 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2400007c 	.word	0x2400007c
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	307075b1 	.word	0x307075b1

08000a60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0ba      	sub	sp, #232	@ 0xe8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	22c0      	movs	r2, #192	@ 0xc0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 fe41 	bl	800a708 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a26      	ldr	r2, [pc, #152]	@ (8000b24 <HAL_I2C_MspInit+0xc4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d145      	bne.n	8000b1c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a90:	f04f 0208 	mov.w	r2, #8
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fdc6 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ab2:	f000 fce5 	bl	8001480 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad4:	23c0      	movs	r3, #192	@ 0xc0
 8000ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <HAL_I2C_MspInit+0xcc>)
 8000afa:	f001 ffbb 	bl	8002a74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000b06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	37e8      	adds	r7, #232	@ 0xe8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	58020400 	.word	0x58020400

08000b30 <_ZN6driver3imuC1EP19__I2C_HandleTypeDefP12GPIO_TypeDeft>:
#include "imu.hpp"
#include <stdio.h>

namespace driver{

imu::imu(I2C_HandleTypeDef *i2c, GPIO_TypeDef* gyro_drdy_port, uint16_t gyro_drdy_pin){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	807b      	strh	r3, [r7, #2]
	uint8_t temp_reg;
	imu_conf.i2c = i2c;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	601a      	str	r2, [r3, #0]
	imu_conf.gyro_drdy_port = gyro_drdy_port;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	605a      	str	r2, [r3, #4]
	imu_conf.gyro_drdy_pin = gyro_drdy_pin;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	887a      	ldrh	r2, [r7, #2]
 8000b4e:	811a      	strh	r2, [r3, #8]

	// Gyro setup
	uint8_t value;
	value = i2c_readData(settings::GYRO_ADDR, settings::GYRO_WHO_AM_I);
 8000b50:	220f      	movs	r2, #15
 8000b52:	21d2      	movs	r1, #210	@ 0xd2
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f000 f878 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
	// Highpass filter - Normal mode, 0.09Hz
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG2, 0x09);
 8000b5e:	2309      	movs	r3, #9
 8000b60:	2221      	movs	r2, #33	@ 0x21
 8000b62:	21d2      	movs	r1, #210	@ 0xd2
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f897 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Disable interrupts, enable data ready flag
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG3, 0x08);
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	2222      	movs	r2, #34	@ 0x22
 8000b6e:	21d2      	movs	r1, #210	@ 0xd2
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 f891 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Scale selection 500dps, block data update until data is read
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG4, 0x90);
 8000b76:	2390      	movs	r3, #144	@ 0x90
 8000b78:	2223      	movs	r2, #35	@ 0x23
 8000b7a:	21d2      	movs	r1, #210	@ 0xd2
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f88b 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// No FIFO, no mem reboot, enable high-pass filter
	// LP1 0b00, LP1+HP 0b01, LP1+HP+LP2 0b10/0b11
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG5, 0x13);
 8000b82:	2313      	movs	r3, #19
 8000b84:	2224      	movs	r2, #36	@ 0x24
 8000b86:	21d2      	movs	r1, #210	@ 0xd2
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f885 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Set data rate, bandwidth, and enable channels
	temp_reg = settings::GYRO_DR_760HZ | settings::GYRO_BW_HIGH | settings::GYRO_PD_ON
 8000b8e:	23ff      	movs	r3, #255	@ 0xff
 8000b90:	75bb      	strb	r3, [r7, #22]
			| settings::GYRO_AX_EN | settings::GYRO_AY_EN | settings::GYRO_AZ_EN;
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG1, temp_reg);
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	2220      	movs	r2, #32
 8000b96:	21d2      	movs	r1, #210	@ 0xd2
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f000 f87d 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>

	// Mag setup
	// temperature sensor on, 220Hz data rate
	temp_reg = settings::MAG_DR_220HZ | 0x80;
 8000b9e:	239c      	movs	r3, #156	@ 0x9c
 8000ba0:	75bb      	strb	r3, [r7, #22]
	i2c_writeData(settings::MAG_ADDR, settings::MAG_CRA_REG, temp_reg);
 8000ba2:	7dbb      	ldrb	r3, [r7, #22]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	213c      	movs	r1, #60	@ 0x3c
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f875 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// gain settings
	temp_reg = settings::MAG_GN_1G3;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	75bb      	strb	r3, [r7, #22]
	i2c_writeData(settings::MAG_ADDR, settings::MAG_CRB_REG, temp_reg);
 8000bb2:	7dbb      	ldrb	r3, [r7, #22]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	213c      	movs	r1, #60	@ 0x3c
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f86d 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// enable continuous conversion
	i2c_writeData(settings::MAG_ADDR, settings::MAG_MR_REG, 0);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	213c      	movs	r1, #60	@ 0x3c
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f000 f867 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// read dummy addr
	value = i2c_readData(settings::MAG_ADDR, settings::MAG_IRA_REG);
 8000bca:	220a      	movs	r2, #10
 8000bcc:	213c      	movs	r1, #60	@ 0x3c
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 f83b 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	75fb      	strb	r3, [r7, #23]
	value = i2c_readData(settings::MAG_ADDR, settings::MAG_IRB_REG);
 8000bd8:	220b      	movs	r2, #11
 8000bda:	213c      	movs	r1, #60	@ 0x3c
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f834 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
	value = i2c_readData(settings::MAG_ADDR, settings::MAG_IRC_REG);
 8000be6:	220c      	movs	r2, #12
 8000be8:	213c      	movs	r1, #60	@ 0x3c
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f000 f82d 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]

	// Accel setup
	temp_reg = settings::ACCEL_DR_100HZ | settings::ACCEL_AX_EN | settings::ACCEL_AY_EN | settings::ACCEL_AZ_EN;
 8000bf4:	2357      	movs	r3, #87	@ 0x57
 8000bf6:	75bb      	strb	r3, [r7, #22]
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG1, temp_reg);
 8000bf8:	7dbb      	ldrb	r3, [r7, #22]
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2132      	movs	r1, #50	@ 0x32
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f000 f84a 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG2, 0);
 8000c04:	2300      	movs	r3, #0
 8000c06:	2221      	movs	r2, #33	@ 0x21
 8000c08:	2132      	movs	r1, #50	@ 0x32
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 f844 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Set DRDY1 source to INT1
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG3, 0x10);
 8000c10:	2310      	movs	r3, #16
 8000c12:	2222      	movs	r2, #34	@ 0x22
 8000c14:	2132      	movs	r1, #50	@ 0x32
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f000 f83e 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// 0x00 Set Hi-res mode off -- 0x08 Hi-res mode on
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG4, 0x88);
 8000c1c:	2388      	movs	r3, #136	@ 0x88
 8000c1e:	2223      	movs	r2, #35	@ 0x23
 8000c20:	2132      	movs	r1, #50	@ 0x32
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f000 f838 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG5, 0);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2224      	movs	r2, #36	@ 0x24
 8000c2c:	2132      	movs	r1, #50	@ 0x32
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f000 f832 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG6, 0);
 8000c34:	2300      	movs	r3, #0
 8000c36:	2225      	movs	r2, #37	@ 0x25
 8000c38:	2132      	movs	r1, #50	@ 0x32
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f000 f82c 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>

}
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_ZN6driver3imu12i2c_readDataEth>:
	i2c_writeData(settings::MAG_ADDR, settings::MAG_MR_REG, 0x03);
	//Shut down Accel
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG1, 0);
}

uint8_t imu::i2c_readData(uint16_t addr, uint8_t reg){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b088      	sub	sp, #32
 8000c4e:	af04      	add	r7, sp, #16
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(imu_conf.i2c, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	787b      	ldrb	r3, [r7, #1]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	8879      	ldrh	r1, [r7, #2]
 8000c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 030e 	add.w	r3, r7, #14
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f002 fbc3 	bl	8003408 <HAL_I2C_Mem_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d000      	beq.n	8000c8e <_ZN6driver3imu12i2c_readDataEth+0x44>
		__asm("NOP");
 8000c8c:	bf00      	nop
	return value;
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZN6driver3imu13i2c_writeDataEthh>:

void imu::i2c_writeData(uint16_t addr, uint8_t reg, uint8_t val){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af04      	add	r7, sp, #16
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	807b      	strh	r3, [r7, #2]
 8000caa:	460b      	mov	r3, r1
 8000cac:	707b      	strb	r3, [r7, #1]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	703b      	strb	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(imu_conf.i2c, addr, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 0x1000);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	8879      	ldrh	r1, [r7, #2]
 8000cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	463b      	mov	r3, r7
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f002 fa86 	bl	80031e0 <HAL_I2C_Mem_Write>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d000      	beq.n	8000ce0 <_ZN6driver3imu13i2c_writeDataEthh+0x48>
		__asm("NOP");
 8000cde:	bf00      	nop
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_ZN6driver3imu8getAccelEPs>:
	uint8_t temp_reg;
	temp_reg = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_TEMP);
	return temp_reg;
}

void imu::getAccel(int16_t *resV){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	uint8_t temp_reg[6];
	int16_t raw_data[3];

	temp_reg[0] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_X_L);
 8000cf2:	2228      	movs	r2, #40	@ 0x28
 8000cf4:	2132      	movs	r1, #50	@ 0x32
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa7 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	743b      	strb	r3, [r7, #16]
	temp_reg[1] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_X_H);
 8000d00:	2229      	movs	r2, #41	@ 0x29
 8000d02:	2132      	movs	r1, #50	@ 0x32
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffa0 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	747b      	strb	r3, [r7, #17]
	temp_reg[2] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Y_L);
 8000d0e:	222a      	movs	r2, #42	@ 0x2a
 8000d10:	2132      	movs	r1, #50	@ 0x32
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff99 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	74bb      	strb	r3, [r7, #18]
	temp_reg[3] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Y_H);
 8000d1c:	222b      	movs	r2, #43	@ 0x2b
 8000d1e:	2132      	movs	r1, #50	@ 0x32
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff92 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d26:	4603      	mov	r3, r0
 8000d28:	74fb      	strb	r3, [r7, #19]
	temp_reg[4] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Z_L);
 8000d2a:	222c      	movs	r2, #44	@ 0x2c
 8000d2c:	2132      	movs	r1, #50	@ 0x32
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff8b 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d34:	4603      	mov	r3, r0
 8000d36:	753b      	strb	r3, [r7, #20]
	temp_reg[5] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Z_H);
 8000d38:	222d      	movs	r2, #45	@ 0x2d
 8000d3a:	2132      	movs	r1, #50	@ 0x32
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff84 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d42:	4603      	mov	r3, r0
 8000d44:	757b      	strb	r3, [r7, #21]

	raw_data[0] = (int16_t)(((uint16_t)temp_reg[1] << 8) + temp_reg[0]);
 8000d46:	7c7b      	ldrb	r3, [r7, #17]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	7c3a      	ldrb	r2, [r7, #16]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	813b      	strh	r3, [r7, #8]
	raw_data[1] = (int16_t)(((uint16_t)temp_reg[3] << 8) + temp_reg[2]);
 8000d56:	7cfb      	ldrb	r3, [r7, #19]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	7cba      	ldrb	r2, [r7, #18]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	817b      	strh	r3, [r7, #10]
	raw_data[2] = (int16_t)(((uint16_t)temp_reg[5] << 8) + temp_reg[4]);
 8000d66:	7d7b      	ldrb	r3, [r7, #21]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	7d3a      	ldrb	r2, [r7, #20]
 8000d6e:	4413      	add	r3, r2
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	81bb      	strh	r3, [r7, #12]

	resV[0] = raw_data[0];
 8000d76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	801a      	strh	r2, [r3, #0]
	resV[1] = raw_data[1];
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3302      	adds	r3, #2
 8000d82:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d86:	801a      	strh	r2, [r3, #0]
	resV[2] = raw_data[2];
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d90:	801a      	strh	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN6driver3imu7getGyroEPs>:

void imu::getGyro(int16_t *resV){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	uint8_t temp_reg[6];
	int16_t raw_data[3];

	temp_reg[0] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_X_L);
 8000da4:	2228      	movs	r2, #40	@ 0x28
 8000da6:	21d2      	movs	r1, #210	@ 0xd2
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff4e 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dae:	4603      	mov	r3, r0
 8000db0:	743b      	strb	r3, [r7, #16]
	temp_reg[1] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_X_H);
 8000db2:	2229      	movs	r2, #41	@ 0x29
 8000db4:	21d2      	movs	r1, #210	@ 0xd2
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff47 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	747b      	strb	r3, [r7, #17]
	temp_reg[2] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Y_L);
 8000dc0:	222a      	movs	r2, #42	@ 0x2a
 8000dc2:	21d2      	movs	r1, #210	@ 0xd2
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff40 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	74bb      	strb	r3, [r7, #18]
	temp_reg[3] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Y_H);
 8000dce:	222b      	movs	r2, #43	@ 0x2b
 8000dd0:	21d2      	movs	r1, #210	@ 0xd2
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff39 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	74fb      	strb	r3, [r7, #19]
	temp_reg[4] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Z_L);
 8000ddc:	222c      	movs	r2, #44	@ 0x2c
 8000dde:	21d2      	movs	r1, #210	@ 0xd2
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff32 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000de6:	4603      	mov	r3, r0
 8000de8:	753b      	strb	r3, [r7, #20]
	temp_reg[5] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Z_H);
 8000dea:	222d      	movs	r2, #45	@ 0x2d
 8000dec:	21d2      	movs	r1, #210	@ 0xd2
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff2b 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000df4:	4603      	mov	r3, r0
 8000df6:	757b      	strb	r3, [r7, #21]

	raw_data[0] = (int16_t)(((uint16_t)temp_reg[1] << 8) + temp_reg[0]);
 8000df8:	7c7b      	ldrb	r3, [r7, #17]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	7c3a      	ldrb	r2, [r7, #16]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	813b      	strh	r3, [r7, #8]
	raw_data[1] = (int16_t)(((uint16_t)temp_reg[3] << 8) + temp_reg[2]);
 8000e08:	7cfb      	ldrb	r3, [r7, #19]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	7cba      	ldrb	r2, [r7, #18]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	817b      	strh	r3, [r7, #10]
	raw_data[2] = (int16_t)(((uint16_t)temp_reg[5] << 8) + temp_reg[4]);
 8000e18:	7d7b      	ldrb	r3, [r7, #21]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	7d3a      	ldrb	r2, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	81bb      	strh	r3, [r7, #12]

	resV[0] = raw_data[0];
 8000e28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	801a      	strh	r2, [r3, #0]
	resV[1] = raw_data[1];
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e38:	801a      	strh	r2, [r3, #0]
	resV[2] = raw_data[2];
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e42:	801a      	strh	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_ZN6driver3imu11readRefGyroEv>:

uint8_t imu::readRefGyro(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = i2c_readData(settings::GYRO_ADDR, settings::GYRO_REFERENCE);
 8000e54:	2225      	movs	r2, #37	@ 0x25
 8000e56:	21d2      	movs	r1, #210	@ 0xd2
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fef6 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
	return temp;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_ZN6driver3imu6getMagEPs>:

void imu::getMag(int16_t *resV){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	uint8_t temp_reg[6];
	temp_reg[0] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_X_H);
 8000e76:	2203      	movs	r2, #3
 8000e78:	213c      	movs	r1, #60	@ 0x3c
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fee5 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e80:	4603      	mov	r3, r0
 8000e82:	723b      	strb	r3, [r7, #8]
	temp_reg[1] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_X_L);
 8000e84:	2204      	movs	r2, #4
 8000e86:	213c      	movs	r1, #60	@ 0x3c
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fede 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	727b      	strb	r3, [r7, #9]
	temp_reg[2] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Y_H);
 8000e92:	2205      	movs	r2, #5
 8000e94:	213c      	movs	r1, #60	@ 0x3c
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fed7 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	72bb      	strb	r3, [r7, #10]
	temp_reg[3] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Y_L);
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	213c      	movs	r1, #60	@ 0x3c
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fed0 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	72fb      	strb	r3, [r7, #11]
	temp_reg[4] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Z_H);
 8000eae:	2207      	movs	r2, #7
 8000eb0:	213c      	movs	r1, #60	@ 0x3c
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fec9 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	733b      	strb	r3, [r7, #12]
	temp_reg[5] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Z_L);
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	213c      	movs	r1, #60	@ 0x3c
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fec2 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	737b      	strb	r3, [r7, #13]

	resV[0] = (int16_t)(((uint16_t)temp_reg[0] << 8) + temp_reg[1]);
 8000eca:	7a3b      	ldrb	r3, [r7, #8]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	7a7a      	ldrb	r2, [r7, #9]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	801a      	strh	r2, [r3, #0]
	resV[1] = (int16_t)(((uint16_t)temp_reg[2] << 8) + temp_reg[3]);
 8000edc:	7abb      	ldrb	r3, [r7, #10]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	7afa      	ldrb	r2, [r7, #11]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3302      	adds	r3, #2
 8000eec:	b212      	sxth	r2, r2
 8000eee:	801a      	strh	r2, [r3, #0]
	resV[2] = (int16_t)(((uint16_t)temp_reg[4] << 8) + temp_reg[5]);
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	7b7a      	ldrb	r2, [r7, #13]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3304      	adds	r3, #4
 8000f00:	b212      	sxth	r2, r2
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Process_LEDs_Buttons>:
 */

#include "ledsbutton.h"
#include "gpio.h"

void Process_LEDs_Buttons(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

    if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET)
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	4835      	ldr	r0, [pc, #212]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f14:	f002 f868 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d12c      	bne.n	8000f78 <Process_LEDs_Buttons+0x6c>
    {
        HAL_GPIO_WritePin(REDLED2_GPIO_Port, REDLED2_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2102      	movs	r1, #2
 8000f22:	4832      	ldr	r0, [pc, #200]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f24:	f002 f878 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	@ 0x64
 8000f2a:	f001 fbeb 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(REDLED1_GPIO_Port, REDLED1_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2101      	movs	r1, #1
 8000f32:	482e      	ldr	r0, [pc, #184]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f34:	f002 f870 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f38:	2064      	movs	r0, #100	@ 0x64
 8000f3a:	f001 fbe3 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED1_GPIO_Port, ORANGELED1_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2104      	movs	r1, #4
 8000f42:	482a      	ldr	r0, [pc, #168]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f44:	f002 f868 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f001 fbdb 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED2_GPIO_Port, ORANGELED2_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2104      	movs	r1, #4
 8000f52:	4825      	ldr	r0, [pc, #148]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f54:	f002 f860 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	@ 0x64
 8000f5a:	f001 fbd3 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED1_GPIO_Port, BLUELED1_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2108      	movs	r1, #8
 8000f62:	4821      	ldr	r0, [pc, #132]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f64:	f002 f858 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f68:	2064      	movs	r0, #100	@ 0x64
 8000f6a:	f001 fbcb 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED2_GPIO_Port, BLUELED2_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2110      	movs	r1, #16
 8000f72:	481d      	ldr	r0, [pc, #116]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f74:	f002 f850 	bl	8003018 <HAL_GPIO_WritePin>
    }


    if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET)
 8000f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7c:	481a      	ldr	r0, [pc, #104]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f7e:	f002 f833 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d12c      	bne.n	8000fe2 <Process_LEDs_Buttons+0xd6>
    {
        HAL_GPIO_WritePin(REDLED2_GPIO_Port, REDLED2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f8e:	f002 f843 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f92:	2064      	movs	r0, #100	@ 0x64
 8000f94:	f001 fbb6 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(REDLED1_GPIO_Port, REDLED1_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f9e:	f002 f83b 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	@ 0x64
 8000fa4:	f001 fbae 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED1_GPIO_Port, ORANGELED1_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	480f      	ldr	r0, [pc, #60]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000fae:	f002 f833 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	@ 0x64
 8000fb4:	f001 fba6 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED2_GPIO_Port, ORANGELED2_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000fbe:	f002 f82b 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f001 fb9e 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED1_GPIO_Port, BLUELED1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2108      	movs	r1, #8
 8000fcc:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000fce:	f002 f823 	bl	8003018 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fd2:	2064      	movs	r0, #100	@ 0x64
 8000fd4:	f001 fb96 	bl	8002704 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED2_GPIO_Port, BLUELED2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000fde:	f002 f81b 	bl	8003018 <HAL_GPIO_WritePin>
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	58021800 	.word	0x58021800
 8000fec:	58022800 	.word	0x58022800

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ffa:	f000 fa15 	bl	8001428 <_ZL10MPU_Configv>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001002:	f242 0234 	movw	r2, #8244	@ 0x2034
 8001006:	443a      	add	r2, r7
 8001008:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800100a:	bf00      	nop
 800100c:	4b8c      	ldr	r3, [pc, #560]	@ (8001240 <main+0x250>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00c      	beq.n	8001032 <main+0x42>
 8001018:	f242 0334 	movw	r3, #8244	@ 0x2034
 800101c:	443b      	add	r3, r7
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	f242 0134 	movw	r1, #8244	@ 0x2034
 8001026:	4439      	add	r1, r7
 8001028:	600a      	str	r2, [r1, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	dd01      	ble.n	8001032 <main+0x42>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <main+0x44>
 8001032:	2300      	movs	r3, #0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e9      	bne.n	800100c <main+0x1c>
  if ( timeout < 0 )
 8001038:	f242 0334 	movw	r3, #8244	@ 0x2034
 800103c:	443b      	add	r3, r7
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	da01      	bge.n	8001048 <main+0x58>
  {
  Error_Handler();
 8001044:	f000 fa1c 	bl	8001480 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f001 faca 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f904 	bl	8001258 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001050:	f000 f9c6 	bl	80013e0 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001054:	4b7a      	ldr	r3, [pc, #488]	@ (8001240 <main+0x250>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a79      	ldr	r2, [pc, #484]	@ (8001240 <main+0x250>)
 800105c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b76      	ldr	r3, [pc, #472]	@ (8001240 <main+0x250>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800106e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001072:	f842 3c34 	str.w	r3, [r2, #-52]
 8001076:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800107a:	f853 3c34 	ldr.w	r3, [r3, #-52]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800107e:	2000      	movs	r0, #0
 8001080:	f001 ffe4 	bl	800304c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f001 fffa 	bl	8003080 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800108c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001090:	f242 0234 	movw	r2, #8244	@ 0x2034
 8001094:	443a      	add	r2, r7
 8001096:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001098:	bf00      	nop
 800109a:	4b69      	ldr	r3, [pc, #420]	@ (8001240 <main+0x250>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <main+0xd0>
 80010a6:	f242 0334 	movw	r3, #8244	@ 0x2034
 80010aa:	443b      	add	r3, r7
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	f242 0134 	movw	r1, #8244	@ 0x2034
 80010b4:	4439      	add	r1, r7
 80010b6:	600a      	str	r2, [r1, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd01      	ble.n	80010c0 <main+0xd0>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <main+0xd2>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1e9      	bne.n	800109a <main+0xaa>
if ( timeout < 0 )
 80010c6:	f242 0334 	movw	r3, #8244	@ 0x2034
 80010ca:	443b      	add	r3, r7
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da01      	bge.n	80010d6 <main+0xe6>
{
Error_Handler();
 80010d2:	f000 f9d5 	bl	8001480 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f7ff fb69 	bl	80007ac <MX_GPIO_Init>
//  MX_SDMMC2_SD_Init();
//  MX_ETH_Init();
  MX_QUADSPI_Init();
 80010da:	f000 f9d7 	bl	800148c <MX_QUADSPI_Init>
  MX_I2C1_Init();
 80010de:	f7ff fc7f 	bl	80009e0 <MX_I2C1_Init>
//  MX_SPI3_Init();
  MX_UART5_Init();
 80010e2:	f001 f99d 	bl	8002420 <MX_UART5_Init>
//  MX_USB_OTG_FS_PCD_Init();
  MX_TIM3_Init();
 80010e6:	f001 f839 	bl	800215c <MX_TIM3_Init>
//  MX_ADC1_Init();
//  MX_ADC2_Init();
//  MX_DAC1_Init();
//  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  Servo_Init(&htim3);
 80010ea:	4856      	ldr	r0, [pc, #344]	@ (8001244 <main+0x254>)
 80010ec:	f000 ff76 	bl	8001fdc <Servo_Init>
  UART_Test_Init();
 80010f0:	f001 f930 	bl	8002354 <UART_Test_Init>
  UART_Send_String("UART5 Test Initialized!\r\n");
 80010f4:	4854      	ldr	r0, [pc, #336]	@ (8001248 <main+0x258>)
 80010f6:	f001 f93b 	bl	8002370 <UART_Send_String>

  driver::imu sensor = driver::imu(&hi2c1, nullptr, 0);
 80010fa:	f242 0024 	movw	r0, #8228	@ 0x2024
 80010fe:	4438      	add	r0, r7
 8001100:	2300      	movs	r3, #0
 8001102:	2200      	movs	r2, #0
 8001104:	4951      	ldr	r1, [pc, #324]	@ (800124c <main+0x25c>)
 8001106:	f7ff fd13 	bl	8000b30 <_ZN6driver3imuC1EP19__I2C_HandleTypeDefP12GPIO_TypeDeft>
  	  int16_t gyro_val[3];
      int16_t mag_val[3];
      int16_t acc_val[3];

      sensor.getGyro(gyro_val);
 800110a:	f242 021c 	movw	r2, #8220	@ 0x201c
 800110e:	443a      	add	r2, r7
 8001110:	f242 0324 	movw	r3, #8228	@ 0x2024
 8001114:	443b      	add	r3, r7
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fe3e 	bl	8000d9a <_ZN6driver3imu7getGyroEPs>
      sensor.getAccel(acc_val);
 800111e:	f242 020c 	movw	r2, #8204	@ 0x200c
 8001122:	443a      	add	r2, r7
 8001124:	f242 0324 	movw	r3, #8228	@ 0x2024
 8001128:	443b      	add	r3, r7
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fddb 	bl	8000ce8 <_ZN6driver3imu8getAccelEPs>
      sensor.getMag(mag_val);
 8001132:	f242 0214 	movw	r2, #8212	@ 0x2014
 8001136:	443a      	add	r2, r7
 8001138:	f242 0324 	movw	r3, #8228	@ 0x2024
 800113c:	443b      	add	r3, r7
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe93 	bl	8000e6c <_ZN6driver3imu6getMagEPs>

      sensor.readRefGyro();
 8001146:	f242 0324 	movw	r3, #8228	@ 0x2024
 800114a:	443b      	add	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe7d 	bl	8000e4c <_ZN6driver3imu11readRefGyroEv>

      volatile uint8_t buffer_test[MEMORY_SECTOR_SIZE];
      volatile uint8_t buffer_test_back[MEMORY_SECTOR_SIZE];
       uint32_t var = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	f242 0230 	movw	r2, #8240	@ 0x2030
 8001158:	443a      	add	r2, r7
 800115a:	6013      	str	r3, [r2, #0]

       uint8_t idvar;
       uint16_t sizeVar;

       OWN_QSPI_Read_ID(&idvar, &sizeVar);
 800115c:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <main+0x260>)
 800115e:	f242 0338 	movw	r3, #8248	@ 0x2038
 8001162:	4413      	add	r3, r2
 8001164:	19da      	adds	r2, r3, r7
 8001166:	4b3b      	ldr	r3, [pc, #236]	@ (8001254 <main+0x264>)
 8001168:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800116c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001170:	443b      	add	r3, r7
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fbb5 	bl	80018e4 <OWN_QSPI_Read_ID>

       if(OWN_QSPI_Init() != HAL_OK)
 800117a:	f000 fc0f 	bl	800199c <OWN_QSPI_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <main+0x1a2>
           Error_Handler();
 800118e:	f000 f977 	bl	8001480 <Error_Handler>


       for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 8001192:	2300      	movs	r3, #0
 8001194:	f242 0230 	movw	r2, #8240	@ 0x2030
 8001198:	443a      	add	r2, r7
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e018      	b.n	80011d0 <main+0x1e0>
           buffer_test[var] = (var & 0xff);
 800119e:	f242 0330 	movw	r3, #8240	@ 0x2030
 80011a2:	443b      	add	r3, r7
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	f241 0338 	movw	r3, #4152	@ 0x1038
 80011ac:	443b      	add	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	f242 0330 	movw	r3, #8240	@ 0x2030
 80011b4:	443b      	add	r3, r7
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	440b      	add	r3, r1
 80011ba:	3b2c      	subs	r3, #44	@ 0x2c
 80011bc:	701a      	strb	r2, [r3, #0]
       for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 80011be:	f242 0330 	movw	r3, #8240	@ 0x2030
 80011c2:	443b      	add	r3, r7
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	f242 0230 	movw	r2, #8240	@ 0x2030
 80011cc:	443a      	add	r2, r7
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	f242 0330 	movw	r3, #8240	@ 0x2030
 80011d4:	443b      	add	r3, r7
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011dc:	d3df      	bcc.n	800119e <main+0x1ae>
       }

       if(OWN_QSPI_Tester()!= HAL_OK)
 80011de:	f000 fc69 	bl	8001ab4 <OWN_QSPI_Tester>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <main+0x206>
           Error_Handler();
 80011f2:	f000 f945 	bl	8001480 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_LEDs_Buttons();
 80011f6:	f7ff fe89 	bl	8000f0c <Process_LEDs_Buttons>
	  Servo_TestFixedPositions(&htim3);
 80011fa:	4812      	ldr	r0, [pc, #72]	@ (8001244 <main+0x254>)
 80011fc:	f000 ff06 	bl	800200c <Servo_TestFixedPositions>
//	  UART_Send_String("Hello from STM32 UART5!\r\n");
	  sensor.getMag(mag_val);
 8001200:	f242 0214 	movw	r2, #8212	@ 0x2014
 8001204:	443a      	add	r2, r7
 8001206:	f242 0324 	movw	r3, #8228	@ 0x2024
 800120a:	443b      	add	r3, r7
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe2c 	bl	8000e6c <_ZN6driver3imu6getMagEPs>
	  sensor.getAccel(acc_val);
 8001214:	f242 020c 	movw	r2, #8204	@ 0x200c
 8001218:	443a      	add	r2, r7
 800121a:	f242 0324 	movw	r3, #8228	@ 0x2024
 800121e:	443b      	add	r3, r7
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fd60 	bl	8000ce8 <_ZN6driver3imu8getAccelEPs>
	  sensor.getGyro(gyro_val);
 8001228:	f242 021c 	movw	r2, #8220	@ 0x201c
 800122c:	443a      	add	r2, r7
 800122e:	f242 0324 	movw	r3, #8228	@ 0x2024
 8001232:	443b      	add	r3, r7
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fdaf 	bl	8000d9a <_ZN6driver3imu7getGyroEPs>
	  Process_LEDs_Buttons();
 800123c:	bf00      	nop
 800123e:	e7da      	b.n	80011f6 <main+0x206>
 8001240:	58024400 	.word	0x58024400
 8001244:	24000120 	.word	0x24000120
 8001248:	0800b020 	.word	0x0800b020
 800124c:	2400007c 	.word	0x2400007c
 8001250:	ffffdfd0 	.word	0xffffdfd0
 8001254:	ffffdfd3 	.word	0xffffdfd3

08001258 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09e      	sub	sp, #120	@ 0x78
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001262:	224c      	movs	r2, #76	@ 0x4c
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f009 fa4e 	bl	800a708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f009 fa47 	bl	800a708 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800127a:	2002      	movs	r0, #2
 800127c:	f002 fd38 	bl	8003cf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b53      	ldr	r3, [pc, #332]	@ (80013d4 <_Z18SystemClock_Configv+0x17c>)
 8001286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001288:	4a52      	ldr	r2, [pc, #328]	@ (80013d4 <_Z18SystemClock_Configv+0x17c>)
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001290:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <_Z18SystemClock_Configv+0x17c>)
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b4f      	ldr	r3, [pc, #316]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a4e      	ldr	r2, [pc, #312]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 80012a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b4c      	ldr	r3, [pc, #304]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012b2:	bf00      	nop
 80012b4:	4b48      	ldr	r3, [pc, #288]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f3      	bne.n	80012b4 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <_Z18SystemClock_Configv+0x184>)
 80012ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012d2:	4a42      	ldr	r2, [pc, #264]	@ (80013dc <_Z18SystemClock_Configv+0x184>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012dc:	4b3f      	ldr	r3, [pc, #252]	@ (80013dc <_Z18SystemClock_Configv+0x184>)
 80012de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a39      	ldr	r2, [pc, #228]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 80012f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <_Z18SystemClock_Configv+0x17c>)
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4a32      	ldr	r2, [pc, #200]	@ (80013d4 <_Z18SystemClock_Configv+0x17c>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001310:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <_Z18SystemClock_Configv+0x17c>)
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800131c:	bf00      	nop
 800131e:	4b2e      	ldr	r3, [pc, #184]	@ (80013d8 <_Z18SystemClock_Configv+0x180>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f3      	bne.n	800131e <_Z18SystemClock_Configv+0xc6>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001336:	2321      	movs	r3, #33	@ 0x21
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001348:	2302      	movs	r3, #2
 800134a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800134c:	2304      	movs	r3, #4
 800134e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001350:	23f0      	movs	r3, #240	@ 0xf0
 8001352:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001358:	2305      	movs	r3, #5
 800135a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001360:	2308      	movs	r3, #8
 8001362:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001364:	2300      	movs	r3, #0
 8001366:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001370:	4618      	mov	r0, r3
 8001372:	f003 f97b 	bl	800466c <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_Z18SystemClock_Configv+0x132>
  {
    Error_Handler();
 8001386:	f000 f87b 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	233f      	movs	r3, #63	@ 0x3f
 800138c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2303      	movs	r3, #3
 8001390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001396:	2308      	movs	r3, #8
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800139e:	2340      	movs	r3, #64	@ 0x40
 80013a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2104      	movs	r1, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fdb4 	bl	8004f20 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <_Z18SystemClock_Configv+0x174>
  {
    Error_Handler();
 80013c8:	f000 f85a 	bl	8001480 <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3778      	adds	r7, #120	@ 0x78
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	58000400 	.word	0x58000400
 80013d8:	58024800 	.word	0x58024800
 80013dc:	58024400 	.word	0x58024400

080013e0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0b0      	sub	sp, #192	@ 0xc0
 80013e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	22c0      	movs	r2, #192	@ 0xc0
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 f98b 	bl	800a708 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80013f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 80013fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001402:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f004 f916 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_Z24PeriphCommonClock_Configv+0x40>
  {
    Error_Handler();
 800141c:	f000 f830 	bl	8001480 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	37c0      	adds	r7, #192	@ 0xc0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800143a:	f001 faa3 	bl	8002984 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800143e:	2301      	movs	r3, #1
 8001440:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001442:	2300      	movs	r3, #0
 8001444:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800144a:	231f      	movs	r3, #31
 800144c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800144e:	2387      	movs	r3, #135	@ 0x87
 8001450:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001452:	2300      	movs	r3, #0
 8001454:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001456:	2300      	movs	r3, #0
 8001458:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800145a:	2301      	movs	r3, #1
 800145c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800145e:	2301      	movs	r3, #1
 8001460:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800146a:	463b      	mov	r3, r7
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fac1 	bl	80029f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001472:	2004      	movs	r0, #4
 8001474:	f001 fa9e 	bl	80029b4 <HAL_MPU_Enable>

}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi1.Instance = QUADSPI;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <MX_QUADSPI_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 8001498:	22ff      	movs	r2, #255	@ 0xff
 800149a:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 800149e:	2201      	movs	r2, #1
 80014a0:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014aa:	2219      	movs	r2, #25
 80014ac:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_QUADSPI_Init+0x50>)
 80014c8:	f002 fc6c 	bl	8003da4 <HAL_QSPI_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80014d2:	f7ff ffd5 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240000d0 	.word	0x240000d0
 80014e0:	52005000 	.word	0x52005000

080014e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0bc      	sub	sp, #240	@ 0xf0
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	22c0      	movs	r2, #192	@ 0xc0
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f009 f8ff 	bl	800a708 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a44      	ldr	r2, [pc, #272]	@ (8001620 <HAL_QSPI_MspInit+0x13c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	f040 8081 	bne.w	8001618 <HAL_QSPI_MspInit+0x134>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001516:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001522:	2300      	movs	r3, #0
 8001524:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4618      	mov	r0, r3
 800152c:	f004 f884 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001536:	f7ff ffa3 	bl	8001480 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 800153c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001540:	4a38      	ldr	r2, [pc, #224]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001546:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 800154c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001558:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155e:	4a31      	ldr	r2, [pc, #196]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157c:	4a29      	ldr	r2, [pc, #164]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_QSPI_MspInit+0x140>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001594:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001598:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015ae:	2309      	movs	r3, #9
 80015b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015b8:	4619      	mov	r1, r3
 80015ba:	481b      	ldr	r0, [pc, #108]	@ (8001628 <HAL_QSPI_MspInit+0x144>)
 80015bc:	f001 fa5a 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015da:	230a      	movs	r3, #10
 80015dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015e4:	4619      	mov	r1, r3
 80015e6:	4810      	ldr	r0, [pc, #64]	@ (8001628 <HAL_QSPI_MspInit+0x144>)
 80015e8:	f001 fa44 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001606:	2309      	movs	r3, #9
 8001608:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <HAL_QSPI_MspInit+0x148>)
 8001614:	f001 fa2e 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	37f0      	adds	r7, #240	@ 0xf0
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	52005000 	.word	0x52005000
 8001624:	58024400 	.word	0x58024400
 8001628:	58021400 	.word	0x58021400
 800162c:	58020400 	.word	0x58020400

08001630 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <HAL_QSPI_MspDeInit+0x40>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d111      	bne.n	8001666 <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_QSPI_MspDeInit+0x44>)
 8001644:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_QSPI_MspDeInit+0x44>)
 800164a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800164e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001652:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8001656:	4808      	ldr	r0, [pc, #32]	@ (8001678 <HAL_QSPI_MspDeInit+0x48>)
 8001658:	f001 fbbc 	bl	8002dd4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800165c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001660:	4806      	ldr	r0, [pc, #24]	@ (800167c <HAL_QSPI_MspDeInit+0x4c>)
 8001662:	f001 fbb7 	bl	8002dd4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	52005000 	.word	0x52005000
 8001674:	58024400 	.word	0x58024400
 8001678:	58021400 	.word	0x58021400
 800167c:	58020400 	.word	0x58020400

08001680 <OWN_QSPI_WriteEnable>:

/* USER CODE BEGIN 1 */

static uint8_t OWN_QSPI_WriteEnable(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	@ 0x38
 8001684:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800168c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001690:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800169e:	2300      	movs	r3, #0
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.Instruction = WRITE_ENABLE_CMD;
 80016a2:	2306      	movs	r3, #6
 80016a4:	603b      	str	r3, [r7, #0]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DummyCycles = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 80016b6:	463b      	mov	r3, r7
 80016b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <OWN_QSPI_WriteEnable+0x58>)
 80016c0:	f002 fc04 	bl	8003ecc <HAL_QSPI_Command>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <OWN_QSPI_WriteEnable+0x4e>
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <OWN_QSPI_WriteEnable+0x50>
    }

    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3738      	adds	r7, #56	@ 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	240000d0 	.word	0x240000d0

080016dc <OWN_QSPI_AutoPollingMemReady>:

static uint8_t OWN_QSPI_AutoPollingMemReady(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	@ 0x50
 80016e0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80016e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 80016e8:	2305      	movs	r3, #5
 80016ea:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80016f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DummyCycles = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001702:	2300      	movs	r3, #0
 8001704:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001706:	2300      	movs	r3, #0
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sConfig.Match = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x01;
 800170e:	2301      	movs	r3, #1
 8001710:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 800171a:	2310      	movs	r3, #16
 800171c:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800171e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001722:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi1, &sCommand, &sConfig,HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001724:	463a      	mov	r2, r7
 8001726:	f107 0118 	add.w	r1, r7, #24
 800172a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800172e:	4806      	ldr	r0, [pc, #24]	@ (8001748 <OWN_QSPI_AutoPollingMemReady+0x6c>)
 8001730:	f002 fd59 	bl	80041e6 <HAL_QSPI_AutoPolling>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <OWN_QSPI_AutoPollingMemReady+0x62>
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <OWN_QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3750      	adds	r7, #80	@ 0x50
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	240000d0 	.word	0x240000d0

0800174c <OWN_QSPI_Configuration>:

static uint8_t OWN_QSPI_Configuration(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	b090      	sub	sp, #64	@ 0x40
 8001750:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t test_buffer = 0 ;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800175a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_STATUS_REG_CMD;
 800175c:	2305      	movs	r3, #5
 800175e:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001776:	2300      	movs	r3, #0
 8001778:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800177a:	2300      	movs	r3, #0
 800177c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.NbData = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4619      	mov	r1, r3
 800178c:	4827      	ldr	r0, [pc, #156]	@ (800182c <OWN_QSPI_Configuration+0xe0>)
 800178e:	f002 fb9d 	bl	8003ecc <HAL_QSPI_Command>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <OWN_QSPI_Configuration+0x50>
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e042      	b.n	8001822 <OWN_QSPI_Configuration+0xd6>
    }
    if (HAL_QSPI_Receive(&hqspi1, &test_buffer,HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4619      	mov	r1, r3
 80017a4:	4821      	ldr	r0, [pc, #132]	@ (800182c <OWN_QSPI_Configuration+0xe0>)
 80017a6:	f002 fc81 	bl	80040ac <HAL_QSPI_Receive>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <OWN_QSPI_Configuration+0x68>
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e036      	b.n	8001822 <OWN_QSPI_Configuration+0xd6>
    }

    test_buffer |= 0x42;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	71fb      	strb	r3, [r7, #7]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80017be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c2:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = WRITE_STATUS_REG_CMD;
 80017c4:	2301      	movs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80017d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.NbData = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <OWN_QSPI_Configuration+0xe0>)
 80017f6:	f002 fb69 	bl	8003ecc <HAL_QSPI_Command>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <OWN_QSPI_Configuration+0xb8>
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e00e      	b.n	8001822 <OWN_QSPI_Configuration+0xd6>
    }

    if (HAL_QSPI_Transmit(&hqspi1, &test_buffer,HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180a:	4619      	mov	r1, r3
 800180c:	4807      	ldr	r0, [pc, #28]	@ (800182c <OWN_QSPI_Configuration+0xe0>)
 800180e:	f002 fbbb 	bl	8003f88 <HAL_QSPI_Transmit>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <OWN_QSPI_Configuration+0xd4>
        Error_Handler();
 8001818:	f7ff fe32 	bl	8001480 <Error_Handler>
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <OWN_QSPI_Configuration+0xd6>
    }
    return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3740      	adds	r7, #64	@ 0x40
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	240000d0 	.word	0x240000d0

08001830 <OWN_QSPI_ResetChip>:

static uint8_t OWN_QSPI_ResetChip(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	@ 0x40
 8001834:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t temp = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800183c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001840:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = RESET_ENABLE_CMD;
 8001842:	2366      	movs	r3, #102	@ 0x66
 8001844:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_NONE;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DummyCycles = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001868:	4619      	mov	r1, r3
 800186a:	481d      	ldr	r0, [pc, #116]	@ (80018e0 <OWN_QSPI_ResetChip+0xb0>)
 800186c:	f002 fb2e 	bl	8003ecc <HAL_QSPI_Command>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <OWN_QSPI_ResetChip+0x4a>
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e02d      	b.n	80018d6 <OWN_QSPI_ResetChip+0xa6>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 800187a:	2300      	movs	r3, #0
 800187c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001880:	e005      	b.n	800188e <OWN_QSPI_ResetChip+0x5e>
        __NOP();
 8001882:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8001884:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001888:	3301      	adds	r3, #1
 800188a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800188e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001892:	2b2e      	cmp	r3, #46	@ 0x2e
 8001894:	d9f5      	bls.n	8001882 <OWN_QSPI_ResetChip+0x52>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001896:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189a:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = RESET_EXECUTE_CMD;
 800189c:	2399      	movs	r3, #153	@ 0x99
 800189e:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_NONE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DummyCycles = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c2:	4619      	mov	r1, r3
 80018c4:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <OWN_QSPI_ResetChip+0xb0>)
 80018c6:	f002 fb01 	bl	8003ecc <HAL_QSPI_Command>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <OWN_QSPI_ResetChip+0xa4>
        != HAL_OK) {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <OWN_QSPI_ResetChip+0xa6>
    }
    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3740      	adds	r7, #64	@ 0x40
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	240000d0 	.word	0x240000d0

080018e4 <OWN_QSPI_Read_ID>:

uint8_t OWN_QSPI_Read_ID(uint8_t* mfID, uint16_t* chipSize){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b092      	sub	sp, #72	@ 0x48
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
    QSPI_CommandTypeDef sCommand;
    uint8_t test_buffer[3] = { 0 };
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <OWN_QSPI_Read_ID+0xb0>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	81bb      	strh	r3, [r7, #12]
 80018f4:	2300      	movs	r3, #0
 80018f6:	73bb      	strb	r3, [r7, #14]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80018f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.Instruction = READ_JEDEC_ID_CMD;
 80018fe:	239f      	movs	r3, #159	@ 0x9f
 8001900:	613b      	str	r3, [r7, #16]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DataMode = QSPI_DATA_1_LINE;
 800190a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DummyCycles = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800191c:	2300      	movs	r3, #0
 800191e:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.NbData = 3;
 8001920:	2303      	movs	r3, #3
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192c:	4619      	mov	r1, r3
 800192e:	481a      	ldr	r0, [pc, #104]	@ (8001998 <OWN_QSPI_Read_ID+0xb4>)
 8001930:	f002 facc 	bl	8003ecc <HAL_QSPI_Command>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <OWN_QSPI_Read_ID+0x5a>
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e025      	b.n	800198a <OWN_QSPI_Read_ID+0xa6>
    }
    if (HAL_QSPI_Receive(&hqspi1, test_buffer,HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001946:	4619      	mov	r1, r3
 8001948:	4813      	ldr	r0, [pc, #76]	@ (8001998 <OWN_QSPI_Read_ID+0xb4>)
 800194a:	f002 fbaf 	bl	80040ac <HAL_QSPI_Receive>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <OWN_QSPI_Read_ID+0x74>
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e018      	b.n	800198a <OWN_QSPI_Read_ID+0xa6>
    }

    *mfID = test_buffer[0];
 8001958:	7b3a      	ldrb	r2, [r7, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	701a      	strb	r2, [r3, #0]
    *chipSize = ((uint16_t)(test_buffer[1]) << 8) | (uint16_t)(test_buffer[2]);
 800195e:	7b7b      	ldrb	r3, [r7, #13]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21a      	sxth	r2, r3
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21b      	sxth	r3, r3
 800196c:	b29a      	uxth	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	801a      	strh	r2, [r3, #0]

    if(test_buffer[0] == 0x9D && test_buffer[1] == 0x40 && test_buffer[2] == 0x12)
 8001972:	7b3b      	ldrb	r3, [r7, #12]
 8001974:	2b9d      	cmp	r3, #157	@ 0x9d
 8001976:	d107      	bne.n	8001988 <OWN_QSPI_Read_ID+0xa4>
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	2b40      	cmp	r3, #64	@ 0x40
 800197c:	d104      	bne.n	8001988 <OWN_QSPI_Read_ID+0xa4>
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	2b12      	cmp	r3, #18
 8001982:	d101      	bne.n	8001988 <OWN_QSPI_Read_ID+0xa4>
        return 0;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <OWN_QSPI_Read_ID+0xa6>
    return 0xFF;
 8001988:	23ff      	movs	r3, #255	@ 0xff
}
 800198a:	4618      	mov	r0, r3
 800198c:	3748      	adds	r7, #72	@ 0x48
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	0800b03c 	.word	0x0800b03c
 8001998:	240000d0 	.word	0x240000d0

0800199c <OWN_QSPI_Init>:

uint8_t OWN_QSPI_Init(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
    uint8_t status = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
    if (HAL_QSPI_DeInit(&hqspi1) != HAL_OK) {
 80019a6:	4819      	ldr	r0, [pc, #100]	@ (8001a0c <OWN_QSPI_Init+0x70>)
 80019a8:	f002 fa70 	bl	8003e8c <HAL_QSPI_DeInit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <OWN_QSPI_Init+0x1a>
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e025      	b.n	8001a02 <OWN_QSPI_Init+0x66>
    }
    MX_QUADSPI_Init();
 80019b6:	f7ff fd69 	bl	800148c <MX_QUADSPI_Init>

    if (OWN_QSPI_ResetChip() != HAL_OK) {
 80019ba:	f7ff ff39 	bl	8001830 <OWN_QSPI_ResetChip>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <OWN_QSPI_Init+0x2c>
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e01c      	b.n	8001a02 <OWN_QSPI_Init+0x66>
    }

    HAL_Delay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f000 fe9b 	bl	8002704 <HAL_Delay>

    if (OWN_QSPI_AutoPollingMemReady() != HAL_OK) {
 80019ce:	f7ff fe85 	bl	80016dc <OWN_QSPI_AutoPollingMemReady>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <OWN_QSPI_Init+0x40>
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e012      	b.n	8001a02 <OWN_QSPI_Init+0x66>
    }

    if (OWN_QSPI_WriteEnable() != HAL_OK) {
 80019dc:	f7ff fe50 	bl	8001680 <OWN_QSPI_WriteEnable>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <OWN_QSPI_Init+0x4e>

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00b      	b.n	8001a02 <OWN_QSPI_Init+0x66>
    }

    OWN_QSPI_ReadStatus(&status);
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fab5 	bl	8001f5c <OWN_QSPI_ReadStatus>

    if (OWN_QSPI_Configuration() != HAL_OK) {
 80019f2:	f7ff feab 	bl	800174c <OWN_QSPI_Configuration>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <OWN_QSPI_Init+0x64>
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <OWN_QSPI_Init+0x66>
    }

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000d0 	.word	0x240000d0

08001a10 <OWN_QSPI_EraseSector>:

uint8_t OWN_QSPI_EraseSector(uint32_t startAddr, uint32_t endAddr){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b090      	sub	sp, #64	@ 0x40
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    QSPI_CommandTypeDef sCommand;

    startAddr = startAddr - startAddr % MEMORY_SECTOR_SIZE;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <OWN_QSPI_EraseSector+0x9c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	607b      	str	r3, [r7, #4]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a26:	623b      	str	r3, [r7, #32]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a32:	617b      	str	r3, [r7, #20]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	60bb      	str	r3, [r7, #8]
    sCommand.DummyCycles = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]

    while (endAddr >= startAddr) {
 8001a50:	e022      	b.n	8001a98 <OWN_QSPI_EraseSector+0x88>
        sCommand.Address = (startAddr & 0x0FFFFFFF);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001a58:	60fb      	str	r3, [r7, #12]

        if (OWN_QSPI_WriteEnable() != HAL_OK) {
 8001a5a:	f7ff fe11 	bl	8001680 <OWN_QSPI_WriteEnable>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <OWN_QSPI_EraseSector+0x58>
            return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e01c      	b.n	8001aa2 <OWN_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a70:	4619      	mov	r1, r3
 8001a72:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <OWN_QSPI_EraseSector+0xa0>)
 8001a74:	f002 fa2a 	bl	8003ecc <HAL_QSPI_Command>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <OWN_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <OWN_QSPI_EraseSector+0x92>
        }
        startAddr += MEMORY_SECTOR_SIZE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a88:	607b      	str	r3, [r7, #4]

        if (OWN_QSPI_AutoPollingMemReady() != HAL_OK) {
 8001a8a:	f7ff fe27 	bl	80016dc <OWN_QSPI_AutoPollingMemReady>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <OWN_QSPI_EraseSector+0x88>
            return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e004      	b.n	8001aa2 <OWN_QSPI_EraseSector+0x92>
    while (endAddr >= startAddr) {
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d2d8      	bcs.n	8001a52 <OWN_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3740      	adds	r7, #64	@ 0x40
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	fffff000 	.word	0xfffff000
 8001ab0:	240000d0 	.word	0x240000d0

08001ab4 <OWN_QSPI_Tester>:

uint8_t OWN_QSPI_Tester(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b2      	sub	sp, #200	@ 0xc8
 8001ab8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t status;
    uint8_t read_reg[64] = {0};
 8001aba:	2300      	movs	r3, #0
 8001abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001abe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ac2:	223c      	movs	r2, #60	@ 0x3c
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f008 fe1e 	bl	800a708 <memset>
    uint8_t write_reg[64] = {0};
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	223c      	movs	r2, #60	@ 0x3c
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f008 fe15 	bl	800a708 <memset>

    UART_Send_Data("Starting QSPI Test...\r\n");
 8001ade:	48c0      	ldr	r0, [pc, #768]	@ (8001de0 <OWN_QSPI_Tester+0x32c>)
 8001ae0:	f000 fc5c 	bl	800239c <UART_Send_Data>

    // 1. Enable Write Operation
    if (OWN_QSPI_WriteEnable() != HAL_OK) {
 8001ae4:	f7ff fdcc 	bl	8001680 <OWN_QSPI_WriteEnable>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <OWN_QSPI_Tester+0x44>
        UART_Send_Data("❌ ERROR: QSPI Write Enable Failed!\r\n");
 8001aee:	48bd      	ldr	r0, [pc, #756]	@ (8001de4 <OWN_QSPI_Tester+0x330>)
 8001af0:	f000 fc54 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e16e      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }
    UART_Send_Data("✅ QSPI Write Enable Success!\r\n");
 8001af8:	48bb      	ldr	r0, [pc, #748]	@ (8001de8 <OWN_QSPI_Tester+0x334>)
 8001afa:	f000 fc4f 	bl	800239c <UART_Send_Data>

    // 2. Read and Verify Status Register
    if (OWN_QSPI_ReadStatus(&status) != HAL_OK) {
 8001afe:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa2a 	bl	8001f5c <OWN_QSPI_ReadStatus>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <OWN_QSPI_Tester+0x64>
        UART_Send_Data("❌ ERROR: QSPI Status Register Read Failed!\r\n");
 8001b0e:	48b7      	ldr	r0, [pc, #732]	@ (8001dec <OWN_QSPI_Tester+0x338>)
 8001b10:	f000 fc44 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e15e      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }
    UART_Send_Data("✅ QSPI Status Register Read: 0x%02X\r\n", status);
 8001b18:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	48b4      	ldr	r0, [pc, #720]	@ (8001df0 <OWN_QSPI_Tester+0x33c>)
 8001b20:	f000 fc3c 	bl	800239c <UART_Send_Data>

    if ((status & 0x7E) != 0x42) {
 8001b24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b28:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001b2c:	2b42      	cmp	r3, #66	@ 0x42
 8001b2e:	d007      	beq.n	8001b40 <OWN_QSPI_Tester+0x8c>
        UART_Send_Data("❌ ERROR: QSPI Status Incorrect! Expected 0x42, Got 0x%02X\r\n", status);
 8001b30:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b34:	4619      	mov	r1, r3
 8001b36:	48af      	ldr	r0, [pc, #700]	@ (8001df4 <OWN_QSPI_Tester+0x340>)
 8001b38:	f000 fc30 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e14a      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }
    UART_Send_Data("✅ QSPI Status Verified (WEL = 1, QE = 1, BPx = 0)\r\n");
 8001b40:	48ad      	ldr	r0, [pc, #692]	@ (8001df8 <OWN_QSPI_Tester+0x344>)
 8001b42:	f000 fc2b 	bl	800239c <UART_Send_Data>

    // 3. Erase a Sector (4kB)
    UART_Send_Data("⚡ Erasing QSPI Sector at Address: 0x00000000...\r\n");
 8001b46:	48ad      	ldr	r0, [pc, #692]	@ (8001dfc <OWN_QSPI_Tester+0x348>)
 8001b48:	f000 fc28 	bl	800239c <UART_Send_Data>
    if (OWN_QSPI_EraseSector(0, 63) != HAL_OK) {
 8001b4c:	213f      	movs	r1, #63	@ 0x3f
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff ff5e 	bl	8001a10 <OWN_QSPI_EraseSector>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <OWN_QSPI_Tester+0xb0>
        UART_Send_Data("❌ ERROR: QSPI Erase Failed!\r\n");
 8001b5a:	48a9      	ldr	r0, [pc, #676]	@ (8001e00 <OWN_QSPI_Tester+0x34c>)
 8001b5c:	f000 fc1e 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e138      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }
    HAL_Delay(2);
 8001b64:	2002      	movs	r0, #2
 8001b66:	f000 fdcd 	bl	8002704 <HAL_Delay>
    UART_Send_Data("✅ QSPI Sector Erased Successfully!\r\n");
 8001b6a:	48a6      	ldr	r0, [pc, #664]	@ (8001e04 <OWN_QSPI_Tester+0x350>)
 8001b6c:	f000 fc16 	bl	800239c <UART_Send_Data>

    // 4. Read Erased Memory
    UART_Send_Data("📖 Reading Erased Data...\r\n");
 8001b70:	48a5      	ldr	r0, [pc, #660]	@ (8001e08 <OWN_QSPI_Tester+0x354>)
 8001b72:	f000 fc13 	bl	800239c <UART_Send_Data>
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8001b7e:	236b      	movs	r3, #107	@ 0x6b
 8001b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    sCommand.Address = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001ba0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    sCommand.DummyCycles = 8;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    sCommand.NbData = 64;
 8001bc0:	2340      	movs	r3, #64	@ 0x40
 8001bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001bc6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4619      	mov	r1, r3
 8001bd0:	488e      	ldr	r0, [pc, #568]	@ (8001e0c <OWN_QSPI_Tester+0x358>)
 8001bd2:	f002 f97b 	bl	8003ecc <HAL_QSPI_Command>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <OWN_QSPI_Tester+0x132>
        UART_Send_Data("❌ ERROR: QSPI Read Command Failed!\r\n");
 8001bdc:	488c      	ldr	r0, [pc, #560]	@ (8001e10 <OWN_QSPI_Tester+0x35c>)
 8001bde:	f000 fbdd 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0f7      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }

    if (HAL_QSPI_Receive(&hqspi1, read_reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001be6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4886      	ldr	r0, [pc, #536]	@ (8001e0c <OWN_QSPI_Tester+0x358>)
 8001bf2:	f002 fa5b 	bl	80040ac <HAL_QSPI_Receive>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <OWN_QSPI_Tester+0x152>
        UART_Send_Data("❌ ERROR: QSPI Read Receive Failed!\r\n");
 8001bfc:	4885      	ldr	r0, [pc, #532]	@ (8001e14 <OWN_QSPI_Tester+0x360>)
 8001bfe:	f000 fbcd 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0e7      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }

    HAL_Delay(2);
 8001c06:	2002      	movs	r0, #2
 8001c08:	f000 fd7c 	bl	8002704 <HAL_Delay>

    // Print First 16 Bytes of Read Data
    UART_Send_Data("✅ QSPI Read Success! First 16 Bytes: ");
 8001c0c:	4882      	ldr	r0, [pc, #520]	@ (8001e18 <OWN_QSPI_Tester+0x364>)
 8001c0e:	f000 fbc5 	bl	800239c <UART_Send_Data>
    for (uint8_t i = 0; i < 16; i++) {
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8001c18:	e00e      	b.n	8001c38 <OWN_QSPI_Tester+0x184>
        UART_Send_Data("0x%02X ", read_reg[i]);
 8001c1a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001c1e:	33c8      	adds	r3, #200	@ 0xc8
 8001c20:	443b      	add	r3, r7
 8001c22:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001c26:	4619      	mov	r1, r3
 8001c28:	487c      	ldr	r0, [pc, #496]	@ (8001e1c <OWN_QSPI_Tester+0x368>)
 8001c2a:	f000 fbb7 	bl	800239c <UART_Send_Data>
    for (uint8_t i = 0; i < 16; i++) {
 8001c2e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001c32:	3301      	adds	r3, #1
 8001c34:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8001c38:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d9ec      	bls.n	8001c1a <OWN_QSPI_Tester+0x166>
    }
    UART_Send_Data("\r\n");
 8001c40:	4877      	ldr	r0, [pc, #476]	@ (8001e20 <OWN_QSPI_Tester+0x36c>)
 8001c42:	f000 fbab 	bl	800239c <UART_Send_Data>

    // Check if Erased Successfully
    for (uint8_t i = 0; i < 64; ++i) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 8001c4c:	e01a      	b.n	8001c84 <OWN_QSPI_Tester+0x1d0>
        if (read_reg[i] != 0xFF) {
 8001c4e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8001c52:	33c8      	adds	r3, #200	@ 0xc8
 8001c54:	443b      	add	r3, r7
 8001c56:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001c5a:	2bff      	cmp	r3, #255	@ 0xff
 8001c5c:	d00d      	beq.n	8001c7a <OWN_QSPI_Tester+0x1c6>
            UART_Send_Data("❌ ERROR: Erase Verification Failed at Byte %d (Expected 0xFF, Got 0x%02X)\r\n", i, read_reg[i]);
 8001c5e:	f897 10c6 	ldrb.w	r1, [r7, #198]	@ 0xc6
 8001c62:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8001c66:	33c8      	adds	r3, #200	@ 0xc8
 8001c68:	443b      	add	r3, r7
 8001c6a:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	486c      	ldr	r0, [pc, #432]	@ (8001e24 <OWN_QSPI_Tester+0x370>)
 8001c72:	f000 fb93 	bl	800239c <UART_Send_Data>
            return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0ad      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    for (uint8_t i = 0; i < 64; ++i) {
 8001c7a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 8001c84:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8001c88:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c8a:	d9e0      	bls.n	8001c4e <OWN_QSPI_Tester+0x19a>
        }
    }
    UART_Send_Data("✅ Erased Verification Passed!\r\n");
 8001c8c:	4866      	ldr	r0, [pc, #408]	@ (8001e28 <OWN_QSPI_Tester+0x374>)
 8001c8e:	f000 fb85 	bl	800239c <UART_Send_Data>

    // 5. Write Dummy Data
    UART_Send_Data("✍️ Writing Dummy Data to Address: 0x00000000...\r\n");
 8001c92:	4866      	ldr	r0, [pc, #408]	@ (8001e2c <OWN_QSPI_Tester+0x378>)
 8001c94:	f000 fb82 	bl	800239c <UART_Send_Data>
    for (uint8_t i = 0; i < 64; ++i) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
 8001c9e:	e00c      	b.n	8001cba <OWN_QSPI_Tester+0x206>
        write_reg[i] = i;
 8001ca0:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001ca4:	33c8      	adds	r3, #200	@ 0xc8
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f897 20c5 	ldrb.w	r2, [r7, #197]	@ 0xc5
 8001cac:	f803 2cc4 	strb.w	r2, [r3, #-196]
    for (uint8_t i = 0; i < 64; ++i) {
 8001cb0:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
 8001cba:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001cbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cc0:	d9ee      	bls.n	8001ca0 <OWN_QSPI_Tester+0x1ec>
    }

    if (OWN_QSPI_WriteMemory(write_reg, 0, 64) != HAL_OK) {
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2240      	movs	r2, #64	@ 0x40
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f8bb 	bl	8001e44 <OWN_QSPI_WriteMemory>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <OWN_QSPI_Tester+0x22a>
        UART_Send_Data("❌ ERROR: QSPI Write Failed!\r\n");
 8001cd4:	4856      	ldr	r0, [pc, #344]	@ (8001e30 <OWN_QSPI_Tester+0x37c>)
 8001cd6:	f000 fb61 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e07b      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }

    HAL_Delay(2);
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f000 fd10 	bl	8002704 <HAL_Delay>
    UART_Send_Data("✅ QSPI Write Success!\r\n");
 8001ce4:	4853      	ldr	r0, [pc, #332]	@ (8001e34 <OWN_QSPI_Tester+0x380>)
 8001ce6:	f000 fb59 	bl	800239c <UART_Send_Data>

    // 6. Read Back Data
    UART_Send_Data("📖 Reading Back Written Data...\r\n");
 8001cea:	4853      	ldr	r0, [pc, #332]	@ (8001e38 <OWN_QSPI_Tester+0x384>)
 8001cec:	f000 fb56 	bl	800239c <UART_Send_Data>
    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001cf0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4844      	ldr	r0, [pc, #272]	@ (8001e0c <OWN_QSPI_Tester+0x358>)
 8001cfc:	f002 f8e6 	bl	8003ecc <HAL_QSPI_Command>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <OWN_QSPI_Tester+0x25c>
        UART_Send_Data("❌ ERROR: QSPI Read Command Failed!\r\n");
 8001d06:	4842      	ldr	r0, [pc, #264]	@ (8001e10 <OWN_QSPI_Tester+0x35c>)
 8001d08:	f000 fb48 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e062      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }

    if (HAL_QSPI_Receive(&hqspi1, read_reg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001d10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d18:	4619      	mov	r1, r3
 8001d1a:	483c      	ldr	r0, [pc, #240]	@ (8001e0c <OWN_QSPI_Tester+0x358>)
 8001d1c:	f002 f9c6 	bl	80040ac <HAL_QSPI_Receive>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <OWN_QSPI_Tester+0x27c>
        UART_Send_Data("❌ ERROR: QSPI Read Receive Failed!\r\n");
 8001d26:	483b      	ldr	r0, [pc, #236]	@ (8001e14 <OWN_QSPI_Tester+0x360>)
 8001d28:	f000 fb38 	bl	800239c <UART_Send_Data>
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e052      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    }

    HAL_Delay(2);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f000 fce7 	bl	8002704 <HAL_Delay>

    // Print First 16 Bytes of Read Data
    UART_Send_Data("✅ QSPI Read Success! First 16 Bytes: ");
 8001d36:	4838      	ldr	r0, [pc, #224]	@ (8001e18 <OWN_QSPI_Tester+0x364>)
 8001d38:	f000 fb30 	bl	800239c <UART_Send_Data>
    for (uint8_t i = 0; i < 16; i++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8001d42:	e00e      	b.n	8001d62 <OWN_QSPI_Tester+0x2ae>
        UART_Send_Data("0x%02X ", read_reg[i]);
 8001d44:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8001d48:	33c8      	adds	r3, #200	@ 0xc8
 8001d4a:	443b      	add	r3, r7
 8001d4c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4832      	ldr	r0, [pc, #200]	@ (8001e1c <OWN_QSPI_Tester+0x368>)
 8001d54:	f000 fb22 	bl	800239c <UART_Send_Data>
    for (uint8_t i = 0; i < 16; i++) {
 8001d58:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8001d62:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	d9ec      	bls.n	8001d44 <OWN_QSPI_Tester+0x290>
    }
    UART_Send_Data("\r\n");
 8001d6a:	482d      	ldr	r0, [pc, #180]	@ (8001e20 <OWN_QSPI_Tester+0x36c>)
 8001d6c:	f000 fb16 	bl	800239c <UART_Send_Data>

    // Verify Data Match
    for (uint8_t i = 0; i < 64; ++i) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001d76:	e026      	b.n	8001dc6 <OWN_QSPI_Tester+0x312>
        if (read_reg[i] != write_reg[i]) {
 8001d78:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001d7c:	33c8      	adds	r3, #200	@ 0xc8
 8001d7e:	443b      	add	r3, r7
 8001d80:	f813 2c84 	ldrb.w	r2, [r3, #-132]
 8001d84:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001d88:	33c8      	adds	r3, #200	@ 0xc8
 8001d8a:	443b      	add	r3, r7
 8001d8c:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d013      	beq.n	8001dbc <OWN_QSPI_Tester+0x308>
            UART_Send_Data("❌ ERROR: Data Mismatch at Byte %d (Expected 0x%02X, Got 0x%02X)\r\n", i, write_reg[i], read_reg[i]);
 8001d94:	f897 10c3 	ldrb.w	r1, [r7, #195]	@ 0xc3
 8001d98:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001d9c:	33c8      	adds	r3, #200	@ 0xc8
 8001d9e:	443b      	add	r3, r7
 8001da0:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 8001da4:	461a      	mov	r2, r3
 8001da6:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001daa:	33c8      	adds	r3, #200	@ 0xc8
 8001dac:	443b      	add	r3, r7
 8001dae:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001db2:	4822      	ldr	r0, [pc, #136]	@ (8001e3c <OWN_QSPI_Tester+0x388>)
 8001db4:	f000 faf2 	bl	800239c <UART_Send_Data>
            return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e00c      	b.n	8001dd6 <OWN_QSPI_Tester+0x322>
    for (uint8_t i = 0; i < 64; ++i) {
 8001dbc:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001dc6:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dcc:	d9d4      	bls.n	8001d78 <OWN_QSPI_Tester+0x2c4>
        }
    }
    UART_Send_Data("✅ QSPI Test Passed!\r\n");
 8001dce:	481c      	ldr	r0, [pc, #112]	@ (8001e40 <OWN_QSPI_Tester+0x38c>)
 8001dd0:	f000 fae4 	bl	800239c <UART_Send_Data>

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	37c8      	adds	r7, #200	@ 0xc8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800b040 	.word	0x0800b040
 8001de4:	0800b058 	.word	0x0800b058
 8001de8:	0800b080 	.word	0x0800b080
 8001dec:	0800b0a4 	.word	0x0800b0a4
 8001df0:	0800b0d4 	.word	0x0800b0d4
 8001df4:	0800b0fc 	.word	0x0800b0fc
 8001df8:	0800b13c 	.word	0x0800b13c
 8001dfc:	0800b174 	.word	0x0800b174
 8001e00:	0800b1a8 	.word	0x0800b1a8
 8001e04:	0800b1c8 	.word	0x0800b1c8
 8001e08:	0800b1f0 	.word	0x0800b1f0
 8001e0c:	240000d0 	.word	0x240000d0
 8001e10:	0800b210 	.word	0x0800b210
 8001e14:	0800b238 	.word	0x0800b238
 8001e18:	0800b260 	.word	0x0800b260
 8001e1c:	0800b288 	.word	0x0800b288
 8001e20:	0800b290 	.word	0x0800b290
 8001e24:	0800b294 	.word	0x0800b294
 8001e28:	0800b2e4 	.word	0x0800b2e4
 8001e2c:	0800b308 	.word	0x0800b308
 8001e30:	0800b340 	.word	0x0800b340
 8001e34:	0800b360 	.word	0x0800b360
 8001e38:	0800b37c 	.word	0x0800b37c
 8001e3c:	0800b3a0 	.word	0x0800b3a0
 8001e40:	0800b3e4 	.word	0x0800b3e4

08001e44 <OWN_QSPI_WriteMemory>:


uint8_t OWN_QSPI_WriteMemory(uint8_t* buffer, uint32_t addr, uint32_t buff_size){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
    QSPI_CommandTypeDef sCommand;
    uint32_t end_addr, current_size, current_addr;

    /* Calculation of the size between the write address and the end of the page */
    current_addr = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	653b      	str	r3, [r7, #80]	@ 0x50


    //
    while (current_addr <= addr) {
 8001e54:	e003      	b.n	8001e5e <OWN_QSPI_WriteMemory+0x1a>
        current_addr += MEMORY_PAGE_SIZE;
 8001e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e5c:	653b      	str	r3, [r7, #80]	@ 0x50
    while (current_addr <= addr) {
 8001e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d9f7      	bls.n	8001e56 <OWN_QSPI_WriteMemory+0x12>
    }
    current_size = current_addr - addr;
 8001e66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > buff_size) {
 8001e6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d901      	bls.n	8001e7a <OWN_QSPI_WriteMemory+0x36>
        current_size = buff_size;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* Initialize the adress variables */
    current_addr = addr;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	653b      	str	r3, [r7, #80]	@ 0x50
    end_addr = addr + buff_size;
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e90:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.Instruction = QUAD_READ_IO_CMD;
 8001ea2:	23eb      	movs	r3, #235	@ 0xeb
 8001ea4:	617b      	str	r3, [r7, #20]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001eac:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.NbData = buff_size;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.Address = addr;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
    sCommand.DummyCycles = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Perform the write page by page */
    do {
        sCommand.Address = current_addr;
 8001ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ec0:	61bb      	str	r3, [r7, #24]
        sCommand.NbData = current_size;
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if (current_size == 0) {
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <OWN_QSPI_WriteMemory+0x8c>
            return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e03f      	b.n	8001f50 <OWN_QSPI_WriteMemory+0x10c>
        }

        /* Enable write operations */
        if (OWN_QSPI_WriteEnable() != HAL_OK) {
 8001ed0:	f7ff fbd6 	bl	8001680 <OWN_QSPI_WriteEnable>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <OWN_QSPI_WriteMemory+0x9a>
            return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e038      	b.n	8001f50 <OWN_QSPI_WriteMemory+0x10c>
        }

        /* Configure the command */
        if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481b      	ldr	r0, [pc, #108]	@ (8001f58 <OWN_QSPI_WriteMemory+0x114>)
 8001eea:	f001 ffef 	bl	8003ecc <HAL_QSPI_Command>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <OWN_QSPI_WriteMemory+0xb4>
            return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e02b      	b.n	8001f50 <OWN_QSPI_WriteMemory+0x10c>
        }

        /* Transmission of the data */
        if (HAL_QSPI_Transmit(&hqspi1, buffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	4816      	ldr	r0, [pc, #88]	@ (8001f58 <OWN_QSPI_WriteMemory+0x114>)
 8001f00:	f002 f842 	bl	8003f88 <HAL_QSPI_Transmit>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <OWN_QSPI_WriteMemory+0xca>
            return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e020      	b.n	8001f50 <OWN_QSPI_WriteMemory+0x10c>
        }

        /* Configure automatic polling mode to wait for end of program */
        if (OWN_QSPI_AutoPollingMemReady() != HAL_OK) {
 8001f0e:	f7ff fbe5 	bl	80016dc <OWN_QSPI_AutoPollingMemReady>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <OWN_QSPI_WriteMemory+0xd8>
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e019      	b.n	8001f50 <OWN_QSPI_WriteMemory+0x10c>
        }

        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 8001f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f20:	4413      	add	r3, r2
 8001f22:	653b      	str	r3, [r7, #80]	@ 0x50
        buffer += current_size;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
        current_size =((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8001f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f2e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d203      	bcs.n	8001f40 <OWN_QSPI_WriteMemory+0xfc>
 8001f38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	e001      	b.n	8001f44 <OWN_QSPI_WriteMemory+0x100>
 8001f40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f44:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (current_addr <= end_addr);
 8001f46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d9b7      	bls.n	8001ebe <OWN_QSPI_WriteMemory+0x7a>

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3758      	adds	r7, #88	@ 0x58
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	240000d0 	.word	0x240000d0

08001f5c <OWN_QSPI_ReadStatus>:
        return HAL_ERROR;
    }
    return HAL_OK;
}

uint8_t OWN_QSPI_ReadStatus(uint8_t* statusReg){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b092      	sub	sp, #72	@ 0x48
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef sCommand;
    uint8_t test_buffer = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.Instruction = 0x05;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	613b      	str	r3, [r7, #16]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001f7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DummyCycles = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.NbData = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_QSPI_Command(&hqspi1, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480e      	ldr	r0, [pc, #56]	@ (8001fd8 <OWN_QSPI_ReadStatus+0x7c>)
 8001fa0:	f001 ff94 	bl	8003ecc <HAL_QSPI_Command>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <OWN_QSPI_ReadStatus+0x52>
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e010      	b.n	8001fd0 <OWN_QSPI_ReadStatus+0x74>
    }
    if (HAL_QSPI_Receive(&hqspi1, &test_buffer,HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001fae:	f107 030f 	add.w	r3, r7, #15
 8001fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4807      	ldr	r0, [pc, #28]	@ (8001fd8 <OWN_QSPI_ReadStatus+0x7c>)
 8001fba:	f002 f877 	bl	80040ac <HAL_QSPI_Receive>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <OWN_QSPI_ReadStatus+0x6c>
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e003      	b.n	8001fd0 <OWN_QSPI_ReadStatus+0x74>
    }

    *statusReg = test_buffer;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3748      	adds	r7, #72	@ 0x48
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	240000d0 	.word	0x240000d0

08001fdc <Servo_Init>:
 *      Author: Huni
 */

#include "servotest.h"

void Servo_Init(TIM_HandleTypeDef *htim) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f005 fa0a 	bl	8007400 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001fec:	2104      	movs	r1, #4
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f005 fa06 	bl	8007400 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001ff4:	2108      	movs	r1, #8
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f005 fa02 	bl	8007400 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001ffc:	210c      	movs	r1, #12
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f005 f9fe 	bl	8007400 <HAL_TIM_PWM_Start>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <Servo_TestFixedPositions>:

void Servo_TestFixedPositions(TIM_HandleTypeDef *htim) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 500);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800201c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 1500);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002026:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 2000);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002030:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 2500);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_MspInit+0x30>)
 8002050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002054:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_MspInit+0x30>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_MspInit+0x30>)
 8002060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58024400 	.word	0x58024400

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <NMI_Handler+0x4>

08002084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <MemManage_Handler+0x4>

08002094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d2:	f000 faf7 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <TIM3_IRQHandler+0x10>)
 80020e2:	f005 fa9b 	bl	800761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24000120 	.word	0x24000120

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f008 fafa 	bl	800a718 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24080000 	.word	0x24080000
 8002150:	00000400 	.word	0x00000400
 8002154:	2400011c 	.word	0x2400011c
 8002158:	24000350 	.word	0x24000350

0800215c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	@ 0x38
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217c:	463b      	mov	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	615a      	str	r2, [r3, #20]
 800218c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002190:	4a3d      	ldr	r2, [pc, #244]	@ (8002288 <MX_TIM3_Init+0x12c>)
 8002192:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002196:	22ef      	movs	r2, #239	@ 0xef
 8002198:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b3a      	ldr	r3, [pc, #232]	@ (8002284 <MX_TIM3_Init+0x128>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80021a0:	4b38      	ldr	r3, [pc, #224]	@ (8002284 <MX_TIM3_Init+0x128>)
 80021a2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80021a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <MX_TIM3_Init+0x128>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ae:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <MX_TIM3_Init+0x128>)
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b4:	4833      	ldr	r0, [pc, #204]	@ (8002284 <MX_TIM3_Init+0x128>)
 80021b6:	f005 f86b 	bl	8007290 <HAL_TIM_Base_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80021c0:	f7ff f95e 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ce:	4619      	mov	r1, r3
 80021d0:	482c      	ldr	r0, [pc, #176]	@ (8002284 <MX_TIM3_Init+0x128>)
 80021d2:	f005 fc3f 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80021dc:	f7ff f950 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021e0:	4828      	ldr	r0, [pc, #160]	@ (8002284 <MX_TIM3_Init+0x128>)
 80021e2:	f005 f8ac 	bl	800733e <HAL_TIM_PWM_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80021ec:	f7ff f948 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	4821      	ldr	r0, [pc, #132]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002200:	f006 f992 	bl	8008528 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800220a:	f7ff f939 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220e:	2360      	movs	r3, #96	@ 0x60
 8002210:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221e:	463b      	mov	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	4817      	ldr	r0, [pc, #92]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002226:	f005 fb01 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002230:	f7ff f926 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	2204      	movs	r2, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4812      	ldr	r0, [pc, #72]	@ (8002284 <MX_TIM3_Init+0x128>)
 800223c:	f005 faf6 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002246:	f7ff f91b 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800224a:	463b      	mov	r3, r7
 800224c:	2208      	movs	r2, #8
 800224e:	4619      	mov	r1, r3
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002252:	f005 faeb 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800225c:	f7ff f910 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002260:	463b      	mov	r3, r7
 8002262:	220c      	movs	r2, #12
 8002264:	4619      	mov	r1, r3
 8002266:	4807      	ldr	r0, [pc, #28]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002268:	f005 fae0 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002272:	f7ff f905 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002276:	4803      	ldr	r0, [pc, #12]	@ (8002284 <MX_TIM3_Init+0x128>)
 8002278:	f000 f830 	bl	80022dc <HAL_TIM_MspPostInit>

}
 800227c:	bf00      	nop
 800227e:	3738      	adds	r7, #56	@ 0x38
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24000120 	.word	0x24000120
 8002288:	40000400 	.word	0x40000400

0800228c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <HAL_TIM_Base_MspInit+0x48>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d116      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_TIM_Base_MspInit+0x4c>)
 80022a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022a4:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <HAL_TIM_Base_MspInit+0x4c>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_TIM_Base_MspInit+0x4c>)
 80022b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	201d      	movs	r0, #29
 80022c2:	f000 fb2a 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022c6:	201d      	movs	r0, #29
 80022c8:	f000 fb41 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40000400 	.word	0x40000400
 80022d8:	58024400 	.word	0x58024400

080022dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <HAL_TIM_MspPostInit+0x6c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d11f      	bne.n	800233e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_TIM_MspPostInit+0x70>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002304:	4a11      	ldr	r2, [pc, #68]	@ (800234c <HAL_TIM_MspPostInit+0x70>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_TIM_MspPostInit+0x70>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_V_Pin|SERVO_X_Pin|SERVO_Y_Pin|SERVO_Z_Pin;
 800231c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800232e:	2302      	movs	r3, #2
 8002330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	@ (8002350 <HAL_TIM_MspPostInit+0x74>)
 800233a:	f000 fb9b 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40000400 	.word	0x40000400
 800234c:	58024400 	.word	0x58024400
 8002350:	58020800 	.word	0x58020800

08002354 <UART_Test_Init>:

extern UART_HandleTypeDef huart5;

static uint8_t rxData;

void UART_Test_Init(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, &rxData, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	4903      	ldr	r1, [pc, #12]	@ (8002368 <UART_Test_Init+0x14>)
 800235c:	4803      	ldr	r0, [pc, #12]	@ (800236c <UART_Test_Init+0x18>)
 800235e:	f006 fa6d 	bl	800883c <HAL_UART_Receive_IT>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2400016c 	.word	0x2400016c
 800236c:	24000170 	.word	0x24000170

08002370 <UART_Send_String>:

void UART_Send_String(const char *str) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7fd ffb1 	bl	80002e0 <strlen>
 800237e:	4603      	mov	r3, r0
 8002380:	b29a      	uxth	r2, r3
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4803      	ldr	r0, [pc, #12]	@ (8002398 <UART_Send_String+0x28>)
 800238a:	f006 f9c9 	bl	8008720 <HAL_UART_Transmit>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	24000170 	.word	0x24000170

0800239c <UART_Send_Data>:

void UART_Send_Data(const char *format, ...) {
 800239c:	b40f      	push	{r0, r1, r2, r3}
 800239e:	b580      	push	{r7, lr}
 80023a0:	b09a      	sub	sp, #104	@ 0x68
 80023a2:	af00      	add	r7, sp, #0
    char buffer[100];
    va_list args;
    va_start(args, format);
 80023a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023a8:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80023aa:	1d38      	adds	r0, r7, #4
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80023b0:	2164      	movs	r1, #100	@ 0x64
 80023b2:	f008 f99b 	bl	800a6ec <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart5, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fd ff91 	bl	80002e0 <strlen>
 80023be:	4603      	mov	r3, r0
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	1d39      	adds	r1, r7, #4
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	4804      	ldr	r0, [pc, #16]	@ (80023dc <UART_Send_Data+0x40>)
 80023ca:	f006 f9a9 	bl	8008720 <HAL_UART_Transmit>
}
 80023ce:	bf00      	nop
 80023d0:	3768      	adds	r7, #104	@ 0x68
 80023d2:	46bd      	mov	sp, r7
 80023d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d8:	b004      	add	sp, #16
 80023da:	4770      	bx	lr
 80023dc:	24000170 	.word	0x24000170

080023e0 <HAL_UART_RxCpltCallback>:
        accel[0], accel[1], accel[2],
        mag[0], mag[1], mag[2]);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <HAL_UART_RxCpltCallback+0x34>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10b      	bne.n	800240a <HAL_UART_RxCpltCallback+0x2a>
        HAL_UART_Transmit(&huart5, &rxData, 1, HAL_MAX_DELAY);
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	2201      	movs	r2, #1
 80023f8:	4907      	ldr	r1, [pc, #28]	@ (8002418 <HAL_UART_RxCpltCallback+0x38>)
 80023fa:	4808      	ldr	r0, [pc, #32]	@ (800241c <HAL_UART_RxCpltCallback+0x3c>)
 80023fc:	f006 f990 	bl	8008720 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart5, &rxData, 1);
 8002400:	2201      	movs	r2, #1
 8002402:	4905      	ldr	r1, [pc, #20]	@ (8002418 <HAL_UART_RxCpltCallback+0x38>)
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <HAL_UART_RxCpltCallback+0x3c>)
 8002406:	f006 fa19 	bl	800883c <HAL_UART_Receive_IT>
    }
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40005000 	.word	0x40005000
 8002418:	2400016c 	.word	0x2400016c
 800241c:	24000170 	.word	0x24000170

08002420 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002426:	4a23      	ldr	r2, [pc, #140]	@ (80024b4 <MX_UART5_Init+0x94>)
 8002428:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800242a:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <MX_UART5_Init+0x90>)
 800242c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002430:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <MX_UART5_Init+0x90>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <MX_UART5_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <MX_UART5_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002462:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <MX_UART5_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002468:	4811      	ldr	r0, [pc, #68]	@ (80024b0 <MX_UART5_Init+0x90>)
 800246a:	f006 f909 	bl	8008680 <HAL_UART_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002474:	f7ff f804 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	480d      	ldr	r0, [pc, #52]	@ (80024b0 <MX_UART5_Init+0x90>)
 800247c:	f008 f83f 	bl	800a4fe <HAL_UARTEx_SetTxFifoThreshold>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002486:	f7fe fffb 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248a:	2100      	movs	r1, #0
 800248c:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <MX_UART5_Init+0x90>)
 800248e:	f008 f874 	bl	800a57a <HAL_UARTEx_SetRxFifoThreshold>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002498:	f7fe fff2 	bl	8001480 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <MX_UART5_Init+0x90>)
 800249e:	f007 fff5 	bl	800a48c <HAL_UARTEx_DisableFifoMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80024a8:	f7fe ffea 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	24000170 	.word	0x24000170
 80024b4:	40005000 	.word	0x40005000

080024b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0ba      	sub	sp, #232	@ 0xe8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	22c0      	movs	r2, #192	@ 0xc0
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f008 f915 	bl	800a708 <memset>
  if(uartHandle->Instance==UART5)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <HAL_UART_MspInit+0xc8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d146      	bne.n	8002576 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024e8:	f04f 0202 	mov.w	r2, #2
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f89a 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800250a:	f7fe ffb9 	bl	8001480 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800250e:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <HAL_UART_MspInit+0xcc>)
 8002510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <HAL_UART_MspInit+0xcc>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800251a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_UART_MspInit+0xcc>)
 8002520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_UART_MspInit+0xcc>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002532:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <HAL_UART_MspInit+0xcc>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_UART_MspInit+0xcc>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800254a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800254e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002564:	230e      	movs	r3, #14
 8002566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_UART_MspInit+0xd0>)
 8002572:	f000 fa7f 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002576:	bf00      	nop
 8002578:	37e8      	adds	r7, #232	@ 0xe8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40005000 	.word	0x40005000
 8002584:	58024400 	.word	0x58024400
 8002588:	58020400 	.word	0x58020400

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002590:	f7fe f876 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002594:	480c      	ldr	r0, [pc, #48]	@ (80025c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002596:	490d      	ldr	r1, [pc, #52]	@ (80025cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025ac:	4c0a      	ldr	r4, [pc, #40]	@ (80025d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ba:	f008 f8b3 	bl	800a724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7fe fd17 	bl	8000ff0 <main>
  bx  lr
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025cc:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80025d0:	0800b478 	.word	0x0800b478
  ldr r2, =_sbss
 80025d4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80025d8:	24000350 	.word	0x24000350

080025dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC3_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e6:	2003      	movs	r0, #3
 80025e8:	f000 f98c 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025ec:	f002 fe4e 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_Init+0x68>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4913      	ldr	r1, [pc, #76]	@ (800264c <HAL_Init+0x6c>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <HAL_Init+0x68>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <HAL_Init+0x6c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a0b      	ldr	r2, [pc, #44]	@ (8002650 <HAL_Init+0x70>)
 8002622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002624:	4a0b      	ldr	r2, [pc, #44]	@ (8002654 <HAL_Init+0x74>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800262a:	200f      	movs	r0, #15
 800262c:	f000 f814 	bl	8002658 <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e002      	b.n	8002640 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800263a:	f7ff fd05 	bl	8002048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58024400 	.word	0x58024400
 800264c:	0800b3fc 	.word	0x0800b3fc
 8002650:	24000004 	.word	0x24000004
 8002654:	24000000 	.word	0x24000000

08002658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_InitTick+0x60>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e021      	b.n	80026b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800266c:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <HAL_InitTick+0x64>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_InitTick+0x60>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f971 	bl	800296a <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f000 f93b 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	@ (80026c0 <HAL_InitTick+0x68>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2400000c 	.word	0x2400000c
 80026bc:	24000000 	.word	0x24000000
 80026c0:	24000008 	.word	0x24000008

080026c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_IncTick+0x20>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x24>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_IncTick+0x24>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2400000c 	.word	0x2400000c
 80026e8:	24000204 	.word	0x24000204

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	24000204 	.word	0x24000204

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffde 	bl	80026ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2400000c 	.word	0x2400000c

0800274c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_GetREVID+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0c1b      	lsrs	r3, r3, #16
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	5c001000 	.word	0x5c001000

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00
 80027a8:	05fa0000 	.word	0x05fa0000

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	@ (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff40 	bl	80027ac <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff90 	bl	8002858 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5f 	bl	8002804 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff33 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa4 	bl	80028c0 <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002988:	f3bf 8f5f 	dmb	sy
}
 800298c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800298e:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <HAL_MPU_Disable+0x28>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <HAL_MPU_Disable+0x28>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002998:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_MPU_Disable+0x2c>)
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000ed00 	.word	0xe000ed00
 80029b0:	e000ed90 	.word	0xe000ed90

080029b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_MPU_Enable+0x38>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_MPU_Enable+0x3c>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <HAL_MPU_Enable+0x3c>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029d2:	f3bf 8f4f 	dsb	sy
}
 80029d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029d8:	f3bf 8f6f 	isb	sy
}
 80029dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed90 	.word	0xe000ed90
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	785a      	ldrb	r2, [r3, #1]
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_MPU_ConfigRegion+0x7c>)
 8002a02:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002a04:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_MPU_ConfigRegion+0x7c>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_MPU_ConfigRegion+0x7c>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002a10:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <HAL_MPU_ConfigRegion+0x7c>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7b1b      	ldrb	r3, [r3, #12]
 8002a1c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7adb      	ldrb	r3, [r3, #11]
 8002a22:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7a9b      	ldrb	r3, [r3, #10]
 8002a2a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7b5b      	ldrb	r3, [r3, #13]
 8002a32:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7b9b      	ldrb	r3, [r3, #14]
 8002a3a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7bdb      	ldrb	r3, [r3, #15]
 8002a42:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7a5b      	ldrb	r3, [r3, #9]
 8002a4a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7a1b      	ldrb	r3, [r3, #8]
 8002a52:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a54:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a5c:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a5e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a60:	6113      	str	r3, [r2, #16]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed90 	.word	0xe000ed90

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a82:	4b89      	ldr	r3, [pc, #548]	@ (8002ca8 <HAL_GPIO_Init+0x234>)
 8002a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a86:	e194      	b.n	8002db2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8186 	beq.w	8002dac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d005      	beq.n	8002ab8 <HAL_GPIO_Init+0x44>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d130      	bne.n	8002b1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aee:	2201      	movs	r2, #1
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0201 	and.w	r2, r3, #1
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d017      	beq.n	8002b56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d123      	bne.n	8002baa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80e0 	beq.w	8002dac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bec:	4b2f      	ldr	r3, [pc, #188]	@ (8002cac <HAL_GPIO_Init+0x238>)
 8002bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8002cac <HAL_GPIO_Init+0x238>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <HAL_GPIO_Init+0x238>)
 8002bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0a:	4a29      	ldr	r2, [pc, #164]	@ (8002cb0 <HAL_GPIO_Init+0x23c>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <HAL_GPIO_Init+0x240>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d052      	beq.n	8002cdc <HAL_GPIO_Init+0x268>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb8 <HAL_GPIO_Init+0x244>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_GPIO_Init+0x22e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	@ (8002cbc <HAL_GPIO_Init+0x248>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <HAL_GPIO_Init+0x22a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <HAL_GPIO_Init+0x24c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc4 <HAL_GPIO_Init+0x250>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x222>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <HAL_GPIO_Init+0x254>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x21e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <HAL_GPIO_Init+0x258>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x21a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a19      	ldr	r2, [pc, #100]	@ (8002cd0 <HAL_GPIO_Init+0x25c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x216>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <HAL_GPIO_Init+0x260>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x212>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_GPIO_Init+0x264>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c7e:	2309      	movs	r3, #9
 8002c80:	e02d      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c82:	230a      	movs	r3, #10
 8002c84:	e02b      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c86:	2308      	movs	r3, #8
 8002c88:	e029      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e027      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e025      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e023      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e021      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e01f      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e01d      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e01b      	b.n	8002cde <HAL_GPIO_Init+0x26a>
 8002ca6:	bf00      	nop
 8002ca8:	58000080 	.word	0x58000080
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	58000400 	.word	0x58000400
 8002cb4:	58020000 	.word	0x58020000
 8002cb8:	58020400 	.word	0x58020400
 8002cbc:	58020800 	.word	0x58020800
 8002cc0:	58020c00 	.word	0x58020c00
 8002cc4:	58021000 	.word	0x58021000
 8002cc8:	58021400 	.word	0x58021400
 8002ccc:	58021800 	.word	0x58021800
 8002cd0:	58021c00 	.word	0x58021c00
 8002cd4:	58022000 	.word	0x58022000
 8002cd8:	58022400 	.word	0x58022400
 8002cdc:	2300      	movs	r3, #0
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f002 0203 	and.w	r2, r2, #3
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cee:	4938      	ldr	r1, [pc, #224]	@ (8002dd0 <HAL_GPIO_Init+0x35c>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f ae63 	bne.w	8002a88 <HAL_GPIO_Init+0x14>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	3724      	adds	r7, #36	@ 0x24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	58000400 	.word	0x58000400

08002dd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002de2:	4b75      	ldr	r3, [pc, #468]	@ (8002fb8 <HAL_GPIO_DeInit+0x1e4>)
 8002de4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002de6:	e0d9      	b.n	8002f9c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002de8:	2201      	movs	r2, #1
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80cc 	beq.w	8002f96 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8002fbc <HAL_GPIO_DeInit+0x1e8>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a67      	ldr	r2, [pc, #412]	@ (8002fc0 <HAL_GPIO_DeInit+0x1ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d037      	beq.n	8002e98 <HAL_GPIO_DeInit+0xc4>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a66      	ldr	r2, [pc, #408]	@ (8002fc4 <HAL_GPIO_DeInit+0x1f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d031      	beq.n	8002e94 <HAL_GPIO_DeInit+0xc0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a65      	ldr	r2, [pc, #404]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02b      	beq.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	@ (8002fcc <HAL_GPIO_DeInit+0x1f8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d025      	beq.n	8002e8c <HAL_GPIO_DeInit+0xb8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a63      	ldr	r2, [pc, #396]	@ (8002fd0 <HAL_GPIO_DeInit+0x1fc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d01f      	beq.n	8002e88 <HAL_GPIO_DeInit+0xb4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a62      	ldr	r2, [pc, #392]	@ (8002fd4 <HAL_GPIO_DeInit+0x200>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d019      	beq.n	8002e84 <HAL_GPIO_DeInit+0xb0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a61      	ldr	r2, [pc, #388]	@ (8002fd8 <HAL_GPIO_DeInit+0x204>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_GPIO_DeInit+0xac>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a60      	ldr	r2, [pc, #384]	@ (8002fdc <HAL_GPIO_DeInit+0x208>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00d      	beq.n	8002e7c <HAL_GPIO_DeInit+0xa8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe0 <HAL_GPIO_DeInit+0x20c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <HAL_GPIO_DeInit+0xa4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe4 <HAL_GPIO_DeInit+0x210>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_GPIO_DeInit+0xa0>
 8002e70:	2309      	movs	r3, #9
 8002e72:	e012      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e74:	230a      	movs	r3, #10
 8002e76:	e010      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	e00e      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	e00c      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e80:	2306      	movs	r3, #6
 8002e82:	e00a      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e84:	2305      	movs	r3, #5
 8002e86:	e008      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e006      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e004      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e002      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_GPIO_DeInit+0xc6>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	f002 0203 	and.w	r2, r2, #3
 8002ea0:	0092      	lsls	r2, r2, #2
 8002ea2:	4093      	lsls	r3, r2
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d136      	bne.n	8002f18 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002efa:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <HAL_GPIO_DeInit+0x1e8>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	482c      	ldr	r0, [pc, #176]	@ (8002fbc <HAL_GPIO_DeInit+0x1e8>)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	400a      	ands	r2, r1
 8002f12:	3302      	adds	r3, #2
 8002f14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2103      	movs	r1, #3
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	08d2      	lsrs	r2, r2, #3
 8002f4c:	4019      	ands	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2103      	movs	r1, #3
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	2101      	movs	r1, #1
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2103      	movs	r1, #3
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	401a      	ands	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af1f 	bne.w	8002de8 <HAL_GPIO_DeInit+0x14>
  }
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	58000080 	.word	0x58000080
 8002fbc:	58000400 	.word	0x58000400
 8002fc0:	58020000 	.word	0x58020000
 8002fc4:	58020400 	.word	0x58020400
 8002fc8:	58020800 	.word	0x58020800
 8002fcc:	58020c00 	.word	0x58020c00
 8002fd0:	58021000 	.word	0x58021000
 8002fd4:	58021400 	.word	0x58021400
 8002fd8:	58021800 	.word	0x58021800
 8002fdc:	58021c00 	.word	0x58021c00
 8002fe0:	58022000 	.word	0x58022000
 8002fe4:	58022400 	.word	0x58022400

08002fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e001      	b.n	800300a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003034:	e003      	b.n	800303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003054:	4a08      	ldr	r2, [pc, #32]	@ (8003078 <HAL_HSEM_FastTake+0x2c>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3320      	adds	r3, #32
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	4a07      	ldr	r2, [pc, #28]	@ (800307c <HAL_HSEM_FastTake+0x30>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	58026400 	.word	0x58026400
 800307c:	80000300 	.word	0x80000300

08003080 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800308a:	4906      	ldr	r1, [pc, #24]	@ (80030a4 <HAL_HSEM_Release+0x24>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	58026400 	.word	0x58026400

080030a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e08b      	b.n	80031d2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fcc6 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	@ 0x24
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003108:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	e006      	b.n	8003130 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800312e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d108      	bne.n	800314a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	e007      	b.n	800315a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <HAL_I2C_Init+0x134>)
 8003166:	430b      	orrs	r3, r1
 8003168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	02008000 	.word	0x02008000

080031e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 80f9 	bne.w	80033fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_I2C_Mem_Write+0x34>
 800320e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0ed      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_I2C_Mem_Write+0x4e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0e6      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003236:	f7ff fa59 	bl	80026ec <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2319      	movs	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fac3 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d1      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2221      	movs	r2, #33	@ 0x21
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003280:	88f8      	ldrh	r0, [r7, #6]
 8003282:	893a      	ldrh	r2, [r7, #8]
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4603      	mov	r3, r0
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f9d3 	bl	800363c <I2C_RequestMemoryWrite>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0a9      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2bff      	cmp	r3, #255	@ 0xff
 80032b0:	d90e      	bls.n	80032d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	22ff      	movs	r2, #255	@ 0xff
 80032b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fc47 	bl	8003b5c <I2C_TransferConfig>
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fc36 	bl	8003b5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fac6 	bl	8003886 <I2C_WaitOnTXISFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e07b      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d034      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x1c8>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d130      	bne.n	80033a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	@ 0x80
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa3f 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e04d      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2bff      	cmp	r3, #255	@ 0xff
 8003368:	d90e      	bls.n	8003388 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	@ 0xff
 800336e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	8979      	ldrh	r1, [r7, #10]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fbeb 	bl	8003b5c <I2C_TransferConfig>
 8003386:	e00f      	b.n	80033a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003396:	b2da      	uxtb	r2, r3
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fbda 	bl	8003b5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d19e      	bne.n	80032f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 faac 	bl	8003914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e01a      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2220      	movs	r2, #32
 80033cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <HAL_I2C_Mem_Write+0x224>)
 80033da:	400b      	ands	r3, r1
 80033dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	fe00e800 	.word	0xfe00e800

08003408 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	f040 80fd 	bne.w	800362a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_I2C_Mem_Read+0x34>
 8003436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0f1      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Mem_Read+0x4e>
 8003452:	2302      	movs	r3, #2
 8003454:	e0ea      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800345e:	f7ff f945 	bl	80026ec <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f9af 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d5      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2222      	movs	r2, #34	@ 0x22
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a8:	88f8      	ldrh	r0, [r7, #6]
 80034aa:	893a      	ldrh	r2, [r7, #8]
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4603      	mov	r3, r0
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f913 	bl	80036e4 <I2C_RequestMemoryRead>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ad      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2bff      	cmp	r3, #255	@ 0xff
 80034d8:	d90e      	bls.n	80034f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	22ff      	movs	r2, #255	@ 0xff
 80034de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	4b52      	ldr	r3, [pc, #328]	@ (8003634 <HAL_I2C_Mem_Read+0x22c>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fb33 	bl	8003b5c <I2C_TransferConfig>
 80034f6:	e00f      	b.n	8003518 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	b2da      	uxtb	r2, r3
 8003508:	8979      	ldrh	r1, [r7, #10]
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <HAL_I2C_Mem_Read+0x22c>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fb22 	bl	8003b5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	2200      	movs	r2, #0
 8003520:	2104      	movs	r1, #4
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f956 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07c      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d034      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d130      	bne.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	@ 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f927 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04d      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2bff      	cmp	r3, #255	@ 0xff
 8003598:	d90e      	bls.n	80035b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	@ 0xff
 800359e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	8979      	ldrh	r1, [r7, #10]
 80035a8:	2300      	movs	r3, #0
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fad3 	bl	8003b5c <I2C_TransferConfig>
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fac2 	bl	8003b5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d19a      	bne.n	8003518 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f994 	bl	8003914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01a      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2220      	movs	r2, #32
 80035fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_I2C_Mem_Read+0x230>)
 800360a:	400b      	ands	r3, r1
 800360c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	80002400 	.word	0x80002400
 8003638:	fe00e800 	.word	0xfe00e800

0800363c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <I2C_RequestMemoryWrite+0xa4>)
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fa79 	bl	8003b5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f909 	bl	8003886 <I2C_WaitOnTXISFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e02c      	b.n	80036d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	629a      	str	r2, [r3, #40]	@ 0x28
 800368e:	e015      	b.n	80036bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8ef 	bl	8003886 <I2C_WaitOnTXISFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e012      	b.n	80036d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b2:	893b      	ldrh	r3, [r7, #8]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2180      	movs	r1, #128	@ 0x80
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f884 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	80002000 	.word	0x80002000

080036e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <I2C_RequestMemoryRead+0xa4>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fa26 	bl	8003b5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f8b6 	bl	8003886 <I2C_WaitOnTXISFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e02c      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28
 8003734:	e015      	b.n	8003762 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	b29b      	uxth	r3, r3
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f89c 	bl	8003886 <I2C_WaitOnTXISFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e012      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003758:	893b      	ldrh	r3, [r7, #8]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f831 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	80002000 	.word	0x80002000

0800378c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d103      	bne.n	80037aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d007      	beq.n	80037c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	619a      	str	r2, [r3, #24]
  }
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e4:	e03b      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	6839      	ldr	r1, [r7, #0]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f8d6 	bl	800399c <I2C_IsErrorOccurred>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e041      	b.n	800387e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d02d      	beq.n	800385e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe ff73 	bl	80026ec <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d122      	bne.n	800385e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	d113      	bne.n	800385e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e00f      	b.n	800387e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d0b4      	beq.n	80037e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003892:	e033      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f87f 	bl	800399c <I2C_IsErrorOccurred>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e031      	b.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d025      	beq.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b0:	f7fe ff1c 	bl	80026ec <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11a      	bne.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d013      	beq.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d1c4      	bne.n	8003894 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003920:	e02f      	b.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f838 	bl	800399c <I2C_IsErrorOccurred>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e02d      	b.n	8003992 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fed9 	bl	80026ec <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11a      	bne.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d013      	beq.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e007      	b.n	8003992 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b20      	cmp	r3, #32
 800398e:	d1c8      	bne.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d068      	beq.n	8003a9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2210      	movs	r2, #16
 80039ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039d0:	e049      	b.n	8003a66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d045      	beq.n	8003a66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fe fe87 	bl	80026ec <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <I2C_IsErrorOccurred+0x54>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d13a      	bne.n	8003a66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a12:	d121      	bne.n	8003a58 <I2C_IsErrorOccurred+0xbc>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a1a:	d01d      	beq.n	8003a58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d01a      	beq.n	8003a58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a32:	f7fe fe5b 	bl	80026ec <HAL_GetTick>
 8003a36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a38:	e00e      	b.n	8003a58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a3a:	f7fe fe57 	bl	80026ec <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b19      	cmp	r3, #25
 8003a46:	d907      	bls.n	8003a58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f043 0320 	orr.w	r3, r3, #32
 8003a4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a56:	e006      	b.n	8003a66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d1e9      	bne.n	8003a3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d003      	beq.n	8003a7c <I2C_IsErrorOccurred+0xe0>
 8003a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0aa      	beq.n	80039d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003abc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ade:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01c      	beq.n	8003b4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff fe3b 	bl	800378c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <I2C_IsErrorOccurred+0x1bc>)
 8003b22:	400b      	ands	r3, r1
 8003b24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3728      	adds	r7, #40	@ 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	fe00e800 	.word	0xfe00e800

08003b5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b74:	7a7b      	ldrb	r3, [r7, #9]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	0d5b      	lsrs	r3, r3, #21
 8003b96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b9a:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <I2C_TransferConfig+0x60>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	ea02 0103 	and.w	r1, r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	03ff63ff 	.word	0x03ff63ff

08003bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d138      	bne.n	8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e032      	b.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	@ 0x24
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d139      	bne.n	8003ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e033      	b.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	@ 0x24
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003cf8:	4b29      	ldr	r3, [pc, #164]	@ (8003da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d00a      	beq.n	8003d1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d04:	4b26      	ldr	r3, [pc, #152]	@ (8003da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e040      	b.n	8003d98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e03e      	b.n	8003d98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d1a:	4b21      	ldr	r3, [pc, #132]	@ (8003da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003d22:	491f      	ldr	r1, [pc, #124]	@ (8003da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d2a:	f7fe fcdf 	bl	80026ec <HAL_GetTick>
 8003d2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d30:	e009      	b.n	8003d46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d32:	f7fe fcdb 	bl	80026ec <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d40:	d901      	bls.n	8003d46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e028      	b.n	8003d98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d46:	4b16      	ldr	r3, [pc, #88]	@ (8003da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d52:	d1ee      	bne.n	8003d32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b1e      	cmp	r3, #30
 8003d58:	d008      	beq.n	8003d6c <HAL_PWREx_ConfigSupply+0x7c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d5e:	d005      	beq.n	8003d6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b1d      	cmp	r3, #29
 8003d64:	d002      	beq.n	8003d6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b2d      	cmp	r3, #45	@ 0x2d
 8003d6a:	d114      	bne.n	8003d96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d6c:	f7fe fcbe 	bl	80026ec <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d72:	e009      	b.n	8003d88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d74:	f7fe fcba 	bl	80026ec <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d82:	d901      	bls.n	8003d88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e007      	b.n	8003d98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d94:	d1ee      	bne.n	8003d74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	58024800 	.word	0x58024800

08003da4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7fe fc9e 	bl	80026ec <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e05f      	b.n	8003e7c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fd fb8b 	bl	80014e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003dce:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa7e 	bl	80042d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2120      	movs	r1, #32
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa76 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e08:	7afb      	ldrb	r3, [r7, #11]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d135      	bne.n	8003e7a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_QSPI_Init+0xe0>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6852      	ldr	r2, [r2, #4]
 8003e1c:	0611      	lsls	r1, r2, #24
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	4311      	orrs	r1, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	69d2      	ldr	r2, [r2, #28]
 8003e28:	4311      	orrs	r1, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6a12      	ldr	r2, [r2, #32]
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <HAL_QSPI_Init+0xe4>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6912      	ldr	r2, [r2, #16]
 8003e46:	0411      	lsls	r1, r2, #16
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6952      	ldr	r2, [r2, #20]
 8003e4c:	4311      	orrs	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6992      	ldr	r2, [r2, #24]
 8003e52:	4311      	orrs	r1, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	00ffff2f 	.word	0x00ffff2f
 8003e88:	ffe0f8fe 	.word	0xffe0f8fe

08003e8c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e012      	b.n	8003ec4 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd fbbe 	bl	8001630 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ed8:	f7fe fc08 	bl	80026ec <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_QSPI_Command+0x22>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e048      	b.n	8003f80 <HAL_QSPI_Command+0xb4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d137      	bne.n	8003f72 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2120      	movs	r1, #32
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9e8 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d125      	bne.n	8003f76 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fa15 	bl	800435e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d115      	bne.n	8003f68 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2201      	movs	r2, #1
 8003f44:	2102      	movs	r1, #2
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f9d2 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f66:	e006      	b.n	8003f76 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f70:	e001      	b.n	8003f76 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	@ 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7fe fba8 	bl	80026ec <HAL_GetTick>
 8003f9c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3320      	adds	r3, #32
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_QSPI_Transmit+0x2e>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e076      	b.n	80040a4 <HAL_QSPI_Transmit+0x11c>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d165      	bne.n	8004096 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d056      	beq.n	8004084 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2212      	movs	r2, #18
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800400a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800400c:	e01b      	b.n	8004046 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2201      	movs	r2, #1
 8004016:	2104      	movs	r1, #4
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f969 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004022:	7ffb      	ldrb	r3, [r7, #31]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d113      	bne.n	8004050 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1df      	bne.n	800400e <HAL_QSPI_Transmit+0x86>
 800404e:	e000      	b.n	8004052 <HAL_QSPI_Transmit+0xca>
          break;
 8004050:	bf00      	nop
      }

      if (status == HAL_OK)
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d110      	bne.n	800407a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2201      	movs	r2, #1
 8004060:	2102      	movs	r1, #2
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f944 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800406c:	7ffb      	ldrb	r3, [r7, #31]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2202      	movs	r2, #2
 8004078:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004082:	e00a      	b.n	800409a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f043 0208 	orr.w	r2, r3, #8
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e001      	b.n	800409a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	@ 0x28
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80040bc:	f7fe fb16 	bl	80026ec <HAL_GetTick>
 80040c0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3320      	adds	r3, #32
 80040d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_QSPI_Receive+0x36>
 80040de:	2302      	movs	r3, #2
 80040e0:	e07d      	b.n	80041de <HAL_QSPI_Receive+0x132>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d16c      	bne.n	80041d0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d05d      	beq.n	80041be <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2222      	movs	r2, #34	@ 0x22
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800413a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004144:	e01c      	b.n	8004180 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2201      	movs	r2, #1
 800414e:	2106      	movs	r1, #6
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f8cd 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800415a:	7ffb      	ldrb	r3, [r7, #31]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d114      	bne.n	800418a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1de      	bne.n	8004146 <HAL_QSPI_Receive+0x9a>
 8004188:	e000      	b.n	800418c <HAL_QSPI_Receive+0xe0>
          break;
 800418a:	bf00      	nop
      }

      if (status == HAL_OK)
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d110      	bne.n	80041b4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2201      	movs	r2, #1
 800419a:	2102      	movs	r1, #2
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f8a7 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80041a6:	7ffb      	ldrb	r3, [r7, #31]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2202      	movs	r2, #2
 80041b2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041bc:	e00a      	b.n	80041d4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f043 0208 	orr.w	r2, r3, #8
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e001      	b.n	80041d4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
 80041d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b088      	sub	sp, #32
 80041ea:	af02      	add	r7, sp, #8
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f4:	f7fe fa7a 	bl	80026ec <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_QSPI_AutoPolling+0x24>
 8004206:	2302      	movs	r3, #2
 8004208:	e060      	b.n	80042cc <HAL_QSPI_AutoPolling+0xe6>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d14f      	bne.n	80042be <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2242      	movs	r2, #66	@ 0x42
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2200      	movs	r2, #0
 8004234:	2120      	movs	r1, #32
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f85a 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13d      	bne.n	80042c2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6852      	ldr	r2, [r2, #4]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6892      	ldr	r2, [r2, #8]
 8004262:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800427c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004286:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f866 	bl	800435e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2201      	movs	r2, #1
 800429a:	2108      	movs	r1, #8
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f827 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2208      	movs	r2, #8
 80042b2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042bc:	e001      	b.n	80042c2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004300:	e01a      	b.n	8004338 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d016      	beq.n	8004338 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fe f9ef 	bl	80026ec <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2204      	movs	r2, #4
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e00e      	b.n	8004356 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d1d6      	bne.n	8004302 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <QSPI_Config+0x28>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004378:	d005      	beq.n	8004386 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3a01      	subs	r2, #1
 8004384:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80b9 	beq.w	8004502 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05f      	beq.n	8004458 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	6892      	ldr	r2, [r2, #8]
 80043a0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d031      	beq.n	800440e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	049b      	lsls	r3, r3, #18
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	431a      	orrs	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	ea42 0103 	orr.w	r1, r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80043fe:	f000 812e 	beq.w	800465e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	6852      	ldr	r2, [r2, #4]
 800440a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800440c:	e127      	b.n	800465e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	431a      	orrs	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441c:	431a      	orrs	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	049b      	lsls	r3, r3, #18
 800442a:	431a      	orrs	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	431a      	orrs	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	431a      	orrs	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	ea42 0103 	orr.w	r1, r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	430a      	orrs	r2, r1
 8004454:	615a      	str	r2, [r3, #20]
}
 8004456:	e102      	b.n	800465e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02e      	beq.n	80044be <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	431a      	orrs	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446e:	431a      	orrs	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	431a      	orrs	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	049b      	lsls	r3, r3, #18
 800447c:	431a      	orrs	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	431a      	orrs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	431a      	orrs	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	431a      	orrs	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	431a      	orrs	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	ea42 0103 	orr.w	r1, r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80044ae:	f000 80d6 	beq.w	800465e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	6852      	ldr	r2, [r2, #4]
 80044ba:	619a      	str	r2, [r3, #24]
}
 80044bc:	e0cf      	b.n	800465e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	049b      	lsls	r3, r3, #18
 80044da:	431a      	orrs	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	ea42 0103 	orr.w	r1, r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	615a      	str	r2, [r3, #20]
}
 8004500:	e0ad      	b.n	800465e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d058      	beq.n	80045bc <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	6892      	ldr	r2, [r2, #8]
 8004512:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02d      	beq.n	8004578 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	431a      	orrs	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452a:	431a      	orrs	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	431a      	orrs	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	049b      	lsls	r3, r3, #18
 8004538:	431a      	orrs	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	431a      	orrs	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	431a      	orrs	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	431a      	orrs	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	431a      	orrs	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	ea42 0103 	orr.w	r1, r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	430a      	orrs	r2, r1
 8004562:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800456a:	d078      	beq.n	800465e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	6852      	ldr	r2, [r2, #4]
 8004574:	619a      	str	r2, [r3, #24]
}
 8004576:	e072      	b.n	800465e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	431a      	orrs	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004586:	431a      	orrs	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	431a      	orrs	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	049b      	lsls	r3, r3, #18
 8004594:	431a      	orrs	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	431a      	orrs	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]
}
 80045ba:	e050      	b.n	800465e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02a      	beq.n	800461a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	431a      	orrs	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	049b      	lsls	r3, r3, #18
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	430a      	orrs	r2, r1
 8004604:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800460c:	d027      	beq.n	800465e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	6852      	ldr	r2, [r2, #4]
 8004616:	619a      	str	r2, [r3, #24]
}
 8004618:	e021      	b.n	800465e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01d      	beq.n	800465e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	431a      	orrs	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004630:	431a      	orrs	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	431a      	orrs	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	049b      	lsls	r3, r3, #18
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	431a      	orrs	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	431a      	orrs	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	ea42 0103 	orr.w	r1, r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	430a      	orrs	r2, r1
 800465c:	615a      	str	r2, [r3, #20]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	@ 0x30
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f000 bc48 	b.w	8004f10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8088 	beq.w	800479e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468e:	4b99      	ldr	r3, [pc, #612]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004698:	4b96      	ldr	r3, [pc, #600]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d007      	beq.n	80046b4 <HAL_RCC_OscConfig+0x48>
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	2b18      	cmp	r3, #24
 80046a8:	d111      	bne.n	80046ce <HAL_RCC_OscConfig+0x62>
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4b8f      	ldr	r3, [pc, #572]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d06d      	beq.n	800479c <HAL_RCC_OscConfig+0x130>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d169      	bne.n	800479c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f000 bc21 	b.w	8004f10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x7a>
 80046d8:	4b86      	ldr	r3, [pc, #536]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a85      	ldr	r2, [pc, #532]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e02e      	b.n	8004744 <HAL_RCC_OscConfig+0xd8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x9c>
 80046ee:	4b81      	ldr	r3, [pc, #516]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a80      	ldr	r2, [pc, #512]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80046f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b7e      	ldr	r3, [pc, #504]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7d      	ldr	r2, [pc, #500]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xd8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0xc0>
 8004712:	4b78      	ldr	r3, [pc, #480]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a77      	ldr	r2, [pc, #476]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b75      	ldr	r3, [pc, #468]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a74      	ldr	r2, [pc, #464]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xd8>
 800472c:	4b71      	ldr	r3, [pc, #452]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a70      	ldr	r2, [pc, #448]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b6e      	ldr	r3, [pc, #440]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a6d      	ldr	r2, [pc, #436]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd ffce 	bl	80026ec <HAL_GetTick>
 8004750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd ffca 	bl	80026ec <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e3d4      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004766:	4b63      	ldr	r3, [pc, #396]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd ffba 	bl	80026ec <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fd ffb6 	bl	80026ec <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	@ 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e3c0      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800478e:	4b59      	ldr	r3, [pc, #356]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x110>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80ca 	beq.w	8004940 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ac:	4b51      	ldr	r3, [pc, #324]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047b6:	4b4f      	ldr	r3, [pc, #316]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_RCC_OscConfig+0x166>
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2b18      	cmp	r3, #24
 80047c6:	d156      	bne.n	8004876 <HAL_RCC_OscConfig+0x20a>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d151      	bne.n	8004876 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d2:	4b48      	ldr	r3, [pc, #288]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e392      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047ea:	4b42      	ldr	r3, [pc, #264]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0219 	bic.w	r2, r3, #25
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	493f      	ldr	r1, [pc, #252]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd ff76 	bl	80026ec <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004804:	f7fd ff72 	bl	80026ec <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e37c      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004816:	4b37      	ldr	r3, [pc, #220]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	f7fd ff93 	bl	800274c <HAL_GetREVID>
 8004826:	4603      	mov	r3, r0
 8004828:	f241 0203 	movw	r2, #4099	@ 0x1003
 800482c:	4293      	cmp	r3, r2
 800482e:	d817      	bhi.n	8004860 <HAL_RCC_OscConfig+0x1f4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b40      	cmp	r3, #64	@ 0x40
 8004836:	d108      	bne.n	800484a <HAL_RCC_OscConfig+0x1de>
 8004838:	4b2e      	ldr	r3, [pc, #184]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004840:	4a2c      	ldr	r2, [pc, #176]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004846:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004848:	e07a      	b.n	8004940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b2a      	ldr	r3, [pc, #168]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	031b      	lsls	r3, r3, #12
 8004858:	4926      	ldr	r1, [pc, #152]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485e:	e06f      	b.n	8004940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b24      	ldr	r3, [pc, #144]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	4921      	ldr	r1, [pc, #132]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004874:	e064      	b.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d047      	beq.n	800490e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800487e:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 0219 	bic.w	r2, r3, #25
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	491a      	ldr	r1, [pc, #104]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd ff2c 	bl	80026ec <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fd ff28 	bl	80026ec <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e332      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b6:	f7fd ff49 	bl	800274c <HAL_GetREVID>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d819      	bhi.n	80048f8 <HAL_RCC_OscConfig+0x28c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b40      	cmp	r3, #64	@ 0x40
 80048ca:	d108      	bne.n	80048de <HAL_RCC_OscConfig+0x272>
 80048cc:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048d4:	4a07      	ldr	r2, [pc, #28]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e030      	b.n	8004940 <HAL_RCC_OscConfig+0x2d4>
 80048de:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	4901      	ldr	r1, [pc, #4]	@ (80048f4 <HAL_RCC_OscConfig+0x288>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
 80048f2:	e025      	b.n	8004940 <HAL_RCC_OscConfig+0x2d4>
 80048f4:	58024400 	.word	0x58024400
 80048f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	4997      	ldr	r1, [pc, #604]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
 800490c:	e018      	b.n	8004940 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490e:	4b95      	ldr	r3, [pc, #596]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a94      	ldr	r2, [pc, #592]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd fee7 	bl	80026ec <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004922:	f7fd fee3 	bl	80026ec <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e2ed      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004934:	4b8b      	ldr	r3, [pc, #556]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a9 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494e:	4b85      	ldr	r3, [pc, #532]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004956:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004958:	4b82      	ldr	r3, [pc, #520]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d007      	beq.n	8004974 <HAL_RCC_OscConfig+0x308>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b18      	cmp	r3, #24
 8004968:	d13a      	bne.n	80049e0 <HAL_RCC_OscConfig+0x374>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d135      	bne.n	80049e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004974:	4b7b      	ldr	r3, [pc, #492]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_OscConfig+0x320>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b80      	cmp	r3, #128	@ 0x80
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e2c1      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800498c:	f7fd fede 	bl	800274c <HAL_GetREVID>
 8004990:	4603      	mov	r3, r0
 8004992:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004996:	4293      	cmp	r3, r2
 8004998:	d817      	bhi.n	80049ca <HAL_RCC_OscConfig+0x35e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d108      	bne.n	80049b4 <HAL_RCC_OscConfig+0x348>
 80049a2:	4b70      	ldr	r3, [pc, #448]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b2:	e075      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	069b      	lsls	r3, r3, #26
 80049c2:	4968      	ldr	r1, [pc, #416]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c8:	e06a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ca:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	4962      	ldr	r1, [pc, #392]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049de:	e05f      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d042      	beq.n	8004a6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fe7a 	bl	80026ec <HAL_GetTick>
 80049f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049fc:	f7fd fe76 	bl	80026ec <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e280      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a0e:	4b55      	ldr	r3, [pc, #340]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a1a:	f7fd fe97 	bl	800274c <HAL_GetREVID>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d817      	bhi.n	8004a58 <HAL_RCC_OscConfig+0x3ec>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d108      	bne.n	8004a42 <HAL_RCC_OscConfig+0x3d6>
 8004a30:	4b4c      	ldr	r3, [pc, #304]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a38:	4a4a      	ldr	r2, [pc, #296]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a3e:	6053      	str	r3, [r2, #4]
 8004a40:	e02e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
 8004a42:	4b48      	ldr	r3, [pc, #288]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	069b      	lsls	r3, r3, #26
 8004a50:	4944      	ldr	r1, [pc, #272]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
 8004a56:	e023      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
 8004a58:	4b42      	ldr	r3, [pc, #264]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	493f      	ldr	r1, [pc, #252]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60cb      	str	r3, [r1, #12]
 8004a6c:	e018      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a3c      	ldr	r2, [pc, #240]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fe37 	bl	80026ec <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a82:	f7fd fe33 	bl	80026ec <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e23d      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a94:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d036      	beq.n	8004b1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d019      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fe14 	bl	80026ec <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7fd fe10 	bl	80026ec <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e21a      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ada:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x45c>
 8004ae6:	e018      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aec:	4a1d      	ldr	r2, [pc, #116]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd fdfa 	bl	80026ec <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fd fdf6 	bl	80026ec <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e200      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b0e:	4b15      	ldr	r3, [pc, #84]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d039      	beq.n	8004b9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01c      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b3a:	f7fd fdd7 	bl	80026ec <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b42:	f7fd fdd3 	bl	80026ec <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e1dd      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_RCC_OscConfig+0x4f8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x4d6>
 8004b60:	e01b      	b.n	8004b9a <HAL_RCC_OscConfig+0x52e>
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b68:	4b9b      	ldr	r3, [pc, #620]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a9a      	ldr	r2, [pc, #616]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b74:	f7fd fdba 	bl	80026ec <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b7c:	f7fd fdb6 	bl	80026ec <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e1c0      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b8e:	4b92      	ldr	r3, [pc, #584]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8081 	beq.w	8004caa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8004ddc <HAL_RCC_OscConfig+0x770>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a8b      	ldr	r2, [pc, #556]	@ (8004ddc <HAL_RCC_OscConfig+0x770>)
 8004bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb4:	f7fd fd9a 	bl	80026ec <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd fd96 	bl	80026ec <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1a0      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bce:	4b83      	ldr	r3, [pc, #524]	@ (8004ddc <HAL_RCC_OscConfig+0x770>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d106      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x584>
 8004be2:	4b7d      	ldr	r3, [pc, #500]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a7c      	ldr	r2, [pc, #496]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bee:	e02d      	b.n	8004c4c <HAL_RCC_OscConfig+0x5e0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RCC_OscConfig+0x5a6>
 8004bf8:	4b77      	ldr	r3, [pc, #476]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfc:	4a76      	ldr	r2, [pc, #472]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c04:	4b74      	ldr	r3, [pc, #464]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c08:	4a73      	ldr	r2, [pc, #460]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	f023 0304 	bic.w	r3, r3, #4
 8004c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c10:	e01c      	b.n	8004c4c <HAL_RCC_OscConfig+0x5e0>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x5c8>
 8004c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1e:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c26:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c32:	e00b      	b.n	8004c4c <HAL_RCC_OscConfig+0x5e0>
 8004c34:	4b68      	ldr	r3, [pc, #416]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	4a67      	ldr	r2, [pc, #412]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c40:	4b65      	ldr	r3, [pc, #404]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	4a64      	ldr	r2, [pc, #400]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c46:	f023 0304 	bic.w	r3, r3, #4
 8004c4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fd fd4a 	bl	80026ec <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fd fd46 	bl	80026ec <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e14e      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c72:	4b59      	ldr	r3, [pc, #356]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ee      	beq.n	8004c5c <HAL_RCC_OscConfig+0x5f0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7fd fd34 	bl	80026ec <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c88:	f7fd fd30 	bl	80026ec <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e138      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1ee      	bne.n	8004c88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 812d 	beq.w	8004f0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cb4:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cbc:	2b18      	cmp	r3, #24
 8004cbe:	f000 80bd 	beq.w	8004e3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	f040 809e 	bne.w	8004e08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ccc:	4b42      	ldr	r3, [pc, #264]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a41      	ldr	r2, [pc, #260]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd fd08 	bl	80026ec <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd fd04 	bl	80026ec <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e10e      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cf2:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cfe:	4b36      	ldr	r3, [pc, #216]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d02:	4b37      	ldr	r3, [pc, #220]	@ (8004de0 <HAL_RCC_OscConfig+0x774>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	430a      	orrs	r2, r1
 8004d12:	4931      	ldr	r1, [pc, #196]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	3b01      	subs	r3, #1
 8004d28:	025b      	lsls	r3, r3, #9
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	3b01      	subs	r3, #1
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	3b01      	subs	r3, #1
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d48:	4923      	ldr	r1, [pc, #140]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d4e:	4b22      	ldr	r3, [pc, #136]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d5e:	4b21      	ldr	r3, [pc, #132]	@ (8004de4 <HAL_RCC_OscConfig+0x778>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d66:	00d2      	lsls	r2, r2, #3
 8004d68:	491b      	ldr	r1, [pc, #108]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	f023 020c 	bic.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	4917      	ldr	r1, [pc, #92]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	f023 0202 	bic.w	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8c:	4912      	ldr	r1, [pc, #72]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d92:	4b11      	ldr	r3, [pc, #68]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	4a10      	ldr	r2, [pc, #64]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004daa:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004db6:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a07      	ldr	r2, [pc, #28]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a04      	ldr	r2, [pc, #16]	@ (8004dd8 <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fd fc8d 	bl	80026ec <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dd4:	e011      	b.n	8004dfa <HAL_RCC_OscConfig+0x78e>
 8004dd6:	bf00      	nop
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	58024800 	.word	0x58024800
 8004de0:	fffffc0c 	.word	0xfffffc0c
 8004de4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fd fc80 	bl	80026ec <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e08a      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dfa:	4b47      	ldr	r3, [pc, #284]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x77c>
 8004e06:	e082      	b.n	8004f0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a42      	ldr	r2, [pc, #264]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fc6a 	bl	80026ec <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fd fc66 	bl	80026ec <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e070      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x7b0>
 8004e3a:	e068      	b.n	8004f0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e3c:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e42:	4b35      	ldr	r3, [pc, #212]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d031      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f003 0203 	and.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d12a      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d122      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d11a      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	0a5b      	lsrs	r3, r3, #9
 8004e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d111      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d108      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e02b      	b.n	8004f10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004eb8:	4b17      	ldr	r3, [pc, #92]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ec2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d01f      	beq.n	8004f0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ece:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a11      	ldr	r2, [pc, #68]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eda:	f7fd fc07 	bl	80026ec <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ee0:	bf00      	nop
 8004ee2:	f7fd fc03 	bl	80026ec <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d0f9      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eee:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <HAL_RCC_OscConfig+0x8b0>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004efa:	00d2      	lsls	r2, r2, #3
 8004efc:	4906      	ldr	r1, [pc, #24]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f02:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <HAL_RCC_OscConfig+0x8ac>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	@ 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	ffff0007 	.word	0xffff0007

08004f20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e19c      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b8a      	ldr	r3, [pc, #552]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d910      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b87      	ldr	r3, [pc, #540]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 020f 	bic.w	r2, r3, #15
 8004f4a:	4985      	ldr	r1, [pc, #532]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b83      	ldr	r3, [pc, #524]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e184      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d010      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	4b7b      	ldr	r3, [pc, #492]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d908      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f80:	4b78      	ldr	r3, [pc, #480]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	4975      	ldr	r1, [pc, #468]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	4b70      	ldr	r3, [pc, #448]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d908      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fae:	4b6d      	ldr	r3, [pc, #436]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	496a      	ldr	r1, [pc, #424]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d010      	beq.n	8004fee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	4b64      	ldr	r3, [pc, #400]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d908      	bls.n	8004fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fdc:	4b61      	ldr	r3, [pc, #388]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	495e      	ldr	r1, [pc, #376]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d010      	beq.n	800501c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005006:	429a      	cmp	r2, r3
 8005008:	d908      	bls.n	800501c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800500a:	4b56      	ldr	r3, [pc, #344]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	4953      	ldr	r1, [pc, #332]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005018:	4313      	orrs	r3, r2
 800501a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	4b4d      	ldr	r3, [pc, #308]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	429a      	cmp	r2, r3
 8005036:	d908      	bls.n	800504a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b4a      	ldr	r3, [pc, #296]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f023 020f 	bic.w	r2, r3, #15
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4947      	ldr	r1, [pc, #284]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005046:	4313      	orrs	r3, r2
 8005048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d055      	beq.n	8005102 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005056:	4b43      	ldr	r3, [pc, #268]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4940      	ldr	r1, [pc, #256]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005064:	4313      	orrs	r3, r2
 8005066:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d107      	bne.n	8005080 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005070:	4b3c      	ldr	r3, [pc, #240]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d121      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0f6      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d107      	bne.n	8005098 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005088:	4b36      	ldr	r3, [pc, #216]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d115      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0ea      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050a0:	4b30      	ldr	r3, [pc, #192]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0de      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0d6      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050c0:	4b28      	ldr	r3, [pc, #160]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f023 0207 	bic.w	r2, r3, #7
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4925      	ldr	r1, [pc, #148]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d2:	f7fd fb0b 	bl	80026ec <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d8:	e00a      	b.n	80050f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050da:	f7fd fb07 	bl	80026ec <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e0be      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	429a      	cmp	r2, r3
 8005100:	d1eb      	bne.n	80050da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	4b14      	ldr	r3, [pc, #80]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	429a      	cmp	r2, r3
 800511c:	d208      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800511e:	4b11      	ldr	r3, [pc, #68]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f023 020f 	bic.w	r2, r3, #15
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	490e      	ldr	r1, [pc, #56]	@ (8005164 <HAL_RCC_ClockConfig+0x244>)
 800512c:	4313      	orrs	r3, r2
 800512e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d214      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 020f 	bic.w	r2, r3, #15
 8005146:	4906      	ldr	r1, [pc, #24]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514e:	4b04      	ldr	r3, [pc, #16]	@ (8005160 <HAL_RCC_ClockConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d005      	beq.n	8005168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e086      	b.n	800526e <HAL_RCC_ClockConfig+0x34e>
 8005160:	52002000 	.word	0x52002000
 8005164:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d010      	beq.n	8005196 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	4b3f      	ldr	r3, [pc, #252]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005180:	429a      	cmp	r2, r3
 8005182:	d208      	bcs.n	8005196 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005184:	4b3c      	ldr	r3, [pc, #240]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	4939      	ldr	r1, [pc, #228]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 8005192:	4313      	orrs	r3, r2
 8005194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	4b34      	ldr	r3, [pc, #208]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d208      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051b2:	4b31      	ldr	r3, [pc, #196]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	492e      	ldr	r1, [pc, #184]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	4b28      	ldr	r3, [pc, #160]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051dc:	429a      	cmp	r2, r3
 80051de:	d208      	bcs.n	80051f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051e0:	4b25      	ldr	r3, [pc, #148]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	4922      	ldr	r1, [pc, #136]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	4b1d      	ldr	r3, [pc, #116]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800520a:	429a      	cmp	r2, r3
 800520c:	d208      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800520e:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4917      	ldr	r1, [pc, #92]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 800521c:	4313      	orrs	r3, r2
 800521e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005220:	f000 f834 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8005224:	4602      	mov	r2, r0
 8005226:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	4912      	ldr	r1, [pc, #72]	@ (800527c <HAL_RCC_ClockConfig+0x35c>)
 8005232:	5ccb      	ldrb	r3, [r1, r3]
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <HAL_RCC_ClockConfig+0x358>)
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <HAL_RCC_ClockConfig+0x35c>)
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <HAL_RCC_ClockConfig+0x360>)
 8005256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005258:	4a0a      	ldr	r2, [pc, #40]	@ (8005284 <HAL_RCC_ClockConfig+0x364>)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <HAL_RCC_ClockConfig+0x368>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd f9f8 	bl	8002658 <HAL_InitTick>
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
 800527c:	0800b3fc 	.word	0x0800b3fc
 8005280:	24000004 	.word	0x24000004
 8005284:	24000000 	.word	0x24000000
 8005288:	24000008 	.word	0x24000008

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	@ 0x24
 8005290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005292:	4bb3      	ldr	r3, [pc, #716]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800529a:	2b18      	cmp	r3, #24
 800529c:	f200 8155 	bhi.w	800554a <HAL_RCC_GetSysClockFreq+0x2be>
 80052a0:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	0800530d 	.word	0x0800530d
 80052ac:	0800554b 	.word	0x0800554b
 80052b0:	0800554b 	.word	0x0800554b
 80052b4:	0800554b 	.word	0x0800554b
 80052b8:	0800554b 	.word	0x0800554b
 80052bc:	0800554b 	.word	0x0800554b
 80052c0:	0800554b 	.word	0x0800554b
 80052c4:	0800554b 	.word	0x0800554b
 80052c8:	08005333 	.word	0x08005333
 80052cc:	0800554b 	.word	0x0800554b
 80052d0:	0800554b 	.word	0x0800554b
 80052d4:	0800554b 	.word	0x0800554b
 80052d8:	0800554b 	.word	0x0800554b
 80052dc:	0800554b 	.word	0x0800554b
 80052e0:	0800554b 	.word	0x0800554b
 80052e4:	0800554b 	.word	0x0800554b
 80052e8:	08005339 	.word	0x08005339
 80052ec:	0800554b 	.word	0x0800554b
 80052f0:	0800554b 	.word	0x0800554b
 80052f4:	0800554b 	.word	0x0800554b
 80052f8:	0800554b 	.word	0x0800554b
 80052fc:	0800554b 	.word	0x0800554b
 8005300:	0800554b 	.word	0x0800554b
 8005304:	0800554b 	.word	0x0800554b
 8005308:	0800533f 	.word	0x0800533f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530c:	4b94      	ldr	r3, [pc, #592]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005318:	4b91      	ldr	r3, [pc, #580]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	4a90      	ldr	r2, [pc, #576]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800532a:	e111      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800532c:	4b8d      	ldr	r3, [pc, #564]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800532e:	61bb      	str	r3, [r7, #24]
      break;
 8005330:	e10e      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005332:	4b8d      	ldr	r3, [pc, #564]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005334:	61bb      	str	r3, [r7, #24]
      break;
 8005336:	e10b      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005338:	4b8c      	ldr	r3, [pc, #560]	@ (800556c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800533a:	61bb      	str	r3, [r7, #24]
      break;
 800533c:	e108      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800533e:	4b88      	ldr	r3, [pc, #544]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005348:	4b85      	ldr	r3, [pc, #532]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005352:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005354:	4b82      	ldr	r3, [pc, #520]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800535e:	4b80      	ldr	r3, [pc, #512]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005362:	08db      	lsrs	r3, r3, #3
 8005364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80e1 	beq.w	8005544 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b02      	cmp	r3, #2
 8005386:	f000 8083 	beq.w	8005490 <HAL_RCC_GetSysClockFreq+0x204>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b02      	cmp	r3, #2
 800538e:	f200 80a1 	bhi.w	80054d4 <HAL_RCC_GetSysClockFreq+0x248>
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x114>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d056      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x1c0>
 800539e:	e099      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02d      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	4a6b      	ldr	r2, [pc, #428]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b62      	ldr	r3, [pc, #392]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005406:	e087      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b51      	ldr	r3, [pc, #324]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a02 	vldr	s12, [r7, #8]
 800542e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800544a:	e065      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005578 <HAL_RCC_GetSysClockFreq+0x2ec>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b40      	ldr	r3, [pc, #256]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005472:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800548e:	e043      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800557c <HAL_RCC_GetSysClockFreq+0x2f0>
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054d2:	e021      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005578 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005516:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005518:	4b11      	ldr	r3, [pc, #68]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	0a5b      	lsrs	r3, r3, #9
 800551e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005522:	3301      	adds	r3, #1
 8005524:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005530:	edd7 6a07 	vldr	s13, [r7, #28]
 8005534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553c:	ee17 3a90 	vmov	r3, s15
 8005540:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005542:	e005      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
      break;
 8005548:	e002      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800554a:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800554c:	61bb      	str	r3, [r7, #24]
      break;
 800554e:	bf00      	nop
  }

  return sysclockfreq;
 8005550:	69bb      	ldr	r3, [r7, #24]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3724      	adds	r7, #36	@ 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	58024400 	.word	0x58024400
 8005564:	03d09000 	.word	0x03d09000
 8005568:	003d0900 	.word	0x003d0900
 800556c:	00f42400 	.word	0x00f42400
 8005570:	46000000 	.word	0x46000000
 8005574:	4c742400 	.word	0x4c742400
 8005578:	4a742400 	.word	0x4a742400
 800557c:	4b742400 	.word	0x4b742400

08005580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005586:	f7ff fe81 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800558a:	4602      	mov	r2, r0
 800558c:	4b10      	ldr	r3, [pc, #64]	@ (80055d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	490f      	ldr	r1, [pc, #60]	@ (80055d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005598:	5ccb      	ldrb	r3, [r1, r3]
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055a4:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	4a07      	ldr	r2, [pc, #28]	@ (80055d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80055bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055be:	4a07      	ldr	r2, [pc, #28]	@ (80055dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055c4:	4b04      	ldr	r3, [pc, #16]	@ (80055d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	58024400 	.word	0x58024400
 80055d4:	0800b3fc 	.word	0x0800b3fc
 80055d8:	24000004 	.word	0x24000004
 80055dc:	24000000 	.word	0x24000000

080055e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055e4:	f7ff ffcc 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4904      	ldr	r1, [pc, #16]	@ (8005608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd80      	pop	{r7, pc}
 8005604:	58024400 	.word	0x58024400
 8005608:	0800b3fc 	.word	0x0800b3fc

0800560c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005610:	f7ff ffb6 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4904      	ldr	r1, [pc, #16]	@ (8005634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}
 8005630:	58024400 	.word	0x58024400
 8005634:	0800b3fc 	.word	0x0800b3fc

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b0ca      	sub	sp, #296	@ 0x128
 800563e:	af00      	add	r7, sp, #0
 8005640:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005644:	2300      	movs	r3, #0
 8005646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800564a:	2300      	movs	r3, #0
 800564c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800565c:	2500      	movs	r5, #0
 800565e:	ea54 0305 	orrs.w	r3, r4, r5
 8005662:	d049      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800566a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800566e:	d02f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005670:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005674:	d828      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800567a:	d01a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800567c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005680:	d822      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800568a:	d007      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800568c:	e01c      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568e:	4bb8      	ldr	r3, [pc, #736]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	4ab7      	ldr	r2, [pc, #732]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800569a:	e01a      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	3308      	adds	r3, #8
 80056a2:	2102      	movs	r1, #2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 fc8f 	bl	8006fc8 <RCCEx_PLL2_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056b0:	e00f      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	3328      	adds	r3, #40	@ 0x28
 80056b8:	2102      	movs	r1, #2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 fd36 	bl	800712c <RCCEx_PLL3_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056c6:	e004      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056da:	4ba5      	ldr	r3, [pc, #660]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056e8:	4aa1      	ldr	r2, [pc, #644]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ea:	430b      	orrs	r3, r1
 80056ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80056ee:	e003      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005704:	f04f 0900 	mov.w	r9, #0
 8005708:	ea58 0309 	orrs.w	r3, r8, r9
 800570c:	d047      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005714:	2b04      	cmp	r3, #4
 8005716:	d82a      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005735 	.word	0x08005735
 8005724:	08005743 	.word	0x08005743
 8005728:	08005759 	.word	0x08005759
 800572c:	08005777 	.word	0x08005777
 8005730:	08005777 	.word	0x08005777
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005734:	4b8e      	ldr	r3, [pc, #568]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4a8d      	ldr	r2, [pc, #564]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005740:	e01a      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005746:	3308      	adds	r3, #8
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f001 fc3c 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005756:	e00f      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	3328      	adds	r3, #40	@ 0x28
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fce3 	bl	800712c <RCCEx_PLL3_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800576c:	e004      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005774:	e000      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005780:	4b7b      	ldr	r3, [pc, #492]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005784:	f023 0107 	bic.w	r1, r3, #7
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578e:	4a78      	ldr	r2, [pc, #480]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005790:	430b      	orrs	r3, r1
 8005792:	6513      	str	r3, [r2, #80]	@ 0x50
 8005794:	e003      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80057aa:	f04f 0b00 	mov.w	fp, #0
 80057ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80057b2:	d04c      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057be:	d030      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80057c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c4:	d829      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057c8:	d02d      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80057ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80057cc:	d825      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057ce:	2b80      	cmp	r3, #128	@ 0x80
 80057d0:	d018      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057d2:	2b80      	cmp	r3, #128	@ 0x80
 80057d4:	d821      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d007      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057de:	e01c      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e0:	4b63      	ldr	r3, [pc, #396]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4a62      	ldr	r2, [pc, #392]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057ec:	e01c      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	3308      	adds	r3, #8
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fbe6 	bl	8006fc8 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005802:	e011      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3328      	adds	r3, #40	@ 0x28
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fc8d 	bl	800712c <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005818:	e006      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005820:	e002      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005822:	bf00      	nop
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005830:	4b4f      	ldr	r3, [pc, #316]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005834:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583e:	4a4c      	ldr	r2, [pc, #304]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005840:	430b      	orrs	r3, r1
 8005842:	6513      	str	r3, [r2, #80]	@ 0x50
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800585a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005864:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d053      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800587a:	d035      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800587c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005880:	d82e      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005882:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005886:	d031      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005888:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800588c:	d828      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800588e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005892:	d01a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005898:	d822      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800589e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058a2:	d007      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80058a4:	e01c      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a6:	4b32      	ldr	r3, [pc, #200]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	4a31      	ldr	r2, [pc, #196]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b2:	e01c      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	3308      	adds	r3, #8
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 fb83 	bl	8006fc8 <RCCEx_PLL2_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058c8:	e011      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ce:	3328      	adds	r3, #40	@ 0x28
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fc2a 	bl	800712c <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058de:	e006      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e6:	e002      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005906:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005908:	430b      	orrs	r3, r1
 800590a:	6593      	str	r3, [r2, #88]	@ 0x58
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005922:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005926:	2300      	movs	r3, #0
 8005928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800592c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005930:	460b      	mov	r3, r1
 8005932:	4313      	orrs	r3, r2
 8005934:	d056      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800593e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005942:	d038      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005944:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005948:	d831      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800594a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800594e:	d034      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005950:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005954:	d82b      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800595a:	d01d      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800595c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005960:	d825      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800596c:	e01f      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005974:	4ba2      	ldr	r3, [pc, #648]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	4aa1      	ldr	r2, [pc, #644]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800597a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005980:	e01c      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	3308      	adds	r3, #8
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fb1c 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005996:	e011      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	3328      	adds	r3, #40	@ 0x28
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 fbc3 	bl	800712c <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ac:	e006      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059d4:	4a8a      	ldr	r2, [pc, #552]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059da:	e003      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059f4:	2300      	movs	r3, #0
 80059f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059fe:	460b      	mov	r3, r1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	d03a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0a:	2b30      	cmp	r3, #48	@ 0x30
 8005a0c:	d01f      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005a0e:	2b30      	cmp	r3, #48	@ 0x30
 8005a10:	d819      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d00c      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d815      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d019      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d111      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a22:	4b77      	ldr	r3, [pc, #476]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	4a76      	ldr	r2, [pc, #472]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	3308      	adds	r3, #8
 8005a36:	2102      	movs	r1, #2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 fac5 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a5c:	4b68      	ldr	r3, [pc, #416]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a6a:	4a65      	ldr	r2, [pc, #404]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4313      	orrs	r3, r2
 8005a98:	d051      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa4:	d035      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aaa:	d82e      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005aac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ab0:	d031      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ab6:	d828      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005abc:	d01a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac2:	d822      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005acc:	d007      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ace:	e01c      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005adc:	e01c      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 fa6e 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005af2:	e011      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	3328      	adds	r3, #40	@ 0x28
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fb15 	bl	800712c <RCCEx_PLL3_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b20:	4b37      	ldr	r3, [pc, #220]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2e:	4a34      	ldr	r2, [pc, #208]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	d056      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b68:	d033      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b6e:	d82c      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b74:	d02f      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b7a:	d826      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b80:	d02b      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b86:	d820      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b8c:	d012      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b92:	d81a      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d022      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9c:	d115      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fa0e 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bb2:	e015      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	3328      	adds	r3, #40	@ 0x28
 8005bba:	2101      	movs	r1, #1
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fab5 	bl	800712c <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bc8:	e00a      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd0:	e006      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e004      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e002      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10d      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf6:	4a02      	ldr	r2, [pc, #8]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bfc:	e006      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	d055      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c38:	d033      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c3e:	d82c      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c44:	d02f      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4a:	d826      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c50:	d02b      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c56:	d820      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c5c:	d012      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c62:	d81a      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d022      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c6c:	d115      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	3308      	adds	r3, #8
 8005c74:	2101      	movs	r1, #1
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 f9a6 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c82:	e015      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	3328      	adds	r3, #40	@ 0x28
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fa4d 	bl	800712c <RCCEx_PLL3_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c98:	e00a      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ca0:	e006      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cb8:	4ba3      	ldr	r3, [pc, #652]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cbc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cc8:	4a9f      	ldr	r2, [pc, #636]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cce:	e003      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	d037      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d02:	d00e      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d08:	d816      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d018      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d12:	d111      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4b8c      	ldr	r3, [pc, #560]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	4a8b      	ldr	r2, [pc, #556]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d20:	e00f      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	3308      	adds	r3, #8
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 f94c 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d36:	e004      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d3e:	e000      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d58:	4a7b      	ldr	r2, [pc, #492]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	d039      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d81c      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d92:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005da9 	.word	0x08005da9
 8005da0:	08005db7 	.word	0x08005db7
 8005da4:	08005dd5 	.word	0x08005dd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4b67      	ldr	r3, [pc, #412]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	4a66      	ldr	r2, [pc, #408]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005db4:	e00f      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f902 	bl	8006fc8 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dde:	4b5a      	ldr	r3, [pc, #360]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de2:	f023 0103 	bic.w	r1, r3, #3
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dec:	4a56      	ldr	r2, [pc, #344]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f000 809f 	beq.w	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a4a      	ldr	r2, [pc, #296]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2a:	f7fc fc5f 	bl	80026ec <HAL_GetTick>
 8005e2e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e32:	e00b      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e34:	f7fc fc5a 	bl	80026ec <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b64      	cmp	r3, #100	@ 0x64
 8005e42:	d903      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e4a:	e005      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ed      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d179      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e60:	4b39      	ldr	r3, [pc, #228]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e6c:	4053      	eors	r3, r2
 8005e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d015      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e76:	4b34      	ldr	r3, [pc, #208]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e82:	4b31      	ldr	r3, [pc, #196]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e86:	4a30      	ldr	r2, [pc, #192]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	4a2d      	ldr	r2, [pc, #180]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ea0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eae:	d118      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fc fc1c 	bl	80026ec <HAL_GetTick>
 8005eb4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eb8:	e00d      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eba:	f7fc fc17 	bl	80026ec <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ec4:	1ad2      	subs	r2, r2, r3
 8005ec6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d903      	bls.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ed4:	e005      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0eb      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d129      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efa:	d10e      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005efc:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f0c:	091a      	lsrs	r2, r3, #4
 8005f0e:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	4a0d      	ldr	r2, [pc, #52]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6113      	str	r3, [r2, #16]
 8005f18:	e005      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f24:	6113      	str	r3, [r2, #16]
 8005f26:	4b08      	ldr	r3, [pc, #32]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f36:	4a04      	ldr	r2, [pc, #16]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f3c:	e00e      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f46:	e009      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	58024800 	.word	0x58024800
 8005f50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f002 0301 	and.w	r3, r2, #1
 8005f68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f000 8089 	beq.w	8006090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f84:	2b28      	cmp	r3, #40	@ 0x28
 8005f86:	d86b      	bhi.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f88:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08006069 	.word	0x08006069
 8005f94:	08006061 	.word	0x08006061
 8005f98:	08006061 	.word	0x08006061
 8005f9c:	08006061 	.word	0x08006061
 8005fa0:	08006061 	.word	0x08006061
 8005fa4:	08006061 	.word	0x08006061
 8005fa8:	08006061 	.word	0x08006061
 8005fac:	08006061 	.word	0x08006061
 8005fb0:	08006035 	.word	0x08006035
 8005fb4:	08006061 	.word	0x08006061
 8005fb8:	08006061 	.word	0x08006061
 8005fbc:	08006061 	.word	0x08006061
 8005fc0:	08006061 	.word	0x08006061
 8005fc4:	08006061 	.word	0x08006061
 8005fc8:	08006061 	.word	0x08006061
 8005fcc:	08006061 	.word	0x08006061
 8005fd0:	0800604b 	.word	0x0800604b
 8005fd4:	08006061 	.word	0x08006061
 8005fd8:	08006061 	.word	0x08006061
 8005fdc:	08006061 	.word	0x08006061
 8005fe0:	08006061 	.word	0x08006061
 8005fe4:	08006061 	.word	0x08006061
 8005fe8:	08006061 	.word	0x08006061
 8005fec:	08006061 	.word	0x08006061
 8005ff0:	08006069 	.word	0x08006069
 8005ff4:	08006061 	.word	0x08006061
 8005ff8:	08006061 	.word	0x08006061
 8005ffc:	08006061 	.word	0x08006061
 8006000:	08006061 	.word	0x08006061
 8006004:	08006061 	.word	0x08006061
 8006008:	08006061 	.word	0x08006061
 800600c:	08006061 	.word	0x08006061
 8006010:	08006069 	.word	0x08006069
 8006014:	08006061 	.word	0x08006061
 8006018:	08006061 	.word	0x08006061
 800601c:	08006061 	.word	0x08006061
 8006020:	08006061 	.word	0x08006061
 8006024:	08006061 	.word	0x08006061
 8006028:	08006061 	.word	0x08006061
 800602c:	08006061 	.word	0x08006061
 8006030:	08006069 	.word	0x08006069
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	3308      	adds	r3, #8
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f000 ffc3 	bl	8006fc8 <RCCEx_PLL2_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006048:	e00f      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604e:	3328      	adds	r3, #40	@ 0x28
 8006050:	2101      	movs	r1, #1
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f86a 	bl	800712c <RCCEx_PLL3_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800605e:	e004      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006072:	4bbf      	ldr	r3, [pc, #764]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006080:	4abb      	ldr	r2, [pc, #748]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006082:	430b      	orrs	r3, r1
 8006084:	6553      	str	r3, [r2, #84]	@ 0x54
 8006086:	e003      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800608c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f002 0302 	and.w	r3, r2, #2
 800609c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060a0:	2300      	movs	r3, #0
 80060a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80060aa:	460b      	mov	r3, r1
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d041      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d824      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	0800610d 	.word	0x0800610d
 80060c4:	080060d9 	.word	0x080060d9
 80060c8:	080060ef 	.word	0x080060ef
 80060cc:	0800610d 	.word	0x0800610d
 80060d0:	0800610d 	.word	0x0800610d
 80060d4:	0800610d 	.word	0x0800610d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	3308      	adds	r3, #8
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 ff71 	bl	8006fc8 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3328      	adds	r3, #40	@ 0x28
 80060f4:	2101      	movs	r1, #1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f818 	bl	800712c <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006116:	4b96      	ldr	r3, [pc, #600]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611a:	f023 0107 	bic.w	r1, r3, #7
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006124:	4a92      	ldr	r2, [pc, #584]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006126:	430b      	orrs	r3, r1
 8006128:	6553      	str	r3, [r2, #84]	@ 0x54
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f002 0304 	and.w	r3, r2, #4
 8006140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800614a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d044      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615c:	2b05      	cmp	r3, #5
 800615e:	d825      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	080061b5 	.word	0x080061b5
 800616c:	08006181 	.word	0x08006181
 8006170:	08006197 	.word	0x08006197
 8006174:	080061b5 	.word	0x080061b5
 8006178:	080061b5 	.word	0x080061b5
 800617c:	080061b5 	.word	0x080061b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006184:	3308      	adds	r3, #8
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f000 ff1d 	bl	8006fc8 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006194:	e00f      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	3328      	adds	r3, #40	@ 0x28
 800619c:	2101      	movs	r1, #1
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 ffc4 	bl	800712c <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80061b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061be:	4b6c      	ldr	r3, [pc, #432]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c2:	f023 0107 	bic.w	r1, r3, #7
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ce:	4a68      	ldr	r2, [pc, #416]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061d4:	e003      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f002 0320 	and.w	r3, r2, #32
 80061ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061ee:	2300      	movs	r3, #0
 80061f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061f8:	460b      	mov	r3, r1
 80061fa:	4313      	orrs	r3, r2
 80061fc:	d055      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800620a:	d033      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800620c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006210:	d82c      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006216:	d02f      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800621c:	d826      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800621e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006222:	d02b      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006224:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006228:	d820      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800622a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800622e:	d012      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006234:	d81a      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d022      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800623a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623e:	d115      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006244:	3308      	adds	r3, #8
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f000 febd 	bl	8006fc8 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006254:	e015      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625a:	3328      	adds	r3, #40	@ 0x28
 800625c:	2102      	movs	r1, #2
 800625e:	4618      	mov	r0, r3
 8006260:	f000 ff64 	bl	800712c <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800626a:	e00a      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006272:	e006      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006274:	bf00      	nop
 8006276:	e004      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006278:	bf00      	nop
 800627a:	e002      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628a:	4b39      	ldr	r3, [pc, #228]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800628c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	4a35      	ldr	r2, [pc, #212]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6553      	str	r3, [r2, #84]	@ 0x54
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80062b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d058      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062d6:	d033      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062dc:	d82c      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e2:	d02f      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e8:	d826      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062ee:	d02b      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062f4:	d820      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fa:	d012      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006300:	d81a      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d022      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630a:	d115      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	3308      	adds	r3, #8
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fe57 	bl	8006fc8 <RCCEx_PLL2_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006320:	e015      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	3328      	adds	r3, #40	@ 0x28
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fefe 	bl	800712c <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006336:	e00a      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800633e:	e006      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006340:	bf00      	nop
 8006342:	e004      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006344:	bf00      	nop
 8006346:	e002      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10e      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006356:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006366:	4a02      	ldr	r2, [pc, #8]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6593      	str	r3, [r2, #88]	@ 0x58
 800636c:	e006      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800636e:	bf00      	nop
 8006370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800638c:	2300      	movs	r3, #0
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006392:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d055      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063a8:	d033      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80063aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063ae:	d82c      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b4:	d02f      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80063b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ba:	d826      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063c0:	d02b      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80063c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063c6:	d820      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063cc:	d012      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80063ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d2:	d81a      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d022      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063dc:	d115      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	3308      	adds	r3, #8
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fdee 	bl	8006fc8 <RCCEx_PLL2_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063f2:	e015      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f8:	3328      	adds	r3, #40	@ 0x28
 80063fa:	2102      	movs	r1, #2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fe95 	bl	800712c <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006408:	e00a      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006410:	e006      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006412:	bf00      	nop
 8006414:	e004      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800641e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006428:	4ba1      	ldr	r3, [pc, #644]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006438:	4a9d      	ldr	r2, [pc, #628]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6593      	str	r3, [r2, #88]	@ 0x58
 800643e:	e003      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f002 0308 	and.w	r3, r2, #8
 8006454:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006458:	2300      	movs	r3, #0
 800645a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800645e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006462:	460b      	mov	r3, r1
 8006464:	4313      	orrs	r3, r2
 8006466:	d01e      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006474:	d10c      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647a:	3328      	adds	r3, #40	@ 0x28
 800647c:	2102      	movs	r1, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fe54 	bl	800712c <RCCEx_PLL3_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006490:	4b87      	ldr	r3, [pc, #540]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006494:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064a0:	4a83      	ldr	r2, [pc, #524]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f002 0310 	and.w	r3, r2, #16
 80064b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064b6:	2300      	movs	r3, #0
 80064b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d01e      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d2:	d10c      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	3328      	adds	r3, #40	@ 0x28
 80064da:	2102      	movs	r1, #2
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fe25 	bl	800712c <RCCEx_PLL3_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064ee:	4b70      	ldr	r3, [pc, #448]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064fe:	4a6c      	ldr	r2, [pc, #432]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006500:	430b      	orrs	r3, r1
 8006502:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800651a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	d03e      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800652c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006530:	d022      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006536:	d81b      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006540:	d00b      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006542:	e015      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	3308      	adds	r3, #8
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fd3b 	bl	8006fc8 <RCCEx_PLL2_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006558:	e00f      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	3328      	adds	r3, #40	@ 0x28
 8006560:	2102      	movs	r1, #2
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fde2 	bl	800712c <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800656e:	e004      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006576:	e000      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006582:	4b4b      	ldr	r3, [pc, #300]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006586:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006592:	4a47      	ldr	r2, [pc, #284]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006594:	430b      	orrs	r3, r1
 8006596:	6593      	str	r3, [r2, #88]	@ 0x58
 8006598:	e003      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80065ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065b0:	2300      	movs	r3, #0
 80065b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80065b8:	460b      	mov	r3, r1
 80065ba:	4313      	orrs	r3, r2
 80065bc:	d03b      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065ca:	d01f      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80065cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065d0:	d818      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065d6:	d003      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065dc:	d007      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065de:	e011      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e0:	4b33      	ldr	r3, [pc, #204]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	4a32      	ldr	r2, [pc, #200]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065ec:	e00f      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	3328      	adds	r3, #40	@ 0x28
 80065f4:	2101      	movs	r1, #1
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fd98 	bl	800712c <RCCEx_PLL3_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006602:	e004      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800660a:	e000      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800660c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800660e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006616:	4b26      	ldr	r3, [pc, #152]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006626:	4a22      	ldr	r2, [pc, #136]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006628:	430b      	orrs	r3, r1
 800662a:	6553      	str	r3, [r2, #84]	@ 0x54
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006642:	673b      	str	r3, [r7, #112]	@ 0x70
 8006644:	2300      	movs	r3, #0
 8006646:	677b      	str	r3, [r7, #116]	@ 0x74
 8006648:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800664c:	460b      	mov	r3, r1
 800664e:	4313      	orrs	r3, r2
 8006650:	d034      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006660:	d007      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006662:	e011      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006664:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	4a11      	ldr	r2, [pc, #68]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800666a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800666e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006670:	e00e      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	3308      	adds	r3, #8
 8006678:	2102      	movs	r1, #2
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fca4 	bl	8006fc8 <RCCEx_PLL2_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006686:	e003      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800668e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10d      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800669a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800669c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a6:	4a02      	ldr	r2, [pc, #8]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066a8:	430b      	orrs	r3, r1
 80066aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066ac:	e006      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80066ae:	bf00      	nop
 80066b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ca:	2300      	movs	r3, #0
 80066cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00c      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	3328      	adds	r3, #40	@ 0x28
 80066de:	2102      	movs	r1, #2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fd23 	bl	800712c <RCCEx_PLL3_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006700:	2300      	movs	r3, #0
 8006702:	667b      	str	r3, [r7, #100]	@ 0x64
 8006704:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006708:	460b      	mov	r3, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	d038      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671a:	d018      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800671c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006720:	d811      	bhi.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006726:	d014      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800672c:	d80b      	bhi.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d011      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006736:	d106      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006738:	4bc3      	ldr	r3, [pc, #780]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	4ac2      	ldr	r2, [pc, #776]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006744:	e008      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800674c:	e004      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006760:	4bb9      	ldr	r3, [pc, #740]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006764:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006770:	4ab5      	ldr	r2, [pc, #724]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006772:	430b      	orrs	r3, r1
 8006774:	6553      	str	r3, [r2, #84]	@ 0x54
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800678c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800678e:	2300      	movs	r3, #0
 8006790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006792:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d009      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800679c:	4baa      	ldr	r3, [pc, #680]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800679e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067aa:	4aa7      	ldr	r2, [pc, #668]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ac:	430b      	orrs	r3, r1
 80067ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80067be:	2300      	movs	r3, #0
 80067c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80067c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067cc:	4b9e      	ldr	r3, [pc, #632]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067dc:	4a9a      	ldr	r2, [pc, #616]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f0:	2300      	movs	r3, #0
 80067f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067fe:	4b92      	ldr	r3, [pc, #584]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006802:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800680c:	4a8e      	ldr	r2, [pc, #568]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800680e:	430b      	orrs	r3, r1
 8006810:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800681e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006820:	2300      	movs	r3, #0
 8006822:	647b      	str	r3, [r7, #68]	@ 0x44
 8006824:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006828:	460b      	mov	r3, r1
 800682a:	4313      	orrs	r3, r2
 800682c:	d00e      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800682e:	4b86      	ldr	r3, [pc, #536]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	4a85      	ldr	r2, [pc, #532]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006834:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006838:	6113      	str	r3, [r2, #16]
 800683a:	4b83      	ldr	r3, [pc, #524]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800683c:	6919      	ldr	r1, [r3, #16]
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006846:	4a80      	ldr	r2, [pc, #512]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006848:	430b      	orrs	r3, r1
 800684a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006858:	63bb      	str	r3, [r7, #56]	@ 0x38
 800685a:	2300      	movs	r3, #0
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800685e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006868:	4b77      	ldr	r3, [pc, #476]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800686c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006876:	4a74      	ldr	r2, [pc, #464]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006878:	430b      	orrs	r3, r1
 800687a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
 800688e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006898:	4b6b      	ldr	r3, [pc, #428]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800689a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068a8:	4a67      	ldr	r2, [pc, #412]	@ (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	2100      	movs	r1, #0
 80068b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ce:	3308      	adds	r3, #8
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fb78 	bl	8006fc8 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	2100      	movs	r1, #0
 80068f8:	6239      	str	r1, [r7, #32]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006900:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006904:	460b      	mov	r3, r1
 8006906:	4313      	orrs	r3, r2
 8006908:	d011      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	3308      	adds	r3, #8
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fb58 	bl	8006fc8 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	2100      	movs	r1, #0
 8006938:	61b9      	str	r1, [r7, #24]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006944:	460b      	mov	r3, r1
 8006946:	4313      	orrs	r3, r2
 8006948:	d011      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694e:	3308      	adds	r3, #8
 8006950:	2102      	movs	r1, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fb38 	bl	8006fc8 <RCCEx_PLL2_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800695e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	2100      	movs	r1, #0
 8006978:	6139      	str	r1, [r7, #16]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006984:	460b      	mov	r3, r1
 8006986:	4313      	orrs	r3, r2
 8006988:	d011      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	3328      	adds	r3, #40	@ 0x28
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fbca 	bl	800712c <RCCEx_PLL3_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800699e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	2100      	movs	r1, #0
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069c4:	460b      	mov	r3, r1
 80069c6:	4313      	orrs	r3, r2
 80069c8:	d011      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ce:	3328      	adds	r3, #40	@ 0x28
 80069d0:	2101      	movs	r1, #1
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fbaa 	bl	800712c <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	2100      	movs	r1, #0
 80069f8:	6039      	str	r1, [r7, #0]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	607b      	str	r3, [r7, #4]
 8006a00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a04:	460b      	mov	r3, r1
 8006a06:	4313      	orrs	r3, r2
 8006a08:	d011      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0e:	3328      	adds	r3, #40	@ 0x28
 8006a10:	2102      	movs	r1, #2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fb8a 	bl	800712c <RCCEx_PLL3_Config>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a42:	46bd      	mov	sp, r7
 8006a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a48:	58024400 	.word	0x58024400

08006a4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a50:	f7fe fd96 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 8006a54:	4602      	mov	r2, r0
 8006a56:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	091b      	lsrs	r3, r3, #4
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	4904      	ldr	r1, [pc, #16]	@ (8006a74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a62:	5ccb      	ldrb	r3, [r1, r3]
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	58024400 	.word	0x58024400
 8006a74:	0800b3fc 	.word	0x0800b3fc

08006a78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b089      	sub	sp, #36	@ 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a80:	4ba1      	ldr	r3, [pc, #644]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a8a:	4b9f      	ldr	r3, [pc, #636]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8e:	0b1b      	lsrs	r3, r3, #12
 8006a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a96:	4b9c      	ldr	r3, [pc, #624]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006aa2:	4b99      	ldr	r3, [pc, #612]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa6:	08db      	lsrs	r3, r3, #3
 8006aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8111 	beq.w	8006ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	f000 8083 	beq.w	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	f200 80a1 	bhi.w	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d056      	beq.n	8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ae2:	e099      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ae4:	4b88      	ldr	r3, [pc, #544]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d02d      	beq.n	8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006af0:	4b85      	ldr	r3, [pc, #532]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	4a84      	ldr	r2, [pc, #528]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
 8006b00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b4a:	e087      	b.n	8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b8e:	e065      	b.n	8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b59      	ldr	r3, [pc, #356]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd2:	e043      	b.n	8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	4b48      	ldr	r3, [pc, #288]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c16:	e021      	b.n	8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2a:	4b37      	ldr	r3, [pc, #220]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c60:	0a5b      	lsrs	r3, r3, #9
 8006c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb0:	ee17 2a90 	vmov	r2, s15
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006cb8:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	0e1b      	lsrs	r3, r3, #24
 8006cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cde:	ee17 2a90 	vmov	r2, s15
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ce6:	e008      	b.n	8006cfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	609a      	str	r2, [r3, #8]
}
 8006cfa:	bf00      	nop
 8006cfc:	3724      	adds	r7, #36	@ 0x24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	03d09000 	.word	0x03d09000
 8006d10:	46000000 	.word	0x46000000
 8006d14:	4c742400 	.word	0x4c742400
 8006d18:	4a742400 	.word	0x4a742400
 8006d1c:	4b742400 	.word	0x4b742400

08006d20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	@ 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d28:	4ba1      	ldr	r3, [pc, #644]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d32:	4b9f      	ldr	r3, [pc, #636]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	0d1b      	lsrs	r3, r3, #20
 8006d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d3e:	4b9c      	ldr	r3, [pc, #624]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d4a:	4b99      	ldr	r3, [pc, #612]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	08db      	lsrs	r3, r3, #3
 8006d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8111 	beq.w	8006f90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	f000 8083 	beq.w	8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	f200 80a1 	bhi.w	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d056      	beq.n	8006e38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d8a:	e099      	b.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d8c:	4b88      	ldr	r3, [pc, #544]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d02d      	beq.n	8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d98:	4b85      	ldr	r3, [pc, #532]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	4a84      	ldr	r2, [pc, #528]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006df2:	e087      	b.n	8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e06:	4b6a      	ldr	r3, [pc, #424]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e36:	e065      	b.n	8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4a:	4b59      	ldr	r3, [pc, #356]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e7a:	e043      	b.n	8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b48      	ldr	r3, [pc, #288]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ebe:	e021      	b.n	8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f04:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f08:	0a5b      	lsrs	r3, r3, #9
 8006f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f32:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f58:	ee17 2a90 	vmov	r2, s15
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f60:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	0e1b      	lsrs	r3, r3, #24
 8006f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f86:	ee17 2a90 	vmov	r2, s15
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	609a      	str	r2, [r3, #8]
}
 8006fa2:	bf00      	nop
 8006fa4:	3724      	adds	r7, #36	@ 0x24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	03d09000 	.word	0x03d09000
 8006fb8:	46000000 	.word	0x46000000
 8006fbc:	4c742400 	.word	0x4c742400
 8006fc0:	4a742400 	.word	0x4a742400
 8006fc4:	4b742400 	.word	0x4b742400

08006fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fd6:	4b53      	ldr	r3, [pc, #332]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d101      	bne.n	8006fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e099      	b.n	800711a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a4e      	ldr	r2, [pc, #312]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff2:	f7fb fb7b 	bl	80026ec <HAL_GetTick>
 8006ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff8:	e008      	b.n	800700c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ffa:	f7fb fb77 	bl	80026ec <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e086      	b.n	800711a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800700c:	4b45      	ldr	r3, [pc, #276]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f0      	bne.n	8006ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007018:	4b42      	ldr	r3, [pc, #264]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	493f      	ldr	r1, [pc, #252]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007028:	4313      	orrs	r3, r2
 800702a:	628b      	str	r3, [r1, #40]	@ 0x28
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	3b01      	subs	r3, #1
 8007032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	3b01      	subs	r3, #1
 800703c:	025b      	lsls	r3, r3, #9
 800703e:	b29b      	uxth	r3, r3
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	3b01      	subs	r3, #1
 8007048:	041b      	lsls	r3, r3, #16
 800704a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	3b01      	subs	r3, #1
 8007056:	061b      	lsls	r3, r3, #24
 8007058:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800705c:	4931      	ldr	r1, [pc, #196]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007062:	4b30      	ldr	r3, [pc, #192]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	492d      	ldr	r1, [pc, #180]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007070:	4313      	orrs	r3, r2
 8007072:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007074:	4b2b      	ldr	r3, [pc, #172]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	f023 0220 	bic.w	r2, r3, #32
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	4928      	ldr	r1, [pc, #160]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007086:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4a26      	ldr	r2, [pc, #152]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f023 0310 	bic.w	r3, r3, #16
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007092:	4b24      	ldr	r3, [pc, #144]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 8007094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007096:	4b24      	ldr	r3, [pc, #144]	@ (8007128 <RCCEx_PLL2_Config+0x160>)
 8007098:	4013      	ands	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	69d2      	ldr	r2, [r2, #28]
 800709e:	00d2      	lsls	r2, r2, #3
 80070a0:	4920      	ldr	r1, [pc, #128]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070ac:	f043 0310 	orr.w	r3, r3, #16
 80070b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	4a19      	ldr	r2, [pc, #100]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070c4:	e00f      	b.n	80070e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d106      	bne.n	80070da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070cc:	4b15      	ldr	r3, [pc, #84]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	4a14      	ldr	r2, [pc, #80]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070d8:	e005      	b.n	80070e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070da:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	4a11      	ldr	r2, [pc, #68]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f2:	f7fb fafb 	bl	80026ec <HAL_GetTick>
 80070f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070f8:	e008      	b.n	800710c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070fa:	f7fb faf7 	bl	80026ec <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e006      	b.n	800711a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800710c:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <RCCEx_PLL2_Config+0x15c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	58024400 	.word	0x58024400
 8007128:	ffff0007 	.word	0xffff0007

0800712c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800713a:	4b53      	ldr	r3, [pc, #332]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d101      	bne.n	800714a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e099      	b.n	800727e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800714a:	4b4f      	ldr	r3, [pc, #316]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a4e      	ldr	r2, [pc, #312]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007156:	f7fb fac9 	bl	80026ec <HAL_GetTick>
 800715a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800715c:	e008      	b.n	8007170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800715e:	f7fb fac5 	bl	80026ec <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e086      	b.n	800727e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007170:	4b45      	ldr	r3, [pc, #276]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f0      	bne.n	800715e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800717c:	4b42      	ldr	r3, [pc, #264]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	051b      	lsls	r3, r3, #20
 800718a:	493f      	ldr	r1, [pc, #252]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800718c:	4313      	orrs	r3, r2
 800718e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	3b01      	subs	r3, #1
 8007196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	3b01      	subs	r3, #1
 80071a0:	025b      	lsls	r3, r3, #9
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	061b      	lsls	r3, r3, #24
 80071bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071c0:	4931      	ldr	r1, [pc, #196]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071c6:	4b30      	ldr	r3, [pc, #192]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	492d      	ldr	r1, [pc, #180]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	4928      	ldr	r1, [pc, #160]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071ea:	4b27      	ldr	r3, [pc, #156]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ee:	4a26      	ldr	r2, [pc, #152]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071f6:	4b24      	ldr	r3, [pc, #144]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 80071f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fa:	4b24      	ldr	r3, [pc, #144]	@ (800728c <RCCEx_PLL3_Config+0x160>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	69d2      	ldr	r2, [r2, #28]
 8007202:	00d2      	lsls	r2, r2, #3
 8007204:	4920      	ldr	r1, [pc, #128]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007206:	4313      	orrs	r3, r2
 8007208:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800720a:	4b1f      	ldr	r3, [pc, #124]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	4a1e      	ldr	r2, [pc, #120]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800721c:	4b1a      	ldr	r3, [pc, #104]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4a19      	ldr	r2, [pc, #100]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007222:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007228:	e00f      	b.n	800724a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d106      	bne.n	800723e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007230:	4b15      	ldr	r3, [pc, #84]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	4a14      	ldr	r2, [pc, #80]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007236:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800723a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800723c:	e005      	b.n	800724a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800723e:	4b12      	ldr	r3, [pc, #72]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	4a11      	ldr	r2, [pc, #68]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007248:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800724a:	4b0f      	ldr	r3, [pc, #60]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a0e      	ldr	r2, [pc, #56]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007256:	f7fb fa49 	bl	80026ec <HAL_GetTick>
 800725a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800725c:	e008      	b.n	8007270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800725e:	f7fb fa45 	bl	80026ec <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e006      	b.n	800727e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007270:	4b05      	ldr	r3, [pc, #20]	@ (8007288 <RCCEx_PLL3_Config+0x15c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0f0      	beq.n	800725e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	58024400 	.word	0x58024400
 800728c:	ffff0007 	.word	0xffff0007

08007290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e049      	b.n	8007336 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fa ffe8 	bl	800228c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f000 fcea 	bl	8007ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e049      	b.n	80073e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f841 	bl	80073ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f000 fc93 	bl	8007ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_TIM_PWM_Start+0x24>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	bf14      	ite	ne
 800741c:	2301      	movne	r3, #1
 800741e:	2300      	moveq	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	e03c      	b.n	800749e <HAL_TIM_PWM_Start+0x9e>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b04      	cmp	r3, #4
 8007428:	d109      	bne.n	800743e <HAL_TIM_PWM_Start+0x3e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b01      	cmp	r3, #1
 8007434:	bf14      	ite	ne
 8007436:	2301      	movne	r3, #1
 8007438:	2300      	moveq	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	e02f      	b.n	800749e <HAL_TIM_PWM_Start+0x9e>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d109      	bne.n	8007458 <HAL_TIM_PWM_Start+0x58>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	e022      	b.n	800749e <HAL_TIM_PWM_Start+0x9e>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b0c      	cmp	r3, #12
 800745c:	d109      	bne.n	8007472 <HAL_TIM_PWM_Start+0x72>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b01      	cmp	r3, #1
 8007468:	bf14      	ite	ne
 800746a:	2301      	movne	r3, #1
 800746c:	2300      	moveq	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	e015      	b.n	800749e <HAL_TIM_PWM_Start+0x9e>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b10      	cmp	r3, #16
 8007476:	d109      	bne.n	800748c <HAL_TIM_PWM_Start+0x8c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	bf14      	ite	ne
 8007484:	2301      	movne	r3, #1
 8007486:	2300      	moveq	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	e008      	b.n	800749e <HAL_TIM_PWM_Start+0x9e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	bf14      	ite	ne
 8007498:	2301      	movne	r3, #1
 800749a:	2300      	moveq	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e0a1      	b.n	80075ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Start+0xb6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b4:	e023      	b.n	80074fe <HAL_TIM_PWM_Start+0xfe>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_PWM_Start+0xc6>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074c4:	e01b      	b.n	80074fe <HAL_TIM_PWM_Start+0xfe>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d104      	bne.n	80074d6 <HAL_TIM_PWM_Start+0xd6>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074d4:	e013      	b.n	80074fe <HAL_TIM_PWM_Start+0xfe>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b0c      	cmp	r3, #12
 80074da:	d104      	bne.n	80074e6 <HAL_TIM_PWM_Start+0xe6>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074e4:	e00b      	b.n	80074fe <HAL_TIM_PWM_Start+0xfe>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_PWM_Start+0xf6>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074f4:	e003      	b.n	80074fe <HAL_TIM_PWM_Start+0xfe>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2201      	movs	r2, #1
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 ffe8 	bl	80084dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a38      	ldr	r2, [pc, #224]	@ (80075f4 <HAL_TIM_PWM_Start+0x1f4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <HAL_TIM_PWM_Start+0x13e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a37      	ldr	r2, [pc, #220]	@ (80075f8 <HAL_TIM_PWM_Start+0x1f8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <HAL_TIM_PWM_Start+0x13e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a35      	ldr	r2, [pc, #212]	@ (80075fc <HAL_TIM_PWM_Start+0x1fc>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d009      	beq.n	800753e <HAL_TIM_PWM_Start+0x13e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a34      	ldr	r2, [pc, #208]	@ (8007600 <HAL_TIM_PWM_Start+0x200>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_TIM_PWM_Start+0x13e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a32      	ldr	r2, [pc, #200]	@ (8007604 <HAL_TIM_PWM_Start+0x204>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <HAL_TIM_PWM_Start+0x142>
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <HAL_TIM_PWM_Start+0x144>
 8007542:	2300      	movs	r3, #0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007556:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a25      	ldr	r2, [pc, #148]	@ (80075f4 <HAL_TIM_PWM_Start+0x1f4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d022      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756a:	d01d      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a25      	ldr	r2, [pc, #148]	@ (8007608 <HAL_TIM_PWM_Start+0x208>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d018      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a24      	ldr	r2, [pc, #144]	@ (800760c <HAL_TIM_PWM_Start+0x20c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d013      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a22      	ldr	r2, [pc, #136]	@ (8007610 <HAL_TIM_PWM_Start+0x210>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1a      	ldr	r2, [pc, #104]	@ (80075f8 <HAL_TIM_PWM_Start+0x1f8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1e      	ldr	r2, [pc, #120]	@ (8007614 <HAL_TIM_PWM_Start+0x214>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1a8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a16      	ldr	r2, [pc, #88]	@ (80075fc <HAL_TIM_PWM_Start+0x1fc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d115      	bne.n	80075d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007618 <HAL_TIM_PWM_Start+0x218>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d015      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x1e6>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075c0:	d011      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	e008      	b.n	80075e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0201 	orr.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e000      	b.n	80075e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40010400 	.word	0x40010400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40001800 	.word	0x40001800
 8007618:	00010007 	.word	0x00010007

0800761c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d020      	beq.n	8007680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0202 	mvn.w	r2, #2
 8007650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fb00 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 800766c:	e005      	b.n	800767a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 faf2 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fb03 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0204 	mvn.w	r2, #4
 800769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fada 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 facc 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fadd 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d020      	beq.n	8007718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0208 	mvn.w	r2, #8
 80076e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2204      	movs	r2, #4
 80076ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fab4 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 faa6 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fab7 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b00      	cmp	r3, #0
 8007720:	d020      	beq.n	8007764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01b      	beq.n	8007764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0210 	mvn.w	r2, #16
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2208      	movs	r2, #8
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa8e 	bl	8007c6c <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa80 	bl	8007c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa91 	bl	8007c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00c      	beq.n	8007788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0201 	mvn.w	r2, #1
 8007780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa5e 	bl	8007c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00c      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80077ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 ff51 	bl	8008658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00c      	beq.n	80077da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80077d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 ff49 	bl	800866c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00c      	beq.n	80077fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa4b 	bl	8007c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00c      	beq.n	8007822 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f06f 0220 	mvn.w	r2, #32
 800781a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 ff11 	bl	8008644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007846:	2302      	movs	r3, #2
 8007848:	e0ff      	b.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b14      	cmp	r3, #20
 8007856:	f200 80f0 	bhi.w	8007a3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078b5 	.word	0x080078b5
 8007864:	08007a3b 	.word	0x08007a3b
 8007868:	08007a3b 	.word	0x08007a3b
 800786c:	08007a3b 	.word	0x08007a3b
 8007870:	080078f5 	.word	0x080078f5
 8007874:	08007a3b 	.word	0x08007a3b
 8007878:	08007a3b 	.word	0x08007a3b
 800787c:	08007a3b 	.word	0x08007a3b
 8007880:	08007937 	.word	0x08007937
 8007884:	08007a3b 	.word	0x08007a3b
 8007888:	08007a3b 	.word	0x08007a3b
 800788c:	08007a3b 	.word	0x08007a3b
 8007890:	08007977 	.word	0x08007977
 8007894:	08007a3b 	.word	0x08007a3b
 8007898:	08007a3b 	.word	0x08007a3b
 800789c:	08007a3b 	.word	0x08007a3b
 80078a0:	080079b9 	.word	0x080079b9
 80078a4:	08007a3b 	.word	0x08007a3b
 80078a8:	08007a3b 	.word	0x08007a3b
 80078ac:	08007a3b 	.word	0x08007a3b
 80078b0:	080079f9 	.word	0x080079f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fa9a 	bl	8007df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0208 	orr.w	r2, r2, #8
 80078ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0204 	bic.w	r2, r2, #4
 80078de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6999      	ldr	r1, [r3, #24]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	619a      	str	r2, [r3, #24]
      break;
 80078f2:	e0a5      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fb0a 	bl	8007f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800790e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800791e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6999      	ldr	r1, [r3, #24]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	021a      	lsls	r2, r3, #8
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	619a      	str	r2, [r3, #24]
      break;
 8007934:	e084      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fb73 	bl	8008028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0208 	orr.w	r2, r2, #8
 8007950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0204 	bic.w	r2, r2, #4
 8007960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69d9      	ldr	r1, [r3, #28]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	61da      	str	r2, [r3, #28]
      break;
 8007974:	e064      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fbdb 	bl	8008138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69d9      	ldr	r1, [r3, #28]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	021a      	lsls	r2, r3, #8
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	61da      	str	r2, [r3, #28]
      break;
 80079b6:	e043      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fc24 	bl	800820c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0208 	orr.w	r2, r2, #8
 80079d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0204 	bic.w	r2, r2, #4
 80079e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80079f6:	e023      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fc68 	bl	80082d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	021a      	lsls	r2, r3, #8
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a38:	e002      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop

08007a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0dc      	b.n	8007c2a <HAL_TIM_ConfigClockSource+0x1d6>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8007c34 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a64      	ldr	r2, [pc, #400]	@ (8007c38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	f000 80a9 	beq.w	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007aac:	4a62      	ldr	r2, [pc, #392]	@ (8007c38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	f200 80ae 	bhi.w	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ab4:	4a61      	ldr	r2, [pc, #388]	@ (8007c3c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	f000 80a1 	beq.w	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007abc:	4a5f      	ldr	r2, [pc, #380]	@ (8007c3c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	f200 80a6 	bhi.w	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8007c40 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	f000 8099 	beq.w	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007acc:	4a5c      	ldr	r2, [pc, #368]	@ (8007c40 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	f200 809e 	bhi.w	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ad4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ad8:	f000 8091 	beq.w	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007adc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ae0:	f200 8096 	bhi.w	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ae4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae8:	f000 8089 	beq.w	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af0:	f200 808e 	bhi.w	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007af8:	d03e      	beq.n	8007b78 <HAL_TIM_ConfigClockSource+0x124>
 8007afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007afe:	f200 8087 	bhi.w	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b06:	f000 8086 	beq.w	8007c16 <HAL_TIM_ConfigClockSource+0x1c2>
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b0e:	d87f      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b10:	2b70      	cmp	r3, #112	@ 0x70
 8007b12:	d01a      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0xf6>
 8007b14:	2b70      	cmp	r3, #112	@ 0x70
 8007b16:	d87b      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b18:	2b60      	cmp	r3, #96	@ 0x60
 8007b1a:	d050      	beq.n	8007bbe <HAL_TIM_ConfigClockSource+0x16a>
 8007b1c:	2b60      	cmp	r3, #96	@ 0x60
 8007b1e:	d877      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b20:	2b50      	cmp	r3, #80	@ 0x50
 8007b22:	d03c      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0x14a>
 8007b24:	2b50      	cmp	r3, #80	@ 0x50
 8007b26:	d873      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b28:	2b40      	cmp	r3, #64	@ 0x40
 8007b2a:	d058      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x18a>
 8007b2c:	2b40      	cmp	r3, #64	@ 0x40
 8007b2e:	d86f      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b30:	2b30      	cmp	r3, #48	@ 0x30
 8007b32:	d064      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007b34:	2b30      	cmp	r3, #48	@ 0x30
 8007b36:	d86b      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d060      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d867      	bhi.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d05c      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d05a      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0x1aa>
 8007b48:	e062      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b5a:	f000 fc9f 	bl	800849c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	609a      	str	r2, [r3, #8]
      break;
 8007b76:	e04f      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b88:	f000 fc88 	bl	800849c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b9a:	609a      	str	r2, [r3, #8]
      break;
 8007b9c:	e03c      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007baa:	461a      	mov	r2, r3
 8007bac:	f000 fbf8 	bl	80083a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2150      	movs	r1, #80	@ 0x50
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fc52 	bl	8008460 <TIM_ITRx_SetConfig>
      break;
 8007bbc:	e02c      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f000 fc17 	bl	80083fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2160      	movs	r1, #96	@ 0x60
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fc42 	bl	8008460 <TIM_ITRx_SetConfig>
      break;
 8007bdc:	e01c      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bea:	461a      	mov	r2, r3
 8007bec:	f000 fbd8 	bl	80083a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2140      	movs	r1, #64	@ 0x40
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fc32 	bl	8008460 <TIM_ITRx_SetConfig>
      break;
 8007bfc:	e00c      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f000 fc29 	bl	8008460 <TIM_ITRx_SetConfig>
      break;
 8007c0e:	e003      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	73fb      	strb	r3, [r7, #15]
      break;
 8007c14:	e000      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	ffceff88 	.word	0xffceff88
 8007c38:	00100040 	.word	0x00100040
 8007c3c:	00100030 	.word	0x00100030
 8007c40:	00100020 	.word	0x00100020

08007c44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a46      	ldr	r2, [pc, #280]	@ (8007dd4 <TIM_Base_SetConfig+0x12c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d013      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc6:	d00f      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a43      	ldr	r2, [pc, #268]	@ (8007dd8 <TIM_Base_SetConfig+0x130>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00b      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a42      	ldr	r2, [pc, #264]	@ (8007ddc <TIM_Base_SetConfig+0x134>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d007      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a41      	ldr	r2, [pc, #260]	@ (8007de0 <TIM_Base_SetConfig+0x138>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a40      	ldr	r2, [pc, #256]	@ (8007de4 <TIM_Base_SetConfig+0x13c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d108      	bne.n	8007cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a35      	ldr	r2, [pc, #212]	@ (8007dd4 <TIM_Base_SetConfig+0x12c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01f      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d08:	d01b      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a32      	ldr	r2, [pc, #200]	@ (8007dd8 <TIM_Base_SetConfig+0x130>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d017      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a31      	ldr	r2, [pc, #196]	@ (8007ddc <TIM_Base_SetConfig+0x134>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a30      	ldr	r2, [pc, #192]	@ (8007de0 <TIM_Base_SetConfig+0x138>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00f      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a2f      	ldr	r2, [pc, #188]	@ (8007de4 <TIM_Base_SetConfig+0x13c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00b      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8007de8 <TIM_Base_SetConfig+0x140>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a2d      	ldr	r2, [pc, #180]	@ (8007dec <TIM_Base_SetConfig+0x144>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d003      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8007df0 <TIM_Base_SetConfig+0x148>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d108      	bne.n	8007d54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a16      	ldr	r2, [pc, #88]	@ (8007dd4 <TIM_Base_SetConfig+0x12c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00f      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a18      	ldr	r2, [pc, #96]	@ (8007de4 <TIM_Base_SetConfig+0x13c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a17      	ldr	r2, [pc, #92]	@ (8007de8 <TIM_Base_SetConfig+0x140>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a16      	ldr	r2, [pc, #88]	@ (8007dec <TIM_Base_SetConfig+0x144>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a15      	ldr	r2, [pc, #84]	@ (8007df0 <TIM_Base_SetConfig+0x148>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d103      	bne.n	8007da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d105      	bne.n	8007dc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f023 0201 	bic.w	r2, r3, #1
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	611a      	str	r2, [r3, #16]
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800
 8007de0:	40000c00 	.word	0x40000c00
 8007de4:	40010400 	.word	0x40010400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40014400 	.word	0x40014400
 8007df0:	40014800 	.word	0x40014800

08007df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	f023 0201 	bic.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4b37      	ldr	r3, [pc, #220]	@ (8007efc <TIM_OC1_SetConfig+0x108>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 0302 	bic.w	r3, r3, #2
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8007f00 <TIM_OC1_SetConfig+0x10c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00f      	beq.n	8007e70 <TIM_OC1_SetConfig+0x7c>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a2c      	ldr	r2, [pc, #176]	@ (8007f04 <TIM_OC1_SetConfig+0x110>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <TIM_OC1_SetConfig+0x7c>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8007f08 <TIM_OC1_SetConfig+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d007      	beq.n	8007e70 <TIM_OC1_SetConfig+0x7c>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a2a      	ldr	r2, [pc, #168]	@ (8007f0c <TIM_OC1_SetConfig+0x118>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_OC1_SetConfig+0x7c>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a29      	ldr	r2, [pc, #164]	@ (8007f10 <TIM_OC1_SetConfig+0x11c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10c      	bne.n	8007e8a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f023 0308 	bic.w	r3, r3, #8
 8007e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f023 0304 	bic.w	r3, r3, #4
 8007e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <TIM_OC1_SetConfig+0x10c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00f      	beq.n	8007eb2 <TIM_OC1_SetConfig+0xbe>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1b      	ldr	r2, [pc, #108]	@ (8007f04 <TIM_OC1_SetConfig+0x110>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00b      	beq.n	8007eb2 <TIM_OC1_SetConfig+0xbe>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8007f08 <TIM_OC1_SetConfig+0x114>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d007      	beq.n	8007eb2 <TIM_OC1_SetConfig+0xbe>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a19      	ldr	r2, [pc, #100]	@ (8007f0c <TIM_OC1_SetConfig+0x118>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d003      	beq.n	8007eb2 <TIM_OC1_SetConfig+0xbe>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a18      	ldr	r2, [pc, #96]	@ (8007f10 <TIM_OC1_SetConfig+0x11c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d111      	bne.n	8007ed6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	621a      	str	r2, [r3, #32]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	fffeff8f 	.word	0xfffeff8f
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40010400 	.word	0x40010400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400
 8007f10:	40014800 	.word	0x40014800

08007f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f023 0210 	bic.w	r2, r3, #16
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	4b34      	ldr	r3, [pc, #208]	@ (8008010 <TIM_OC2_SetConfig+0xfc>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f023 0320 	bic.w	r3, r3, #32
 8007f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a29      	ldr	r2, [pc, #164]	@ (8008014 <TIM_OC2_SetConfig+0x100>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_OC2_SetConfig+0x68>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a28      	ldr	r2, [pc, #160]	@ (8008018 <TIM_OC2_SetConfig+0x104>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d10d      	bne.n	8007f98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8008014 <TIM_OC2_SetConfig+0x100>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00f      	beq.n	8007fc0 <TIM_OC2_SetConfig+0xac>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8008018 <TIM_OC2_SetConfig+0x104>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <TIM_OC2_SetConfig+0xac>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a1c      	ldr	r2, [pc, #112]	@ (800801c <TIM_OC2_SetConfig+0x108>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <TIM_OC2_SetConfig+0xac>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008020 <TIM_OC2_SetConfig+0x10c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_OC2_SetConfig+0xac>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a1a      	ldr	r2, [pc, #104]	@ (8008024 <TIM_OC2_SetConfig+0x110>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d113      	bne.n	8007fe8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	feff8fff 	.word	0xfeff8fff
 8008014:	40010000 	.word	0x40010000
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800

08008028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4b33      	ldr	r3, [pc, #204]	@ (8008120 <TIM_OC3_SetConfig+0xf8>)
 8008054:	4013      	ands	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	021b      	lsls	r3, r3, #8
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a28      	ldr	r2, [pc, #160]	@ (8008124 <TIM_OC3_SetConfig+0xfc>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d003      	beq.n	800808e <TIM_OC3_SetConfig+0x66>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a27      	ldr	r2, [pc, #156]	@ (8008128 <TIM_OC3_SetConfig+0x100>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d10d      	bne.n	80080aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	021b      	lsls	r3, r3, #8
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	4313      	orrs	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008124 <TIM_OC3_SetConfig+0xfc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00f      	beq.n	80080d2 <TIM_OC3_SetConfig+0xaa>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008128 <TIM_OC3_SetConfig+0x100>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <TIM_OC3_SetConfig+0xaa>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a1b      	ldr	r2, [pc, #108]	@ (800812c <TIM_OC3_SetConfig+0x104>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <TIM_OC3_SetConfig+0xaa>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008130 <TIM_OC3_SetConfig+0x108>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_OC3_SetConfig+0xaa>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <TIM_OC3_SetConfig+0x10c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d113      	bne.n	80080fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	621a      	str	r2, [r3, #32]
}
 8008114:	bf00      	nop
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	fffeff8f 	.word	0xfffeff8f
 8008124:	40010000 	.word	0x40010000
 8008128:	40010400 	.word	0x40010400
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800

08008138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4b24      	ldr	r3, [pc, #144]	@ (80081f4 <TIM_OC4_SetConfig+0xbc>)
 8008164:	4013      	ands	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800816e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	031b      	lsls	r3, r3, #12
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a19      	ldr	r2, [pc, #100]	@ (80081f8 <TIM_OC4_SetConfig+0xc0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_OC4_SetConfig+0x80>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a18      	ldr	r2, [pc, #96]	@ (80081fc <TIM_OC4_SetConfig+0xc4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC4_SetConfig+0x80>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a17      	ldr	r2, [pc, #92]	@ (8008200 <TIM_OC4_SetConfig+0xc8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC4_SetConfig+0x80>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a16      	ldr	r2, [pc, #88]	@ (8008204 <TIM_OC4_SetConfig+0xcc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC4_SetConfig+0x80>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a15      	ldr	r2, [pc, #84]	@ (8008208 <TIM_OC4_SetConfig+0xd0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d109      	bne.n	80081cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	019b      	lsls	r3, r3, #6
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	621a      	str	r2, [r3, #32]
}
 80081e6:	bf00      	nop
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	feff8fff 	.word	0xfeff8fff
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400
 8008200:	40014000 	.word	0x40014000
 8008204:	40014400 	.word	0x40014400
 8008208:	40014800 	.word	0x40014800

0800820c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4b21      	ldr	r3, [pc, #132]	@ (80082bc <TIM_OC5_SetConfig+0xb0>)
 8008238:	4013      	ands	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800824c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a18      	ldr	r2, [pc, #96]	@ (80082c0 <TIM_OC5_SetConfig+0xb4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_OC5_SetConfig+0x76>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a17      	ldr	r2, [pc, #92]	@ (80082c4 <TIM_OC5_SetConfig+0xb8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_OC5_SetConfig+0x76>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a16      	ldr	r2, [pc, #88]	@ (80082c8 <TIM_OC5_SetConfig+0xbc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_OC5_SetConfig+0x76>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a15      	ldr	r2, [pc, #84]	@ (80082cc <TIM_OC5_SetConfig+0xc0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_OC5_SetConfig+0x76>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a14      	ldr	r2, [pc, #80]	@ (80082d0 <TIM_OC5_SetConfig+0xc4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d109      	bne.n	8008296 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008288:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	621a      	str	r2, [r3, #32]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	fffeff8f 	.word	0xfffeff8f
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40010400 	.word	0x40010400
 80082c8:	40014000 	.word	0x40014000
 80082cc:	40014400 	.word	0x40014400
 80082d0:	40014800 	.word	0x40014800

080082d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4b22      	ldr	r3, [pc, #136]	@ (8008388 <TIM_OC6_SetConfig+0xb4>)
 8008300:	4013      	ands	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	051b      	lsls	r3, r3, #20
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a19      	ldr	r2, [pc, #100]	@ (800838c <TIM_OC6_SetConfig+0xb8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00f      	beq.n	800834c <TIM_OC6_SetConfig+0x78>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a18      	ldr	r2, [pc, #96]	@ (8008390 <TIM_OC6_SetConfig+0xbc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00b      	beq.n	800834c <TIM_OC6_SetConfig+0x78>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a17      	ldr	r2, [pc, #92]	@ (8008394 <TIM_OC6_SetConfig+0xc0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_OC6_SetConfig+0x78>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a16      	ldr	r2, [pc, #88]	@ (8008398 <TIM_OC6_SetConfig+0xc4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_OC6_SetConfig+0x78>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a15      	ldr	r2, [pc, #84]	@ (800839c <TIM_OC6_SetConfig+0xc8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d109      	bne.n	8008360 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008352:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	029b      	lsls	r3, r3, #10
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	621a      	str	r2, [r3, #32]
}
 800837a:	bf00      	nop
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	feff8fff 	.word	0xfeff8fff
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800

080083a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f023 0201 	bic.w	r2, r3, #1
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f023 030a 	bic.w	r3, r3, #10
 80083dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	621a      	str	r2, [r3, #32]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083fe:	b480      	push	{r7}
 8008400:	b087      	sub	sp, #28
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f023 0210 	bic.w	r2, r3, #16
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	031b      	lsls	r3, r3, #12
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800843a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <TIM_ITRx_SetConfig+0x38>)
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	f043 0307 	orr.w	r3, r3, #7
 8008482:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	609a      	str	r2, [r3, #8]
}
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	ffcfff8f 	.word	0xffcfff8f

0800849c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	021a      	lsls	r2, r3, #8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	431a      	orrs	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	609a      	str	r2, [r3, #8]
}
 80084d0:	bf00      	nop
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	2201      	movs	r2, #1
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1a      	ldr	r2, [r3, #32]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	43db      	mvns	r3, r3
 80084fe:	401a      	ands	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	fa01 f303 	lsl.w	r3, r1, r3
 8008514:	431a      	orrs	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	621a      	str	r2, [r3, #32]
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800853c:	2302      	movs	r3, #2
 800853e:	e06d      	b.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a30      	ldr	r2, [pc, #192]	@ (8008628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d004      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a2f      	ldr	r2, [pc, #188]	@ (800862c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d108      	bne.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800857a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800858c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a20      	ldr	r2, [pc, #128]	@ (8008628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d022      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b2:	d01d      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d018      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d013      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00e      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a15      	ldr	r2, [pc, #84]	@ (800862c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d009      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a16      	ldr	r2, [pc, #88]	@ (800863c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a15      	ldr	r2, [pc, #84]	@ (8008640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10c      	bne.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	40010000 	.word	0x40010000
 800862c:	40010400 	.word	0x40010400
 8008630:	40000400 	.word	0x40000400
 8008634:	40000800 	.word	0x40000800
 8008638:	40000c00 	.word	0x40000c00
 800863c:	40001800 	.word	0x40001800
 8008640:	40014000 	.word	0x40014000

08008644 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e042      	b.n	8008718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f9 ff07 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2224      	movs	r2, #36	@ 0x24
 80086ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fe80 	bl	80093d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f915 	bl	8008900 <UART_SetConfig>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e01b      	b.n	8008718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 feff 	bl	8009514 <UART_CheckIdleState>
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008736:	2b20      	cmp	r3, #32
 8008738:	d17b      	bne.n	8008832 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <HAL_UART_Transmit+0x26>
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e074      	b.n	8008834 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2221      	movs	r2, #33	@ 0x21
 8008756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800875a:	f7f9 ffc7 	bl	80026ec <HAL_GetTick>
 800875e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	88fa      	ldrh	r2, [r7, #6]
 8008764:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	88fa      	ldrh	r2, [r7, #6]
 800876c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008778:	d108      	bne.n	800878c <HAL_UART_Transmit+0x6c>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	61bb      	str	r3, [r7, #24]
 800878a:	e003      	b.n	8008794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008794:	e030      	b.n	80087f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	2180      	movs	r1, #128	@ 0x80
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 ff61 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e03d      	b.n	8008834 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10b      	bne.n	80087d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	3302      	adds	r3, #2
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	e007      	b.n	80087e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	781a      	ldrb	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	3301      	adds	r3, #1
 80087e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1c8      	bne.n	8008796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2200      	movs	r2, #0
 800880c:	2140      	movs	r1, #64	@ 0x40
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 ff2a 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2220      	movs	r2, #32
 800881e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e006      	b.n	8008834 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e000      	b.n	8008834 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008832:	2302      	movs	r3, #2
  }
}
 8008834:	4618      	mov	r0, r3
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008850:	2b20      	cmp	r3, #32
 8008852:	d137      	bne.n	80088c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <HAL_UART_Receive_IT+0x24>
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e030      	b.n	80088c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <HAL_UART_Receive_IT+0x94>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01f      	beq.n	80088b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d018      	beq.n	80088b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	613b      	str	r3, [r7, #16]
   return(result);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008896:	627b      	str	r3, [r7, #36]	@ 0x24
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	623b      	str	r3, [r7, #32]
 80088a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	6a3a      	ldr	r2, [r7, #32]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e6      	bne.n	8008882 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	461a      	mov	r2, r3
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 ff42 	bl	8009744 <UART_Start_Receive_IT>
 80088c0:	4603      	mov	r3, r0
 80088c2:	e000      	b.n	80088c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3728      	adds	r7, #40	@ 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	58000c00 	.word	0x58000c00

080088d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008904:	b092      	sub	sp, #72	@ 0x48
 8008906:	af00      	add	r7, sp, #0
 8008908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	431a      	orrs	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	431a      	orrs	r2, r3
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	4313      	orrs	r3, r2
 8008926:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4bbe      	ldr	r3, [pc, #760]	@ (8008c28 <UART_SetConfig+0x328>)
 8008930:	4013      	ands	r3, r2
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008938:	430b      	orrs	r3, r1
 800893a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4ab3      	ldr	r2, [pc, #716]	@ (8008c2c <UART_SetConfig+0x32c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008968:	4313      	orrs	r3, r2
 800896a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	4baf      	ldr	r3, [pc, #700]	@ (8008c30 <UART_SetConfig+0x330>)
 8008974:	4013      	ands	r3, r2
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800897c:	430b      	orrs	r3, r1
 800897e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	f023 010f 	bic.w	r1, r3, #15
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4aa6      	ldr	r2, [pc, #664]	@ (8008c34 <UART_SetConfig+0x334>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d177      	bne.n	8008a90 <UART_SetConfig+0x190>
 80089a0:	4ba5      	ldr	r3, [pc, #660]	@ (8008c38 <UART_SetConfig+0x338>)
 80089a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089a8:	2b28      	cmp	r3, #40	@ 0x28
 80089aa:	d86d      	bhi.n	8008a88 <UART_SetConfig+0x188>
 80089ac:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <UART_SetConfig+0xb4>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	08008a59 	.word	0x08008a59
 80089b8:	08008a89 	.word	0x08008a89
 80089bc:	08008a89 	.word	0x08008a89
 80089c0:	08008a89 	.word	0x08008a89
 80089c4:	08008a89 	.word	0x08008a89
 80089c8:	08008a89 	.word	0x08008a89
 80089cc:	08008a89 	.word	0x08008a89
 80089d0:	08008a89 	.word	0x08008a89
 80089d4:	08008a61 	.word	0x08008a61
 80089d8:	08008a89 	.word	0x08008a89
 80089dc:	08008a89 	.word	0x08008a89
 80089e0:	08008a89 	.word	0x08008a89
 80089e4:	08008a89 	.word	0x08008a89
 80089e8:	08008a89 	.word	0x08008a89
 80089ec:	08008a89 	.word	0x08008a89
 80089f0:	08008a89 	.word	0x08008a89
 80089f4:	08008a69 	.word	0x08008a69
 80089f8:	08008a89 	.word	0x08008a89
 80089fc:	08008a89 	.word	0x08008a89
 8008a00:	08008a89 	.word	0x08008a89
 8008a04:	08008a89 	.word	0x08008a89
 8008a08:	08008a89 	.word	0x08008a89
 8008a0c:	08008a89 	.word	0x08008a89
 8008a10:	08008a89 	.word	0x08008a89
 8008a14:	08008a71 	.word	0x08008a71
 8008a18:	08008a89 	.word	0x08008a89
 8008a1c:	08008a89 	.word	0x08008a89
 8008a20:	08008a89 	.word	0x08008a89
 8008a24:	08008a89 	.word	0x08008a89
 8008a28:	08008a89 	.word	0x08008a89
 8008a2c:	08008a89 	.word	0x08008a89
 8008a30:	08008a89 	.word	0x08008a89
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a89 	.word	0x08008a89
 8008a3c:	08008a89 	.word	0x08008a89
 8008a40:	08008a89 	.word	0x08008a89
 8008a44:	08008a89 	.word	0x08008a89
 8008a48:	08008a89 	.word	0x08008a89
 8008a4c:	08008a89 	.word	0x08008a89
 8008a50:	08008a89 	.word	0x08008a89
 8008a54:	08008a81 	.word	0x08008a81
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e222      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a60:	2304      	movs	r3, #4
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e21e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e21a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e216      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a78:	2320      	movs	r3, #32
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e212      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a80:	2340      	movs	r3, #64	@ 0x40
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e20e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e20a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a69      	ldr	r2, [pc, #420]	@ (8008c3c <UART_SetConfig+0x33c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d130      	bne.n	8008afc <UART_SetConfig+0x1fc>
 8008a9a:	4b67      	ldr	r3, [pc, #412]	@ (8008c38 <UART_SetConfig+0x338>)
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d826      	bhi.n	8008af4 <UART_SetConfig+0x1f4>
 8008aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x1ac>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008ac5 	.word	0x08008ac5
 8008ab0:	08008acd 	.word	0x08008acd
 8008ab4:	08008ad5 	.word	0x08008ad5
 8008ab8:	08008add 	.word	0x08008add
 8008abc:	08008ae5 	.word	0x08008ae5
 8008ac0:	08008aed 	.word	0x08008aed
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e1ec      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008acc:	2304      	movs	r3, #4
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e1e8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ad4:	2308      	movs	r3, #8
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e1e4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008adc:	2310      	movs	r3, #16
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e1e0      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e1dc      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008aec:	2340      	movs	r3, #64	@ 0x40
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e1d8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008af4:	2380      	movs	r3, #128	@ 0x80
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e1d4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a4f      	ldr	r2, [pc, #316]	@ (8008c40 <UART_SetConfig+0x340>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d130      	bne.n	8008b68 <UART_SetConfig+0x268>
 8008b06:	4b4c      	ldr	r3, [pc, #304]	@ (8008c38 <UART_SetConfig+0x338>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d826      	bhi.n	8008b60 <UART_SetConfig+0x260>
 8008b12:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <UART_SetConfig+0x218>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008b31 	.word	0x08008b31
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	08008b41 	.word	0x08008b41
 8008b24:	08008b49 	.word	0x08008b49
 8008b28:	08008b51 	.word	0x08008b51
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b36:	e1b6      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b38:	2304      	movs	r3, #4
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e1b2      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b40:	2308      	movs	r3, #8
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e1ae      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b48:	2310      	movs	r3, #16
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e1aa      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b50:	2320      	movs	r3, #32
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e1a6      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b58:	2340      	movs	r3, #64	@ 0x40
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e1a2      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b60:	2380      	movs	r3, #128	@ 0x80
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e19e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a35      	ldr	r2, [pc, #212]	@ (8008c44 <UART_SetConfig+0x344>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d130      	bne.n	8008bd4 <UART_SetConfig+0x2d4>
 8008b72:	4b31      	ldr	r3, [pc, #196]	@ (8008c38 <UART_SetConfig+0x338>)
 8008b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	d826      	bhi.n	8008bcc <UART_SetConfig+0x2cc>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <UART_SetConfig+0x284>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008b9d 	.word	0x08008b9d
 8008b88:	08008ba5 	.word	0x08008ba5
 8008b8c:	08008bad 	.word	0x08008bad
 8008b90:	08008bb5 	.word	0x08008bb5
 8008b94:	08008bbd 	.word	0x08008bbd
 8008b98:	08008bc5 	.word	0x08008bc5
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e180      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ba4:	2304      	movs	r3, #4
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e17c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bac:	2308      	movs	r3, #8
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e178      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bb4:	2310      	movs	r3, #16
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e174      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e170      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bc4:	2340      	movs	r3, #64	@ 0x40
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e16c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bcc:	2380      	movs	r3, #128	@ 0x80
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e168      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c48 <UART_SetConfig+0x348>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d142      	bne.n	8008c64 <UART_SetConfig+0x364>
 8008bde:	4b16      	ldr	r3, [pc, #88]	@ (8008c38 <UART_SetConfig+0x338>)
 8008be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b05      	cmp	r3, #5
 8008be8:	d838      	bhi.n	8008c5c <UART_SetConfig+0x35c>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <UART_SetConfig+0x2f0>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c09 	.word	0x08008c09
 8008bf4:	08008c11 	.word	0x08008c11
 8008bf8:	08008c19 	.word	0x08008c19
 8008bfc:	08008c21 	.word	0x08008c21
 8008c00:	08008c4d 	.word	0x08008c4d
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e14a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c10:	2304      	movs	r3, #4
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e146      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e142      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c20:	2310      	movs	r3, #16
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e13e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c28:	cfff69f3 	.word	0xcfff69f3
 8008c2c:	58000c00 	.word	0x58000c00
 8008c30:	11fff4ff 	.word	0x11fff4ff
 8008c34:	40011000 	.word	0x40011000
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	40004400 	.word	0x40004400
 8008c40:	40004800 	.word	0x40004800
 8008c44:	40004c00 	.word	0x40004c00
 8008c48:	40005000 	.word	0x40005000
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e128      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c54:	2340      	movs	r3, #64	@ 0x40
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e124      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c5c:	2380      	movs	r3, #128	@ 0x80
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e120      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4acb      	ldr	r2, [pc, #812]	@ (8008f98 <UART_SetConfig+0x698>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d176      	bne.n	8008d5c <UART_SetConfig+0x45c>
 8008c6e:	4bcb      	ldr	r3, [pc, #812]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c76:	2b28      	cmp	r3, #40	@ 0x28
 8008c78:	d86c      	bhi.n	8008d54 <UART_SetConfig+0x454>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <UART_SetConfig+0x380>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008d25 	.word	0x08008d25
 8008c84:	08008d55 	.word	0x08008d55
 8008c88:	08008d55 	.word	0x08008d55
 8008c8c:	08008d55 	.word	0x08008d55
 8008c90:	08008d55 	.word	0x08008d55
 8008c94:	08008d55 	.word	0x08008d55
 8008c98:	08008d55 	.word	0x08008d55
 8008c9c:	08008d55 	.word	0x08008d55
 8008ca0:	08008d2d 	.word	0x08008d2d
 8008ca4:	08008d55 	.word	0x08008d55
 8008ca8:	08008d55 	.word	0x08008d55
 8008cac:	08008d55 	.word	0x08008d55
 8008cb0:	08008d55 	.word	0x08008d55
 8008cb4:	08008d55 	.word	0x08008d55
 8008cb8:	08008d55 	.word	0x08008d55
 8008cbc:	08008d55 	.word	0x08008d55
 8008cc0:	08008d35 	.word	0x08008d35
 8008cc4:	08008d55 	.word	0x08008d55
 8008cc8:	08008d55 	.word	0x08008d55
 8008ccc:	08008d55 	.word	0x08008d55
 8008cd0:	08008d55 	.word	0x08008d55
 8008cd4:	08008d55 	.word	0x08008d55
 8008cd8:	08008d55 	.word	0x08008d55
 8008cdc:	08008d55 	.word	0x08008d55
 8008ce0:	08008d3d 	.word	0x08008d3d
 8008ce4:	08008d55 	.word	0x08008d55
 8008ce8:	08008d55 	.word	0x08008d55
 8008cec:	08008d55 	.word	0x08008d55
 8008cf0:	08008d55 	.word	0x08008d55
 8008cf4:	08008d55 	.word	0x08008d55
 8008cf8:	08008d55 	.word	0x08008d55
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d45 	.word	0x08008d45
 8008d04:	08008d55 	.word	0x08008d55
 8008d08:	08008d55 	.word	0x08008d55
 8008d0c:	08008d55 	.word	0x08008d55
 8008d10:	08008d55 	.word	0x08008d55
 8008d14:	08008d55 	.word	0x08008d55
 8008d18:	08008d55 	.word	0x08008d55
 8008d1c:	08008d55 	.word	0x08008d55
 8008d20:	08008d4d 	.word	0x08008d4d
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e0bc      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e0b8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d34:	2308      	movs	r3, #8
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e0b4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e0b0      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d44:	2320      	movs	r3, #32
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e0ac      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d4c:	2340      	movs	r3, #64	@ 0x40
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e0a8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d54:	2380      	movs	r3, #128	@ 0x80
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e0a4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a8f      	ldr	r2, [pc, #572]	@ (8008fa0 <UART_SetConfig+0x6a0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d130      	bne.n	8008dc8 <UART_SetConfig+0x4c8>
 8008d66:	4b8d      	ldr	r3, [pc, #564]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b05      	cmp	r3, #5
 8008d70:	d826      	bhi.n	8008dc0 <UART_SetConfig+0x4c0>
 8008d72:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <UART_SetConfig+0x478>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d91 	.word	0x08008d91
 8008d7c:	08008d99 	.word	0x08008d99
 8008d80:	08008da1 	.word	0x08008da1
 8008d84:	08008da9 	.word	0x08008da9
 8008d88:	08008db1 	.word	0x08008db1
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	2300      	movs	r3, #0
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e086      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e082      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008da0:	2308      	movs	r3, #8
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e07e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e07a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008db0:	2320      	movs	r3, #32
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e076      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008db8:	2340      	movs	r3, #64	@ 0x40
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e072      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008dc0:	2380      	movs	r3, #128	@ 0x80
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e06e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a75      	ldr	r2, [pc, #468]	@ (8008fa4 <UART_SetConfig+0x6a4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d130      	bne.n	8008e34 <UART_SetConfig+0x534>
 8008dd2:	4b72      	ldr	r3, [pc, #456]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d826      	bhi.n	8008e2c <UART_SetConfig+0x52c>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <UART_SetConfig+0x4e4>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008dfd 	.word	0x08008dfd
 8008de8:	08008e05 	.word	0x08008e05
 8008dec:	08008e0d 	.word	0x08008e0d
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e050      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e04c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e048      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e044      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e040      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e24:	2340      	movs	r3, #64	@ 0x40
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e03c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e2c:	2380      	movs	r3, #128	@ 0x80
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e038      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a5b      	ldr	r2, [pc, #364]	@ (8008fa8 <UART_SetConfig+0x6a8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d130      	bne.n	8008ea0 <UART_SetConfig+0x5a0>
 8008e3e:	4b57      	ldr	r3, [pc, #348]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d826      	bhi.n	8008e98 <UART_SetConfig+0x598>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <UART_SetConfig+0x550>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008e69 	.word	0x08008e69
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	2302      	movs	r3, #2
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e01a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e016      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e012      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e00e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e00a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e90:	2340      	movs	r3, #64	@ 0x40
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e006      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e98:	2380      	movs	r3, #128	@ 0x80
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e002      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8008fa8 <UART_SetConfig+0x6a8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	f040 80f8 	bne.w	80090a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	dc46      	bgt.n	8008f48 <UART_SetConfig+0x648>
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	f2c0 8082 	blt.w	8008fc4 <UART_SetConfig+0x6c4>
 8008ec0:	3b02      	subs	r3, #2
 8008ec2:	2b1e      	cmp	r3, #30
 8008ec4:	d87e      	bhi.n	8008fc4 <UART_SetConfig+0x6c4>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <UART_SetConfig+0x5cc>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f4f 	.word	0x08008f4f
 8008ed0:	08008fc5 	.word	0x08008fc5
 8008ed4:	08008f57 	.word	0x08008f57
 8008ed8:	08008fc5 	.word	0x08008fc5
 8008edc:	08008fc5 	.word	0x08008fc5
 8008ee0:	08008fc5 	.word	0x08008fc5
 8008ee4:	08008f67 	.word	0x08008f67
 8008ee8:	08008fc5 	.word	0x08008fc5
 8008eec:	08008fc5 	.word	0x08008fc5
 8008ef0:	08008fc5 	.word	0x08008fc5
 8008ef4:	08008fc5 	.word	0x08008fc5
 8008ef8:	08008fc5 	.word	0x08008fc5
 8008efc:	08008fc5 	.word	0x08008fc5
 8008f00:	08008fc5 	.word	0x08008fc5
 8008f04:	08008f77 	.word	0x08008f77
 8008f08:	08008fc5 	.word	0x08008fc5
 8008f0c:	08008fc5 	.word	0x08008fc5
 8008f10:	08008fc5 	.word	0x08008fc5
 8008f14:	08008fc5 	.word	0x08008fc5
 8008f18:	08008fc5 	.word	0x08008fc5
 8008f1c:	08008fc5 	.word	0x08008fc5
 8008f20:	08008fc5 	.word	0x08008fc5
 8008f24:	08008fc5 	.word	0x08008fc5
 8008f28:	08008fc5 	.word	0x08008fc5
 8008f2c:	08008fc5 	.word	0x08008fc5
 8008f30:	08008fc5 	.word	0x08008fc5
 8008f34:	08008fc5 	.word	0x08008fc5
 8008f38:	08008fc5 	.word	0x08008fc5
 8008f3c:	08008fc5 	.word	0x08008fc5
 8008f40:	08008fc5 	.word	0x08008fc5
 8008f44:	08008fb7 	.word	0x08008fb7
 8008f48:	2b40      	cmp	r3, #64	@ 0x40
 8008f4a:	d037      	beq.n	8008fbc <UART_SetConfig+0x6bc>
 8008f4c:	e03a      	b.n	8008fc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f4e:	f7fd fd7d 	bl	8006a4c <HAL_RCCEx_GetD3PCLK1Freq>
 8008f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f54:	e03c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fd fd8c 	bl	8006a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f64:	e034      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f66:	f107 0318 	add.w	r3, r7, #24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd fed8 	bl	8006d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	e02c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f76:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d016      	beq.n	8008fb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f82:	4b06      	ldr	r3, [pc, #24]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	4a07      	ldr	r2, [pc, #28]	@ (8008fac <UART_SetConfig+0x6ac>)
 8008f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f94:	e01c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
 8008f96:	bf00      	nop
 8008f98:	40011400 	.word	0x40011400
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	40007800 	.word	0x40007800
 8008fa4:	40007c00 	.word	0x40007c00
 8008fa8:	58000c00 	.word	0x58000c00
 8008fac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008fb0:	4b9d      	ldr	r3, [pc, #628]	@ (8009228 <UART_SetConfig+0x928>)
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb4:	e00c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800922c <UART_SetConfig+0x92c>)
 8008fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fba:	e009      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	e005      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008fce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 81de 	beq.w	8009394 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fdc:	4a94      	ldr	r2, [pc, #592]	@ (8009230 <UART_SetConfig+0x930>)
 8008fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	4413      	add	r3, r2
 8008ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d305      	bcc.n	8009008 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009004:	429a      	cmp	r2, r3
 8009006:	d903      	bls.n	8009010 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800900e:	e1c1      	b.n	8009394 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009012:	2200      	movs	r2, #0
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	60fa      	str	r2, [r7, #12]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	4a84      	ldr	r2, [pc, #528]	@ (8009230 <UART_SetConfig+0x930>)
 800901e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009022:	b29b      	uxth	r3, r3
 8009024:	2200      	movs	r2, #0
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009032:	f7f7 f9ad 	bl	8000390 <__aeabi_uldivmod>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4610      	mov	r0, r2
 800903c:	4619      	mov	r1, r3
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	020b      	lsls	r3, r1, #8
 8009048:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800904c:	0202      	lsls	r2, r0, #8
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	6849      	ldr	r1, [r1, #4]
 8009052:	0849      	lsrs	r1, r1, #1
 8009054:	2000      	movs	r0, #0
 8009056:	460c      	mov	r4, r1
 8009058:	4605      	mov	r5, r0
 800905a:	eb12 0804 	adds.w	r8, r2, r4
 800905e:	eb43 0905 	adc.w	r9, r3, r5
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	469a      	mov	sl, r3
 800906a:	4693      	mov	fp, r2
 800906c:	4652      	mov	r2, sl
 800906e:	465b      	mov	r3, fp
 8009070:	4640      	mov	r0, r8
 8009072:	4649      	mov	r1, r9
 8009074:	f7f7 f98c 	bl	8000390 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4613      	mov	r3, r2
 800907e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009086:	d308      	bcc.n	800909a <UART_SetConfig+0x79a>
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800908e:	d204      	bcs.n	800909a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009096:	60da      	str	r2, [r3, #12]
 8009098:	e17c      	b.n	8009394 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090a0:	e178      	b.n	8009394 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090aa:	f040 80c5 	bne.w	8009238 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80090ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	dc48      	bgt.n	8009148 <UART_SetConfig+0x848>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	db7b      	blt.n	80091b2 <UART_SetConfig+0x8b2>
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d879      	bhi.n	80091b2 <UART_SetConfig+0x8b2>
 80090be:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <UART_SetConfig+0x7c4>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	0800914f 	.word	0x0800914f
 80090c8:	08009157 	.word	0x08009157
 80090cc:	080091b3 	.word	0x080091b3
 80090d0:	080091b3 	.word	0x080091b3
 80090d4:	0800915f 	.word	0x0800915f
 80090d8:	080091b3 	.word	0x080091b3
 80090dc:	080091b3 	.word	0x080091b3
 80090e0:	080091b3 	.word	0x080091b3
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	080091b3 	.word	0x080091b3
 80090ec:	080091b3 	.word	0x080091b3
 80090f0:	080091b3 	.word	0x080091b3
 80090f4:	080091b3 	.word	0x080091b3
 80090f8:	080091b3 	.word	0x080091b3
 80090fc:	080091b3 	.word	0x080091b3
 8009100:	080091b3 	.word	0x080091b3
 8009104:	0800917f 	.word	0x0800917f
 8009108:	080091b3 	.word	0x080091b3
 800910c:	080091b3 	.word	0x080091b3
 8009110:	080091b3 	.word	0x080091b3
 8009114:	080091b3 	.word	0x080091b3
 8009118:	080091b3 	.word	0x080091b3
 800911c:	080091b3 	.word	0x080091b3
 8009120:	080091b3 	.word	0x080091b3
 8009124:	080091b3 	.word	0x080091b3
 8009128:	080091b3 	.word	0x080091b3
 800912c:	080091b3 	.word	0x080091b3
 8009130:	080091b3 	.word	0x080091b3
 8009134:	080091b3 	.word	0x080091b3
 8009138:	080091b3 	.word	0x080091b3
 800913c:	080091b3 	.word	0x080091b3
 8009140:	080091b3 	.word	0x080091b3
 8009144:	080091a5 	.word	0x080091a5
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	d02e      	beq.n	80091aa <UART_SetConfig+0x8aa>
 800914c:	e031      	b.n	80091b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914e:	f7fc fa47 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 8009152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009154:	e033      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009156:	f7fc fa59 	bl	800560c <HAL_RCC_GetPCLK2Freq>
 800915a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800915c:	e02f      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800915e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009162:	4618      	mov	r0, r3
 8009164:	f7fd fc88 	bl	8006a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916c:	e027      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916e:	f107 0318 	add.w	r3, r7, #24
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fdd4 	bl	8006d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e01f      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917e:	4b2d      	ldr	r3, [pc, #180]	@ (8009234 <UART_SetConfig+0x934>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800918a:	4b2a      	ldr	r3, [pc, #168]	@ (8009234 <UART_SetConfig+0x934>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	08db      	lsrs	r3, r3, #3
 8009190:	f003 0303 	and.w	r3, r3, #3
 8009194:	4a24      	ldr	r2, [pc, #144]	@ (8009228 <UART_SetConfig+0x928>)
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800919c:	e00f      	b.n	80091be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800919e:	4b22      	ldr	r3, [pc, #136]	@ (8009228 <UART_SetConfig+0x928>)
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a2:	e00c      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091a4:	4b21      	ldr	r3, [pc, #132]	@ (800922c <UART_SetConfig+0x92c>)
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a8:	e009      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b0:	e005      	b.n	80091be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80e7 	beq.w	8009394 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	4a19      	ldr	r2, [pc, #100]	@ (8009230 <UART_SetConfig+0x930>)
 80091cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d0:	461a      	mov	r2, r3
 80091d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d8:	005a      	lsls	r2, r3, #1
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	441a      	add	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	d916      	bls.n	8009220 <UART_SetConfig+0x920>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f8:	d212      	bcs.n	8009220 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f023 030f 	bic.w	r3, r3, #15
 8009202:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	b29a      	uxth	r2, r3
 8009210:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009212:	4313      	orrs	r3, r2
 8009214:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	e0b9      	b.n	8009394 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009226:	e0b5      	b.n	8009394 <UART_SetConfig+0xa94>
 8009228:	03d09000 	.word	0x03d09000
 800922c:	003d0900 	.word	0x003d0900
 8009230:	0800b40c 	.word	0x0800b40c
 8009234:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009238:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800923c:	2b20      	cmp	r3, #32
 800923e:	dc49      	bgt.n	80092d4 <UART_SetConfig+0x9d4>
 8009240:	2b00      	cmp	r3, #0
 8009242:	db7c      	blt.n	800933e <UART_SetConfig+0xa3e>
 8009244:	2b20      	cmp	r3, #32
 8009246:	d87a      	bhi.n	800933e <UART_SetConfig+0xa3e>
 8009248:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <UART_SetConfig+0x950>)
 800924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924e:	bf00      	nop
 8009250:	080092db 	.word	0x080092db
 8009254:	080092e3 	.word	0x080092e3
 8009258:	0800933f 	.word	0x0800933f
 800925c:	0800933f 	.word	0x0800933f
 8009260:	080092eb 	.word	0x080092eb
 8009264:	0800933f 	.word	0x0800933f
 8009268:	0800933f 	.word	0x0800933f
 800926c:	0800933f 	.word	0x0800933f
 8009270:	080092fb 	.word	0x080092fb
 8009274:	0800933f 	.word	0x0800933f
 8009278:	0800933f 	.word	0x0800933f
 800927c:	0800933f 	.word	0x0800933f
 8009280:	0800933f 	.word	0x0800933f
 8009284:	0800933f 	.word	0x0800933f
 8009288:	0800933f 	.word	0x0800933f
 800928c:	0800933f 	.word	0x0800933f
 8009290:	0800930b 	.word	0x0800930b
 8009294:	0800933f 	.word	0x0800933f
 8009298:	0800933f 	.word	0x0800933f
 800929c:	0800933f 	.word	0x0800933f
 80092a0:	0800933f 	.word	0x0800933f
 80092a4:	0800933f 	.word	0x0800933f
 80092a8:	0800933f 	.word	0x0800933f
 80092ac:	0800933f 	.word	0x0800933f
 80092b0:	0800933f 	.word	0x0800933f
 80092b4:	0800933f 	.word	0x0800933f
 80092b8:	0800933f 	.word	0x0800933f
 80092bc:	0800933f 	.word	0x0800933f
 80092c0:	0800933f 	.word	0x0800933f
 80092c4:	0800933f 	.word	0x0800933f
 80092c8:	0800933f 	.word	0x0800933f
 80092cc:	0800933f 	.word	0x0800933f
 80092d0:	08009331 	.word	0x08009331
 80092d4:	2b40      	cmp	r3, #64	@ 0x40
 80092d6:	d02e      	beq.n	8009336 <UART_SetConfig+0xa36>
 80092d8:	e031      	b.n	800933e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092da:	f7fc f981 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 80092de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092e0:	e033      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092e2:	f7fc f993 	bl	800560c <HAL_RCC_GetPCLK2Freq>
 80092e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092e8:	e02f      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fd fbc2 	bl	8006a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f8:	e027      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092fa:	f107 0318 	add.w	r3, r7, #24
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fd fd0e 	bl	8006d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009308:	e01f      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800930a:	4b2d      	ldr	r3, [pc, #180]	@ (80093c0 <UART_SetConfig+0xac0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009316:	4b2a      	ldr	r3, [pc, #168]	@ (80093c0 <UART_SetConfig+0xac0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	08db      	lsrs	r3, r3, #3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	4a28      	ldr	r2, [pc, #160]	@ (80093c4 <UART_SetConfig+0xac4>)
 8009322:	fa22 f303 	lsr.w	r3, r2, r3
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009328:	e00f      	b.n	800934a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800932a:	4b26      	ldr	r3, [pc, #152]	@ (80093c4 <UART_SetConfig+0xac4>)
 800932c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932e:	e00c      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009330:	4b25      	ldr	r3, [pc, #148]	@ (80093c8 <UART_SetConfig+0xac8>)
 8009332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009334:	e009      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800933c:	e005      	b.n	800934a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009348:	bf00      	nop
    }

    if (pclk != 0U)
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d021      	beq.n	8009394 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	4a1d      	ldr	r2, [pc, #116]	@ (80093cc <UART_SetConfig+0xacc>)
 8009356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800935a:	461a      	mov	r2, r3
 800935c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800935e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	441a      	add	r2, r3
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009372:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	2b0f      	cmp	r3, #15
 8009378:	d909      	bls.n	800938e <UART_SetConfig+0xa8e>
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009380:	d205      	bcs.n	800938e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	b29a      	uxth	r2, r3
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60da      	str	r2, [r3, #12]
 800938c:	e002      	b.n	8009394 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2200      	movs	r2, #0
 80093a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2200      	movs	r2, #0
 80093ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3748      	adds	r7, #72	@ 0x48
 80093b8:	46bd      	mov	sp, r7
 80093ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
 80093c4:	03d09000 	.word	0x03d09000
 80093c8:	003d0900 	.word	0x003d0900
 80093cc:	0800b40c 	.word	0x0800b40c

080093d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	f003 0308 	and.w	r3, r3, #8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00a      	beq.n	800943e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009486:	f003 0320 	and.w	r3, r3, #32
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ce:	d10a      	bne.n	80094e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b098      	sub	sp, #96	@ 0x60
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009524:	f7f9 f8e2 	bl	80026ec <HAL_GetTick>
 8009528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d12f      	bne.n	8009598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009540:	2200      	movs	r2, #0
 8009542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f88e 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d022      	beq.n	8009598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009566:	653b      	str	r3, [r7, #80]	@ 0x50
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009570:	647b      	str	r3, [r7, #68]	@ 0x44
 8009572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e6      	bne.n	8009552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e063      	b.n	8009660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d149      	bne.n	800963a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ae:	2200      	movs	r2, #0
 80095b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f857 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d03c      	beq.n	800963a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	623b      	str	r3, [r7, #32]
   return(result);
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095de:	633b      	str	r3, [r7, #48]	@ 0x30
 80095e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	60fb      	str	r3, [r7, #12]
   return(result);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009612:	61fa      	str	r2, [r7, #28]
 8009614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	69b9      	ldr	r1, [r7, #24]
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	617b      	str	r3, [r7, #20]
   return(result);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e012      	b.n	8009660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3758      	adds	r7, #88	@ 0x58
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009678:	e04f      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d04b      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009682:	f7f9 f833 	bl	80026ec <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	429a      	cmp	r2, r3
 8009690:	d302      	bcc.n	8009698 <UART_WaitOnFlagUntilTimeout+0x30>
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e04e      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d037      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b80      	cmp	r3, #128	@ 0x80
 80096ae:	d034      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b40      	cmp	r3, #64	@ 0x40
 80096b4:	d031      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d110      	bne.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2208      	movs	r2, #8
 80096ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f95b 	bl	8009988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2208      	movs	r2, #8
 80096d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e029      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f4:	d111      	bne.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f941 	bl	8009988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e00f      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69da      	ldr	r2, [r3, #28]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4013      	ands	r3, r2
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d0a0      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009744:	b480      	push	{r7}
 8009746:	b0a3      	sub	sp, #140	@ 0x8c
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	88fa      	ldrh	r2, [r7, #6]
 800975c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	88fa      	ldrh	r2, [r7, #6]
 8009764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009776:	d10e      	bne.n	8009796 <UART_Start_Receive_IT+0x52>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <UART_Start_Receive_IT+0x48>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009786:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800978a:	e02d      	b.n	80097e8 <UART_Start_Receive_IT+0xa4>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	22ff      	movs	r2, #255	@ 0xff
 8009790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009794:	e028      	b.n	80097e8 <UART_Start_Receive_IT+0xa4>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10d      	bne.n	80097ba <UART_Start_Receive_IT+0x76>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d104      	bne.n	80097b0 <UART_Start_Receive_IT+0x6c>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	22ff      	movs	r2, #255	@ 0xff
 80097aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097ae:	e01b      	b.n	80097e8 <UART_Start_Receive_IT+0xa4>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	227f      	movs	r2, #127	@ 0x7f
 80097b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097b8:	e016      	b.n	80097e8 <UART_Start_Receive_IT+0xa4>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c2:	d10d      	bne.n	80097e0 <UART_Start_Receive_IT+0x9c>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <UART_Start_Receive_IT+0x92>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	227f      	movs	r2, #127	@ 0x7f
 80097d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097d4:	e008      	b.n	80097e8 <UART_Start_Receive_IT+0xa4>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	223f      	movs	r2, #63	@ 0x3f
 80097da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097de:	e003      	b.n	80097e8 <UART_Start_Receive_IT+0xa4>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2222      	movs	r2, #34	@ 0x22
 80097f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800981c:	673a      	str	r2, [r7, #112]	@ 0x70
 800981e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009822:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800982a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e3      	bne.n	80097f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009838:	d14f      	bne.n	80098da <UART_Start_Receive_IT+0x196>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009840:	88fa      	ldrh	r2, [r7, #6]
 8009842:	429a      	cmp	r2, r3
 8009844:	d349      	bcc.n	80098da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800984e:	d107      	bne.n	8009860 <UART_Start_Receive_IT+0x11c>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4a47      	ldr	r2, [pc, #284]	@ (8009978 <UART_Start_Receive_IT+0x234>)
 800985c:	675a      	str	r2, [r3, #116]	@ 0x74
 800985e:	e002      	b.n	8009866 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a46      	ldr	r2, [pc, #280]	@ (800997c <UART_Start_Receive_IT+0x238>)
 8009864:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d01a      	beq.n	80098a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800987c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800987e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009882:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009892:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009896:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800989e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e4      	bne.n	800986e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3308      	adds	r3, #8
 80098aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80098c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80098d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e5      	bne.n	80098a4 <UART_Start_Receive_IT+0x160>
 80098d8:	e046      	b.n	8009968 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e2:	d107      	bne.n	80098f4 <UART_Start_Receive_IT+0x1b0>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d103      	bne.n	80098f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a24      	ldr	r2, [pc, #144]	@ (8009980 <UART_Start_Receive_IT+0x23c>)
 80098f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80098f2:	e002      	b.n	80098fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4a23      	ldr	r2, [pc, #140]	@ (8009984 <UART_Start_Receive_IT+0x240>)
 80098f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d019      	beq.n	8009936 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009916:	677b      	str	r3, [r7, #116]	@ 0x74
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
 8009922:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800992e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <UART_Start_Receive_IT+0x1be>
 8009934:	e018      	b.n	8009968 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	613b      	str	r3, [r7, #16]
   return(result);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f043 0320 	orr.w	r3, r3, #32
 800994a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009954:	623b      	str	r3, [r7, #32]
 8009956:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	69f9      	ldr	r1, [r7, #28]
 800995a:	6a3a      	ldr	r2, [r7, #32]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	61bb      	str	r3, [r7, #24]
   return(result);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e6      	bne.n	8009936 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	378c      	adds	r7, #140	@ 0x8c
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	0800a125 	.word	0x0800a125
 800997c:	08009dc5 	.word	0x08009dc5
 8009980:	08009c0d 	.word	0x08009c0d
 8009984:	08009a55 	.word	0x08009a55

08009988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b095      	sub	sp, #84	@ 0x54
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80099b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e6      	bne.n	8009990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3308      	adds	r3, #8
 80099c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a50 <UART_EndRxTransfer+0xc8>)
 80099d6:	4013      	ands	r3, r2
 80099d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3308      	adds	r3, #8
 80099e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e5      	bne.n	80099c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d118      	bne.n	8009a30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f023 0310 	bic.w	r3, r3, #16
 8009a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1c:	61bb      	str	r3, [r7, #24]
 8009a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	6979      	ldr	r1, [r7, #20]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	613b      	str	r3, [r7, #16]
   return(result);
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e6      	bne.n	80099fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a44:	bf00      	nop
 8009a46:	3754      	adds	r7, #84	@ 0x54
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	effffffe 	.word	0xeffffffe

08009a54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b09c      	sub	sp, #112	@ 0x70
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a6c:	2b22      	cmp	r3, #34	@ 0x22
 8009a6e:	f040 80be 	bne.w	8009bee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009a80:	b2d9      	uxtb	r1, r3
 8009a82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f040 80a1 	bne.w	8009bfe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ada:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009adc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e6      	bne.n	8009abc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b00:	f023 0301 	bic.w	r3, r3, #1
 8009b04:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e5      	bne.n	8009aee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a33      	ldr	r2, [pc, #204]	@ (8009c08 <UART_RxISR_8BIT+0x1b4>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d01f      	beq.n	8009b80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d018      	beq.n	8009b80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e6      	bne.n	8009b4e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d12e      	bne.n	8009be6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0310 	bic.w	r3, r3, #16
 8009ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	69b9      	ldr	r1, [r7, #24]
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e6      	bne.n	8009b8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0310 	and.w	r3, r3, #16
 8009bca:	2b10      	cmp	r3, #16
 8009bcc:	d103      	bne.n	8009bd6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fe fe82 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be4:	e00b      	b.n	8009bfe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7f8 fbfa 	bl	80023e0 <HAL_UART_RxCpltCallback>
}
 8009bec:	e007      	b.n	8009bfe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0208 	orr.w	r2, r2, #8
 8009bfc:	619a      	str	r2, [r3, #24]
}
 8009bfe:	bf00      	nop
 8009c00:	3770      	adds	r7, #112	@ 0x70
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	58000c00 	.word	0x58000c00

08009c0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b09c      	sub	sp, #112	@ 0x70
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c24:	2b22      	cmp	r3, #34	@ 0x22
 8009c26:	f040 80be 	bne.w	8009da6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009c3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009c42:	4013      	ands	r3, r2
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4e:	1c9a      	adds	r2, r3, #2
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f040 80a1 	bne.w	8009db6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c88:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e6      	bne.n	8009c74 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb8:	f023 0301 	bic.w	r3, r3, #1
 8009cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e5      	bne.n	8009ca6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a33      	ldr	r2, [pc, #204]	@ (8009dc0 <UART_RxISR_16BIT+0x1b4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d01f      	beq.n	8009d38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d018      	beq.n	8009d38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	e853 3f00 	ldrex	r3, [r3]
 8009d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	461a      	mov	r2, r3
 8009d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d2c:	e841 2300 	strex	r3, r2, [r1]
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e6      	bne.n	8009d06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d12e      	bne.n	8009d9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f023 0310 	bic.w	r3, r3, #16
 8009d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d64:	61bb      	str	r3, [r7, #24]
 8009d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6979      	ldr	r1, [r7, #20]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	613b      	str	r3, [r7, #16]
   return(result);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e6      	bne.n	8009d46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	2b10      	cmp	r3, #16
 8009d84:	d103      	bne.n	8009d8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2210      	movs	r2, #16
 8009d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7fe fda6 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d9c:	e00b      	b.n	8009db6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7f8 fb1e 	bl	80023e0 <HAL_UART_RxCpltCallback>
}
 8009da4:	e007      	b.n	8009db6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	699a      	ldr	r2, [r3, #24]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0208 	orr.w	r2, r2, #8
 8009db4:	619a      	str	r2, [r3, #24]
}
 8009db6:	bf00      	nop
 8009db8:	3770      	adds	r7, #112	@ 0x70
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	58000c00 	.word	0x58000c00

08009dc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b0ac      	sub	sp, #176	@ 0xb0
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009dd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dfa:	2b22      	cmp	r3, #34	@ 0x22
 8009dfc:	f040 8180 	bne.w	800a100 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e06:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e0a:	e123      	b.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e12:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e16:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009e1a:	b2d9      	uxtb	r1, r3
 8009e1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e26:	400a      	ands	r2, r1
 8009e28:	b2d2      	uxtb	r2, r2
 8009e2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d053      	beq.n	8009f06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d011      	beq.n	8009e8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e84:	f043 0201 	orr.w	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d011      	beq.n	8009ebe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2202      	movs	r2, #2
 8009eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eb4:	f043 0204 	orr.w	r2, r3, #4
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d011      	beq.n	8009eee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00b      	beq.n	8009eee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2204      	movs	r2, #4
 8009edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee4:	f043 0202 	orr.w	r2, r3, #2
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d006      	beq.n	8009f06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7fe fceb 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f040 80a0 	bne.w	800a054 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	461a      	mov	r2, r3
 8009f32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f38:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009f3c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e4      	bne.n	8009f14 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009f5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f5c:	4b6e      	ldr	r3, [pc, #440]	@ (800a118 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f6e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009f70:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009f74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009f7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e3      	bne.n	8009f4a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a60      	ldr	r2, [pc, #384]	@ (800a11c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d021      	beq.n	8009fe4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d01a      	beq.n	8009fe4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fd2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fd8:	e841 2300 	strex	r3, r2, [r1]
 8009fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1e4      	bne.n	8009fae <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d130      	bne.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	f023 0310 	bic.w	r3, r3, #16
 800a006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a014:	643b      	str	r3, [r7, #64]	@ 0x40
 800a016:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a01a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a01c:	e841 2300 	strex	r3, r2, [r1]
 800a020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e4      	bne.n	8009ff2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	2b10      	cmp	r3, #16
 800a034:	d103      	bne.n	800a03e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2210      	movs	r2, #16
 800a03c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fe fc4e 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
 800a04c:	e002      	b.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f8 f9c6 	bl	80023e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a054:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800a05c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a060:	f003 0320 	and.w	r3, r3, #32
 800a064:	2b00      	cmp	r3, #0
 800a066:	f47f aed1 	bne.w	8009e0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a070:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a074:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d049      	beq.n	800a110 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a082:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a086:	429a      	cmp	r2, r3
 800a088:	d242      	bcs.n	800a110 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	61fb      	str	r3, [r7, #28]
   return(result);
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a0ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e3      	bne.n	800a08a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a16      	ldr	r2, [pc, #88]	@ (800a120 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a0c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f043 0320 	orr.w	r3, r3, #32
 800a0dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0ea:	61bb      	str	r3, [r7, #24]
 800a0ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6979      	ldr	r1, [r7, #20]
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e4      	bne.n	800a0c8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0fe:	e007      	b.n	800a110 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699a      	ldr	r2, [r3, #24]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0208 	orr.w	r2, r2, #8
 800a10e:	619a      	str	r2, [r3, #24]
}
 800a110:	bf00      	nop
 800a112:	37b0      	adds	r7, #176	@ 0xb0
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	effffffe 	.word	0xeffffffe
 800a11c:	58000c00 	.word	0x58000c00
 800a120:	08009a55 	.word	0x08009a55

0800a124 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b0ae      	sub	sp, #184	@ 0xb8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a132:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a15a:	2b22      	cmp	r3, #34	@ 0x22
 800a15c:	f040 8184 	bne.w	800a468 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a166:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a16a:	e127      	b.n	800a3bc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a172:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a17a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a17e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a182:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a186:	4013      	ands	r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a18e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a194:	1c9a      	adds	r2, r3, #2
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a1b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d053      	beq.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d011      	beq.n	800a1f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a1ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e8:	f043 0201 	orr.w	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d011      	beq.n	800a222 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a1fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2202      	movs	r2, #2
 800a210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a218:	f043 0204 	orr.w	r2, r3, #4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d011      	beq.n	800a252 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a22e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2204      	movs	r2, #4
 800a240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a248:	f043 0202 	orr.w	r2, r3, #2
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fe fb39 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a270:	b29b      	uxth	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	f040 80a2 	bne.w	800a3bc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a28c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a29a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a29e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a2ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e2      	bne.n	800a278 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a2c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a2c4:	4b6e      	ldr	r3, [pc, #440]	@ (800a480 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a2d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a2d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a2dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a2e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e3      	bne.n	800a2b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a60      	ldr	r2, [pc, #384]	@ (800a484 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d021      	beq.n	800a34c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01a      	beq.n	800a34c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a32a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a33a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a33e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e4      	bne.n	800a316 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a350:	2b01      	cmp	r3, #1
 800a352:	d130      	bne.n	800a3b6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36a:	f023 0310 	bic.w	r3, r3, #16
 800a36e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a37c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a37e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e4      	bne.n	800a35a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d103      	bne.n	800a3a6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7fe fa9a 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
 800a3b4:	e002      	b.n	800a3bc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7f8 f812 	bl	80023e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d006      	beq.n	800a3d2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a3c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f47f aecd 	bne.w	800a16c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a3dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d049      	beq.n	800a478 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d242      	bcs.n	800a478 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	623b      	str	r3, [r7, #32]
   return(result);
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a416:	633a      	str	r2, [r7, #48]	@ 0x30
 800a418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e3      	bne.n	800a3f2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a16      	ldr	r2, [pc, #88]	@ (800a488 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a42e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f043 0320 	orr.w	r3, r3, #32
 800a444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	69b9      	ldr	r1, [r7, #24]
 800a458:	69fa      	ldr	r2, [r7, #28]
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	617b      	str	r3, [r7, #20]
   return(result);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e4      	bne.n	800a430 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a466:	e007      	b.n	800a478 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0208 	orr.w	r2, r2, #8
 800a476:	619a      	str	r2, [r3, #24]
}
 800a478:	bf00      	nop
 800a47a:	37b8      	adds	r7, #184	@ 0xb8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	effffffe 	.word	0xeffffffe
 800a484:	58000c00 	.word	0x58000c00
 800a488:	08009c0d 	.word	0x08009c0d

0800a48c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e027      	b.n	800a4f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2224      	movs	r2, #36	@ 0x24
 800a4ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d101      	bne.n	800a516 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a512:	2302      	movs	r3, #2
 800a514:	e02d      	b.n	800a572 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2224      	movs	r2, #36	@ 0x24
 800a522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0201 	bic.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f850 	bl	800a5f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2220      	movs	r2, #32
 800a564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d101      	bne.n	800a592 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a58e:	2302      	movs	r3, #2
 800a590:	e02d      	b.n	800a5ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2224      	movs	r2, #36	@ 0x24
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0201 	bic.w	r2, r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f812 	bl	800a5f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a604:	2b00      	cmp	r3, #0
 800a606:	d108      	bne.n	800a61a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a618:	e031      	b.n	800a67e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a61a:	2310      	movs	r3, #16
 800a61c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a61e:	2310      	movs	r3, #16
 800a620:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	0e5b      	lsrs	r3, r3, #25
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	0f5b      	lsrs	r3, r3, #29
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a642:	7bbb      	ldrb	r3, [r7, #14]
 800a644:	7b3a      	ldrb	r2, [r7, #12]
 800a646:	4911      	ldr	r1, [pc, #68]	@ (800a68c <UARTEx_SetNbDataToProcess+0x94>)
 800a648:	5c8a      	ldrb	r2, [r1, r2]
 800a64a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a64e:	7b3a      	ldrb	r2, [r7, #12]
 800a650:	490f      	ldr	r1, [pc, #60]	@ (800a690 <UARTEx_SetNbDataToProcess+0x98>)
 800a652:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a654:	fb93 f3f2 	sdiv	r3, r3, r2
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	7b7a      	ldrb	r2, [r7, #13]
 800a664:	4909      	ldr	r1, [pc, #36]	@ (800a68c <UARTEx_SetNbDataToProcess+0x94>)
 800a666:	5c8a      	ldrb	r2, [r1, r2]
 800a668:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a66c:	7b7a      	ldrb	r2, [r7, #13]
 800a66e:	4908      	ldr	r1, [pc, #32]	@ (800a690 <UARTEx_SetNbDataToProcess+0x98>)
 800a670:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a672:	fb93 f3f2 	sdiv	r3, r3, r2
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a67e:	bf00      	nop
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	0800b424 	.word	0x0800b424
 800a690:	0800b42c 	.word	0x0800b42c

0800a694 <_vsniprintf_r>:
 800a694:	b530      	push	{r4, r5, lr}
 800a696:	4614      	mov	r4, r2
 800a698:	2c00      	cmp	r4, #0
 800a69a:	b09b      	sub	sp, #108	@ 0x6c
 800a69c:	4605      	mov	r5, r0
 800a69e:	461a      	mov	r2, r3
 800a6a0:	da05      	bge.n	800a6ae <_vsniprintf_r+0x1a>
 800a6a2:	238b      	movs	r3, #139	@ 0x8b
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6aa:	b01b      	add	sp, #108	@ 0x6c
 800a6ac:	bd30      	pop	{r4, r5, pc}
 800a6ae:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a6b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a6b6:	bf14      	ite	ne
 800a6b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a6bc:	4623      	moveq	r3, r4
 800a6be:	9302      	str	r3, [sp, #8]
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6c6:	9100      	str	r1, [sp, #0]
 800a6c8:	9104      	str	r1, [sp, #16]
 800a6ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a6ce:	4669      	mov	r1, sp
 800a6d0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a6d2:	f000 f9a1 	bl	800aa18 <_svfiprintf_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	bfbc      	itt	lt
 800a6da:	238b      	movlt	r3, #139	@ 0x8b
 800a6dc:	602b      	strlt	r3, [r5, #0]
 800a6de:	2c00      	cmp	r4, #0
 800a6e0:	d0e3      	beq.n	800a6aa <_vsniprintf_r+0x16>
 800a6e2:	9b00      	ldr	r3, [sp, #0]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	701a      	strb	r2, [r3, #0]
 800a6e8:	e7df      	b.n	800a6aa <_vsniprintf_r+0x16>
	...

0800a6ec <vsniprintf>:
 800a6ec:	b507      	push	{r0, r1, r2, lr}
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	460a      	mov	r2, r1
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	4803      	ldr	r0, [pc, #12]	@ (800a704 <vsniprintf+0x18>)
 800a6f8:	6800      	ldr	r0, [r0, #0]
 800a6fa:	f7ff ffcb 	bl	800a694 <_vsniprintf_r>
 800a6fe:	b003      	add	sp, #12
 800a700:	f85d fb04 	ldr.w	pc, [sp], #4
 800a704:	24000010 	.word	0x24000010

0800a708 <memset>:
 800a708:	4402      	add	r2, r0
 800a70a:	4603      	mov	r3, r0
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d100      	bne.n	800a712 <memset+0xa>
 800a710:	4770      	bx	lr
 800a712:	f803 1b01 	strb.w	r1, [r3], #1
 800a716:	e7f9      	b.n	800a70c <memset+0x4>

0800a718 <__errno>:
 800a718:	4b01      	ldr	r3, [pc, #4]	@ (800a720 <__errno+0x8>)
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	24000010 	.word	0x24000010

0800a724 <__libc_init_array>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4d0d      	ldr	r5, [pc, #52]	@ (800a75c <__libc_init_array+0x38>)
 800a728:	4c0d      	ldr	r4, [pc, #52]	@ (800a760 <__libc_init_array+0x3c>)
 800a72a:	1b64      	subs	r4, r4, r5
 800a72c:	10a4      	asrs	r4, r4, #2
 800a72e:	2600      	movs	r6, #0
 800a730:	42a6      	cmp	r6, r4
 800a732:	d109      	bne.n	800a748 <__libc_init_array+0x24>
 800a734:	4d0b      	ldr	r5, [pc, #44]	@ (800a764 <__libc_init_array+0x40>)
 800a736:	4c0c      	ldr	r4, [pc, #48]	@ (800a768 <__libc_init_array+0x44>)
 800a738:	f000 fc66 	bl	800b008 <_init>
 800a73c:	1b64      	subs	r4, r4, r5
 800a73e:	10a4      	asrs	r4, r4, #2
 800a740:	2600      	movs	r6, #0
 800a742:	42a6      	cmp	r6, r4
 800a744:	d105      	bne.n	800a752 <__libc_init_array+0x2e>
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74c:	4798      	blx	r3
 800a74e:	3601      	adds	r6, #1
 800a750:	e7ee      	b.n	800a730 <__libc_init_array+0xc>
 800a752:	f855 3b04 	ldr.w	r3, [r5], #4
 800a756:	4798      	blx	r3
 800a758:	3601      	adds	r6, #1
 800a75a:	e7f2      	b.n	800a742 <__libc_init_array+0x1e>
 800a75c:	0800b470 	.word	0x0800b470
 800a760:	0800b470 	.word	0x0800b470
 800a764:	0800b470 	.word	0x0800b470
 800a768:	0800b474 	.word	0x0800b474

0800a76c <__retarget_lock_acquire_recursive>:
 800a76c:	4770      	bx	lr

0800a76e <__retarget_lock_release_recursive>:
 800a76e:	4770      	bx	lr

0800a770 <_free_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4605      	mov	r5, r0
 800a774:	2900      	cmp	r1, #0
 800a776:	d041      	beq.n	800a7fc <_free_r+0x8c>
 800a778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a77c:	1f0c      	subs	r4, r1, #4
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bfb8      	it	lt
 800a782:	18e4      	addlt	r4, r4, r3
 800a784:	f000 f8e0 	bl	800a948 <__malloc_lock>
 800a788:	4a1d      	ldr	r2, [pc, #116]	@ (800a800 <_free_r+0x90>)
 800a78a:	6813      	ldr	r3, [r2, #0]
 800a78c:	b933      	cbnz	r3, 800a79c <_free_r+0x2c>
 800a78e:	6063      	str	r3, [r4, #4]
 800a790:	6014      	str	r4, [r2, #0]
 800a792:	4628      	mov	r0, r5
 800a794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a798:	f000 b8dc 	b.w	800a954 <__malloc_unlock>
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d908      	bls.n	800a7b2 <_free_r+0x42>
 800a7a0:	6820      	ldr	r0, [r4, #0]
 800a7a2:	1821      	adds	r1, r4, r0
 800a7a4:	428b      	cmp	r3, r1
 800a7a6:	bf01      	itttt	eq
 800a7a8:	6819      	ldreq	r1, [r3, #0]
 800a7aa:	685b      	ldreq	r3, [r3, #4]
 800a7ac:	1809      	addeq	r1, r1, r0
 800a7ae:	6021      	streq	r1, [r4, #0]
 800a7b0:	e7ed      	b.n	800a78e <_free_r+0x1e>
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	b10b      	cbz	r3, 800a7bc <_free_r+0x4c>
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d9fa      	bls.n	800a7b2 <_free_r+0x42>
 800a7bc:	6811      	ldr	r1, [r2, #0]
 800a7be:	1850      	adds	r0, r2, r1
 800a7c0:	42a0      	cmp	r0, r4
 800a7c2:	d10b      	bne.n	800a7dc <_free_r+0x6c>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	4401      	add	r1, r0
 800a7c8:	1850      	adds	r0, r2, r1
 800a7ca:	4283      	cmp	r3, r0
 800a7cc:	6011      	str	r1, [r2, #0]
 800a7ce:	d1e0      	bne.n	800a792 <_free_r+0x22>
 800a7d0:	6818      	ldr	r0, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	6053      	str	r3, [r2, #4]
 800a7d6:	4408      	add	r0, r1
 800a7d8:	6010      	str	r0, [r2, #0]
 800a7da:	e7da      	b.n	800a792 <_free_r+0x22>
 800a7dc:	d902      	bls.n	800a7e4 <_free_r+0x74>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	e7d6      	b.n	800a792 <_free_r+0x22>
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	1821      	adds	r1, r4, r0
 800a7e8:	428b      	cmp	r3, r1
 800a7ea:	bf04      	itt	eq
 800a7ec:	6819      	ldreq	r1, [r3, #0]
 800a7ee:	685b      	ldreq	r3, [r3, #4]
 800a7f0:	6063      	str	r3, [r4, #4]
 800a7f2:	bf04      	itt	eq
 800a7f4:	1809      	addeq	r1, r1, r0
 800a7f6:	6021      	streq	r1, [r4, #0]
 800a7f8:	6054      	str	r4, [r2, #4]
 800a7fa:	e7ca      	b.n	800a792 <_free_r+0x22>
 800a7fc:	bd38      	pop	{r3, r4, r5, pc}
 800a7fe:	bf00      	nop
 800a800:	2400034c 	.word	0x2400034c

0800a804 <sbrk_aligned>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	4e0f      	ldr	r6, [pc, #60]	@ (800a844 <sbrk_aligned+0x40>)
 800a808:	460c      	mov	r4, r1
 800a80a:	6831      	ldr	r1, [r6, #0]
 800a80c:	4605      	mov	r5, r0
 800a80e:	b911      	cbnz	r1, 800a816 <sbrk_aligned+0x12>
 800a810:	f000 fba6 	bl	800af60 <_sbrk_r>
 800a814:	6030      	str	r0, [r6, #0]
 800a816:	4621      	mov	r1, r4
 800a818:	4628      	mov	r0, r5
 800a81a:	f000 fba1 	bl	800af60 <_sbrk_r>
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	d103      	bne.n	800a82a <sbrk_aligned+0x26>
 800a822:	f04f 34ff 	mov.w	r4, #4294967295
 800a826:	4620      	mov	r0, r4
 800a828:	bd70      	pop	{r4, r5, r6, pc}
 800a82a:	1cc4      	adds	r4, r0, #3
 800a82c:	f024 0403 	bic.w	r4, r4, #3
 800a830:	42a0      	cmp	r0, r4
 800a832:	d0f8      	beq.n	800a826 <sbrk_aligned+0x22>
 800a834:	1a21      	subs	r1, r4, r0
 800a836:	4628      	mov	r0, r5
 800a838:	f000 fb92 	bl	800af60 <_sbrk_r>
 800a83c:	3001      	adds	r0, #1
 800a83e:	d1f2      	bne.n	800a826 <sbrk_aligned+0x22>
 800a840:	e7ef      	b.n	800a822 <sbrk_aligned+0x1e>
 800a842:	bf00      	nop
 800a844:	24000348 	.word	0x24000348

0800a848 <_malloc_r>:
 800a848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a84c:	1ccd      	adds	r5, r1, #3
 800a84e:	f025 0503 	bic.w	r5, r5, #3
 800a852:	3508      	adds	r5, #8
 800a854:	2d0c      	cmp	r5, #12
 800a856:	bf38      	it	cc
 800a858:	250c      	movcc	r5, #12
 800a85a:	2d00      	cmp	r5, #0
 800a85c:	4606      	mov	r6, r0
 800a85e:	db01      	blt.n	800a864 <_malloc_r+0x1c>
 800a860:	42a9      	cmp	r1, r5
 800a862:	d904      	bls.n	800a86e <_malloc_r+0x26>
 800a864:	230c      	movs	r3, #12
 800a866:	6033      	str	r3, [r6, #0]
 800a868:	2000      	movs	r0, #0
 800a86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a944 <_malloc_r+0xfc>
 800a872:	f000 f869 	bl	800a948 <__malloc_lock>
 800a876:	f8d8 3000 	ldr.w	r3, [r8]
 800a87a:	461c      	mov	r4, r3
 800a87c:	bb44      	cbnz	r4, 800a8d0 <_malloc_r+0x88>
 800a87e:	4629      	mov	r1, r5
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff ffbf 	bl	800a804 <sbrk_aligned>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	4604      	mov	r4, r0
 800a88a:	d158      	bne.n	800a93e <_malloc_r+0xf6>
 800a88c:	f8d8 4000 	ldr.w	r4, [r8]
 800a890:	4627      	mov	r7, r4
 800a892:	2f00      	cmp	r7, #0
 800a894:	d143      	bne.n	800a91e <_malloc_r+0xd6>
 800a896:	2c00      	cmp	r4, #0
 800a898:	d04b      	beq.n	800a932 <_malloc_r+0xea>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	4639      	mov	r1, r7
 800a89e:	4630      	mov	r0, r6
 800a8a0:	eb04 0903 	add.w	r9, r4, r3
 800a8a4:	f000 fb5c 	bl	800af60 <_sbrk_r>
 800a8a8:	4581      	cmp	r9, r0
 800a8aa:	d142      	bne.n	800a932 <_malloc_r+0xea>
 800a8ac:	6821      	ldr	r1, [r4, #0]
 800a8ae:	1a6d      	subs	r5, r5, r1
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f7ff ffa6 	bl	800a804 <sbrk_aligned>
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d03a      	beq.n	800a932 <_malloc_r+0xea>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	442b      	add	r3, r5
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	bb62      	cbnz	r2, 800a924 <_malloc_r+0xdc>
 800a8ca:	f8c8 7000 	str.w	r7, [r8]
 800a8ce:	e00f      	b.n	800a8f0 <_malloc_r+0xa8>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	1b52      	subs	r2, r2, r5
 800a8d4:	d420      	bmi.n	800a918 <_malloc_r+0xd0>
 800a8d6:	2a0b      	cmp	r2, #11
 800a8d8:	d917      	bls.n	800a90a <_malloc_r+0xc2>
 800a8da:	1961      	adds	r1, r4, r5
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	6025      	str	r5, [r4, #0]
 800a8e0:	bf18      	it	ne
 800a8e2:	6059      	strne	r1, [r3, #4]
 800a8e4:	6863      	ldr	r3, [r4, #4]
 800a8e6:	bf08      	it	eq
 800a8e8:	f8c8 1000 	streq.w	r1, [r8]
 800a8ec:	5162      	str	r2, [r4, r5]
 800a8ee:	604b      	str	r3, [r1, #4]
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f000 f82f 	bl	800a954 <__malloc_unlock>
 800a8f6:	f104 000b 	add.w	r0, r4, #11
 800a8fa:	1d23      	adds	r3, r4, #4
 800a8fc:	f020 0007 	bic.w	r0, r0, #7
 800a900:	1ac2      	subs	r2, r0, r3
 800a902:	bf1c      	itt	ne
 800a904:	1a1b      	subne	r3, r3, r0
 800a906:	50a3      	strne	r3, [r4, r2]
 800a908:	e7af      	b.n	800a86a <_malloc_r+0x22>
 800a90a:	6862      	ldr	r2, [r4, #4]
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	bf0c      	ite	eq
 800a910:	f8c8 2000 	streq.w	r2, [r8]
 800a914:	605a      	strne	r2, [r3, #4]
 800a916:	e7eb      	b.n	800a8f0 <_malloc_r+0xa8>
 800a918:	4623      	mov	r3, r4
 800a91a:	6864      	ldr	r4, [r4, #4]
 800a91c:	e7ae      	b.n	800a87c <_malloc_r+0x34>
 800a91e:	463c      	mov	r4, r7
 800a920:	687f      	ldr	r7, [r7, #4]
 800a922:	e7b6      	b.n	800a892 <_malloc_r+0x4a>
 800a924:	461a      	mov	r2, r3
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d1fb      	bne.n	800a924 <_malloc_r+0xdc>
 800a92c:	2300      	movs	r3, #0
 800a92e:	6053      	str	r3, [r2, #4]
 800a930:	e7de      	b.n	800a8f0 <_malloc_r+0xa8>
 800a932:	230c      	movs	r3, #12
 800a934:	6033      	str	r3, [r6, #0]
 800a936:	4630      	mov	r0, r6
 800a938:	f000 f80c 	bl	800a954 <__malloc_unlock>
 800a93c:	e794      	b.n	800a868 <_malloc_r+0x20>
 800a93e:	6005      	str	r5, [r0, #0]
 800a940:	e7d6      	b.n	800a8f0 <_malloc_r+0xa8>
 800a942:	bf00      	nop
 800a944:	2400034c 	.word	0x2400034c

0800a948 <__malloc_lock>:
 800a948:	4801      	ldr	r0, [pc, #4]	@ (800a950 <__malloc_lock+0x8>)
 800a94a:	f7ff bf0f 	b.w	800a76c <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	24000344 	.word	0x24000344

0800a954 <__malloc_unlock>:
 800a954:	4801      	ldr	r0, [pc, #4]	@ (800a95c <__malloc_unlock+0x8>)
 800a956:	f7ff bf0a 	b.w	800a76e <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	24000344 	.word	0x24000344

0800a960 <__ssputs_r>:
 800a960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a964:	688e      	ldr	r6, [r1, #8]
 800a966:	461f      	mov	r7, r3
 800a968:	42be      	cmp	r6, r7
 800a96a:	680b      	ldr	r3, [r1, #0]
 800a96c:	4682      	mov	sl, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	4690      	mov	r8, r2
 800a972:	d82d      	bhi.n	800a9d0 <__ssputs_r+0x70>
 800a974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a978:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a97c:	d026      	beq.n	800a9cc <__ssputs_r+0x6c>
 800a97e:	6965      	ldr	r5, [r4, #20]
 800a980:	6909      	ldr	r1, [r1, #16]
 800a982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a986:	eba3 0901 	sub.w	r9, r3, r1
 800a98a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a98e:	1c7b      	adds	r3, r7, #1
 800a990:	444b      	add	r3, r9
 800a992:	106d      	asrs	r5, r5, #1
 800a994:	429d      	cmp	r5, r3
 800a996:	bf38      	it	cc
 800a998:	461d      	movcc	r5, r3
 800a99a:	0553      	lsls	r3, r2, #21
 800a99c:	d527      	bpl.n	800a9ee <__ssputs_r+0x8e>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7ff ff52 	bl	800a848 <_malloc_r>
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	b360      	cbz	r0, 800aa02 <__ssputs_r+0xa2>
 800a9a8:	6921      	ldr	r1, [r4, #16]
 800a9aa:	464a      	mov	r2, r9
 800a9ac:	f000 fae8 	bl	800af80 <memcpy>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	6126      	str	r6, [r4, #16]
 800a9be:	6165      	str	r5, [r4, #20]
 800a9c0:	444e      	add	r6, r9
 800a9c2:	eba5 0509 	sub.w	r5, r5, r9
 800a9c6:	6026      	str	r6, [r4, #0]
 800a9c8:	60a5      	str	r5, [r4, #8]
 800a9ca:	463e      	mov	r6, r7
 800a9cc:	42be      	cmp	r6, r7
 800a9ce:	d900      	bls.n	800a9d2 <__ssputs_r+0x72>
 800a9d0:	463e      	mov	r6, r7
 800a9d2:	6820      	ldr	r0, [r4, #0]
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	f000 faa8 	bl	800af2c <memmove>
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	1b9b      	subs	r3, r3, r6
 800a9e0:	60a3      	str	r3, [r4, #8]
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	4433      	add	r3, r6
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	f000 fad4 	bl	800af9c <_realloc_r>
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d1e0      	bne.n	800a9bc <__ssputs_r+0x5c>
 800a9fa:	6921      	ldr	r1, [r4, #16]
 800a9fc:	4650      	mov	r0, sl
 800a9fe:	f7ff feb7 	bl	800a770 <_free_r>
 800aa02:	230c      	movs	r3, #12
 800aa04:	f8ca 3000 	str.w	r3, [sl]
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	e7e9      	b.n	800a9ea <__ssputs_r+0x8a>
	...

0800aa18 <_svfiprintf_r>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	4698      	mov	r8, r3
 800aa1e:	898b      	ldrh	r3, [r1, #12]
 800aa20:	061b      	lsls	r3, r3, #24
 800aa22:	b09d      	sub	sp, #116	@ 0x74
 800aa24:	4607      	mov	r7, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	4614      	mov	r4, r2
 800aa2a:	d510      	bpl.n	800aa4e <_svfiprintf_r+0x36>
 800aa2c:	690b      	ldr	r3, [r1, #16]
 800aa2e:	b973      	cbnz	r3, 800aa4e <_svfiprintf_r+0x36>
 800aa30:	2140      	movs	r1, #64	@ 0x40
 800aa32:	f7ff ff09 	bl	800a848 <_malloc_r>
 800aa36:	6028      	str	r0, [r5, #0]
 800aa38:	6128      	str	r0, [r5, #16]
 800aa3a:	b930      	cbnz	r0, 800aa4a <_svfiprintf_r+0x32>
 800aa3c:	230c      	movs	r3, #12
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295
 800aa44:	b01d      	add	sp, #116	@ 0x74
 800aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4a:	2340      	movs	r3, #64	@ 0x40
 800aa4c:	616b      	str	r3, [r5, #20]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa52:	2320      	movs	r3, #32
 800aa54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa58:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa5c:	2330      	movs	r3, #48	@ 0x30
 800aa5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abfc <_svfiprintf_r+0x1e4>
 800aa62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa66:	f04f 0901 	mov.w	r9, #1
 800aa6a:	4623      	mov	r3, r4
 800aa6c:	469a      	mov	sl, r3
 800aa6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa72:	b10a      	cbz	r2, 800aa78 <_svfiprintf_r+0x60>
 800aa74:	2a25      	cmp	r2, #37	@ 0x25
 800aa76:	d1f9      	bne.n	800aa6c <_svfiprintf_r+0x54>
 800aa78:	ebba 0b04 	subs.w	fp, sl, r4
 800aa7c:	d00b      	beq.n	800aa96 <_svfiprintf_r+0x7e>
 800aa7e:	465b      	mov	r3, fp
 800aa80:	4622      	mov	r2, r4
 800aa82:	4629      	mov	r1, r5
 800aa84:	4638      	mov	r0, r7
 800aa86:	f7ff ff6b 	bl	800a960 <__ssputs_r>
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	f000 80a7 	beq.w	800abde <_svfiprintf_r+0x1c6>
 800aa90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa92:	445a      	add	r2, fp
 800aa94:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa96:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 809f 	beq.w	800abde <_svfiprintf_r+0x1c6>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaaa:	f10a 0a01 	add.w	sl, sl, #1
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	9307      	str	r3, [sp, #28]
 800aab2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aab6:	931a      	str	r3, [sp, #104]	@ 0x68
 800aab8:	4654      	mov	r4, sl
 800aaba:	2205      	movs	r2, #5
 800aabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac0:	484e      	ldr	r0, [pc, #312]	@ (800abfc <_svfiprintf_r+0x1e4>)
 800aac2:	f7f5 fc15 	bl	80002f0 <memchr>
 800aac6:	9a04      	ldr	r2, [sp, #16]
 800aac8:	b9d8      	cbnz	r0, 800ab02 <_svfiprintf_r+0xea>
 800aaca:	06d0      	lsls	r0, r2, #27
 800aacc:	bf44      	itt	mi
 800aace:	2320      	movmi	r3, #32
 800aad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aad4:	0711      	lsls	r1, r2, #28
 800aad6:	bf44      	itt	mi
 800aad8:	232b      	movmi	r3, #43	@ 0x2b
 800aada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aade:	f89a 3000 	ldrb.w	r3, [sl]
 800aae2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aae4:	d015      	beq.n	800ab12 <_svfiprintf_r+0xfa>
 800aae6:	9a07      	ldr	r2, [sp, #28]
 800aae8:	4654      	mov	r4, sl
 800aaea:	2000      	movs	r0, #0
 800aaec:	f04f 0c0a 	mov.w	ip, #10
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf6:	3b30      	subs	r3, #48	@ 0x30
 800aaf8:	2b09      	cmp	r3, #9
 800aafa:	d94b      	bls.n	800ab94 <_svfiprintf_r+0x17c>
 800aafc:	b1b0      	cbz	r0, 800ab2c <_svfiprintf_r+0x114>
 800aafe:	9207      	str	r2, [sp, #28]
 800ab00:	e014      	b.n	800ab2c <_svfiprintf_r+0x114>
 800ab02:	eba0 0308 	sub.w	r3, r0, r8
 800ab06:	fa09 f303 	lsl.w	r3, r9, r3
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	46a2      	mov	sl, r4
 800ab10:	e7d2      	b.n	800aab8 <_svfiprintf_r+0xa0>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	1d19      	adds	r1, r3, #4
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	9103      	str	r1, [sp, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfbb      	ittet	lt
 800ab1e:	425b      	neglt	r3, r3
 800ab20:	f042 0202 	orrlt.w	r2, r2, #2
 800ab24:	9307      	strge	r3, [sp, #28]
 800ab26:	9307      	strlt	r3, [sp, #28]
 800ab28:	bfb8      	it	lt
 800ab2a:	9204      	strlt	r2, [sp, #16]
 800ab2c:	7823      	ldrb	r3, [r4, #0]
 800ab2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab30:	d10a      	bne.n	800ab48 <_svfiprintf_r+0x130>
 800ab32:	7863      	ldrb	r3, [r4, #1]
 800ab34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab36:	d132      	bne.n	800ab9e <_svfiprintf_r+0x186>
 800ab38:	9b03      	ldr	r3, [sp, #12]
 800ab3a:	1d1a      	adds	r2, r3, #4
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	9203      	str	r2, [sp, #12]
 800ab40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab44:	3402      	adds	r4, #2
 800ab46:	9305      	str	r3, [sp, #20]
 800ab48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac0c <_svfiprintf_r+0x1f4>
 800ab4c:	7821      	ldrb	r1, [r4, #0]
 800ab4e:	2203      	movs	r2, #3
 800ab50:	4650      	mov	r0, sl
 800ab52:	f7f5 fbcd 	bl	80002f0 <memchr>
 800ab56:	b138      	cbz	r0, 800ab68 <_svfiprintf_r+0x150>
 800ab58:	9b04      	ldr	r3, [sp, #16]
 800ab5a:	eba0 000a 	sub.w	r0, r0, sl
 800ab5e:	2240      	movs	r2, #64	@ 0x40
 800ab60:	4082      	lsls	r2, r0
 800ab62:	4313      	orrs	r3, r2
 800ab64:	3401      	adds	r4, #1
 800ab66:	9304      	str	r3, [sp, #16]
 800ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6c:	4824      	ldr	r0, [pc, #144]	@ (800ac00 <_svfiprintf_r+0x1e8>)
 800ab6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab72:	2206      	movs	r2, #6
 800ab74:	f7f5 fbbc 	bl	80002f0 <memchr>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d036      	beq.n	800abea <_svfiprintf_r+0x1d2>
 800ab7c:	4b21      	ldr	r3, [pc, #132]	@ (800ac04 <_svfiprintf_r+0x1ec>)
 800ab7e:	bb1b      	cbnz	r3, 800abc8 <_svfiprintf_r+0x1b0>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	3307      	adds	r3, #7
 800ab84:	f023 0307 	bic.w	r3, r3, #7
 800ab88:	3308      	adds	r3, #8
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8e:	4433      	add	r3, r6
 800ab90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab92:	e76a      	b.n	800aa6a <_svfiprintf_r+0x52>
 800ab94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab98:	460c      	mov	r4, r1
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	e7a8      	b.n	800aaf0 <_svfiprintf_r+0xd8>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	3401      	adds	r4, #1
 800aba2:	9305      	str	r3, [sp, #20]
 800aba4:	4619      	mov	r1, r3
 800aba6:	f04f 0c0a 	mov.w	ip, #10
 800abaa:	4620      	mov	r0, r4
 800abac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abb0:	3a30      	subs	r2, #48	@ 0x30
 800abb2:	2a09      	cmp	r2, #9
 800abb4:	d903      	bls.n	800abbe <_svfiprintf_r+0x1a6>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0c6      	beq.n	800ab48 <_svfiprintf_r+0x130>
 800abba:	9105      	str	r1, [sp, #20]
 800abbc:	e7c4      	b.n	800ab48 <_svfiprintf_r+0x130>
 800abbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800abc2:	4604      	mov	r4, r0
 800abc4:	2301      	movs	r3, #1
 800abc6:	e7f0      	b.n	800abaa <_svfiprintf_r+0x192>
 800abc8:	ab03      	add	r3, sp, #12
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	462a      	mov	r2, r5
 800abce:	4b0e      	ldr	r3, [pc, #56]	@ (800ac08 <_svfiprintf_r+0x1f0>)
 800abd0:	a904      	add	r1, sp, #16
 800abd2:	4638      	mov	r0, r7
 800abd4:	f3af 8000 	nop.w
 800abd8:	1c42      	adds	r2, r0, #1
 800abda:	4606      	mov	r6, r0
 800abdc:	d1d6      	bne.n	800ab8c <_svfiprintf_r+0x174>
 800abde:	89ab      	ldrh	r3, [r5, #12]
 800abe0:	065b      	lsls	r3, r3, #25
 800abe2:	f53f af2d 	bmi.w	800aa40 <_svfiprintf_r+0x28>
 800abe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abe8:	e72c      	b.n	800aa44 <_svfiprintf_r+0x2c>
 800abea:	ab03      	add	r3, sp, #12
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	462a      	mov	r2, r5
 800abf0:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <_svfiprintf_r+0x1f0>)
 800abf2:	a904      	add	r1, sp, #16
 800abf4:	4638      	mov	r0, r7
 800abf6:	f000 f879 	bl	800acec <_printf_i>
 800abfa:	e7ed      	b.n	800abd8 <_svfiprintf_r+0x1c0>
 800abfc:	0800b434 	.word	0x0800b434
 800ac00:	0800b43e 	.word	0x0800b43e
 800ac04:	00000000 	.word	0x00000000
 800ac08:	0800a961 	.word	0x0800a961
 800ac0c:	0800b43a 	.word	0x0800b43a

0800ac10 <_printf_common>:
 800ac10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac14:	4616      	mov	r6, r2
 800ac16:	4698      	mov	r8, r3
 800ac18:	688a      	ldr	r2, [r1, #8]
 800ac1a:	690b      	ldr	r3, [r1, #16]
 800ac1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac20:	4293      	cmp	r3, r2
 800ac22:	bfb8      	it	lt
 800ac24:	4613      	movlt	r3, r2
 800ac26:	6033      	str	r3, [r6, #0]
 800ac28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	b10a      	cbz	r2, 800ac36 <_printf_common+0x26>
 800ac32:	3301      	adds	r3, #1
 800ac34:	6033      	str	r3, [r6, #0]
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	0699      	lsls	r1, r3, #26
 800ac3a:	bf42      	ittt	mi
 800ac3c:	6833      	ldrmi	r3, [r6, #0]
 800ac3e:	3302      	addmi	r3, #2
 800ac40:	6033      	strmi	r3, [r6, #0]
 800ac42:	6825      	ldr	r5, [r4, #0]
 800ac44:	f015 0506 	ands.w	r5, r5, #6
 800ac48:	d106      	bne.n	800ac58 <_printf_common+0x48>
 800ac4a:	f104 0a19 	add.w	sl, r4, #25
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	6832      	ldr	r2, [r6, #0]
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	dc26      	bgt.n	800aca6 <_printf_common+0x96>
 800ac58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	3b00      	subs	r3, #0
 800ac60:	bf18      	it	ne
 800ac62:	2301      	movne	r3, #1
 800ac64:	0692      	lsls	r2, r2, #26
 800ac66:	d42b      	bmi.n	800acc0 <_printf_common+0xb0>
 800ac68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac6c:	4641      	mov	r1, r8
 800ac6e:	4638      	mov	r0, r7
 800ac70:	47c8      	blx	r9
 800ac72:	3001      	adds	r0, #1
 800ac74:	d01e      	beq.n	800acb4 <_printf_common+0xa4>
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	6922      	ldr	r2, [r4, #16]
 800ac7a:	f003 0306 	and.w	r3, r3, #6
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	bf02      	ittt	eq
 800ac82:	68e5      	ldreq	r5, [r4, #12]
 800ac84:	6833      	ldreq	r3, [r6, #0]
 800ac86:	1aed      	subeq	r5, r5, r3
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	bf0c      	ite	eq
 800ac8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac90:	2500      	movne	r5, #0
 800ac92:	4293      	cmp	r3, r2
 800ac94:	bfc4      	itt	gt
 800ac96:	1a9b      	subgt	r3, r3, r2
 800ac98:	18ed      	addgt	r5, r5, r3
 800ac9a:	2600      	movs	r6, #0
 800ac9c:	341a      	adds	r4, #26
 800ac9e:	42b5      	cmp	r5, r6
 800aca0:	d11a      	bne.n	800acd8 <_printf_common+0xc8>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e008      	b.n	800acb8 <_printf_common+0xa8>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4652      	mov	r2, sl
 800acaa:	4641      	mov	r1, r8
 800acac:	4638      	mov	r0, r7
 800acae:	47c8      	blx	r9
 800acb0:	3001      	adds	r0, #1
 800acb2:	d103      	bne.n	800acbc <_printf_common+0xac>
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	3501      	adds	r5, #1
 800acbe:	e7c6      	b.n	800ac4e <_printf_common+0x3e>
 800acc0:	18e1      	adds	r1, r4, r3
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	2030      	movs	r0, #48	@ 0x30
 800acc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acca:	4422      	add	r2, r4
 800accc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acd4:	3302      	adds	r3, #2
 800acd6:	e7c7      	b.n	800ac68 <_printf_common+0x58>
 800acd8:	2301      	movs	r3, #1
 800acda:	4622      	mov	r2, r4
 800acdc:	4641      	mov	r1, r8
 800acde:	4638      	mov	r0, r7
 800ace0:	47c8      	blx	r9
 800ace2:	3001      	adds	r0, #1
 800ace4:	d0e6      	beq.n	800acb4 <_printf_common+0xa4>
 800ace6:	3601      	adds	r6, #1
 800ace8:	e7d9      	b.n	800ac9e <_printf_common+0x8e>
	...

0800acec <_printf_i>:
 800acec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf0:	7e0f      	ldrb	r7, [r1, #24]
 800acf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acf4:	2f78      	cmp	r7, #120	@ 0x78
 800acf6:	4691      	mov	r9, r2
 800acf8:	4680      	mov	r8, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	469a      	mov	sl, r3
 800acfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad02:	d807      	bhi.n	800ad14 <_printf_i+0x28>
 800ad04:	2f62      	cmp	r7, #98	@ 0x62
 800ad06:	d80a      	bhi.n	800ad1e <_printf_i+0x32>
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	f000 80d2 	beq.w	800aeb2 <_printf_i+0x1c6>
 800ad0e:	2f58      	cmp	r7, #88	@ 0x58
 800ad10:	f000 80b9 	beq.w	800ae86 <_printf_i+0x19a>
 800ad14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad1c:	e03a      	b.n	800ad94 <_printf_i+0xa8>
 800ad1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad22:	2b15      	cmp	r3, #21
 800ad24:	d8f6      	bhi.n	800ad14 <_printf_i+0x28>
 800ad26:	a101      	add	r1, pc, #4	@ (adr r1, 800ad2c <_printf_i+0x40>)
 800ad28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad2c:	0800ad85 	.word	0x0800ad85
 800ad30:	0800ad99 	.word	0x0800ad99
 800ad34:	0800ad15 	.word	0x0800ad15
 800ad38:	0800ad15 	.word	0x0800ad15
 800ad3c:	0800ad15 	.word	0x0800ad15
 800ad40:	0800ad15 	.word	0x0800ad15
 800ad44:	0800ad99 	.word	0x0800ad99
 800ad48:	0800ad15 	.word	0x0800ad15
 800ad4c:	0800ad15 	.word	0x0800ad15
 800ad50:	0800ad15 	.word	0x0800ad15
 800ad54:	0800ad15 	.word	0x0800ad15
 800ad58:	0800ae99 	.word	0x0800ae99
 800ad5c:	0800adc3 	.word	0x0800adc3
 800ad60:	0800ae53 	.word	0x0800ae53
 800ad64:	0800ad15 	.word	0x0800ad15
 800ad68:	0800ad15 	.word	0x0800ad15
 800ad6c:	0800aebb 	.word	0x0800aebb
 800ad70:	0800ad15 	.word	0x0800ad15
 800ad74:	0800adc3 	.word	0x0800adc3
 800ad78:	0800ad15 	.word	0x0800ad15
 800ad7c:	0800ad15 	.word	0x0800ad15
 800ad80:	0800ae5b 	.word	0x0800ae5b
 800ad84:	6833      	ldr	r3, [r6, #0]
 800ad86:	1d1a      	adds	r2, r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6032      	str	r2, [r6, #0]
 800ad8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad94:	2301      	movs	r3, #1
 800ad96:	e09d      	b.n	800aed4 <_printf_i+0x1e8>
 800ad98:	6833      	ldr	r3, [r6, #0]
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	1d19      	adds	r1, r3, #4
 800ad9e:	6031      	str	r1, [r6, #0]
 800ada0:	0606      	lsls	r6, r0, #24
 800ada2:	d501      	bpl.n	800ada8 <_printf_i+0xbc>
 800ada4:	681d      	ldr	r5, [r3, #0]
 800ada6:	e003      	b.n	800adb0 <_printf_i+0xc4>
 800ada8:	0645      	lsls	r5, r0, #25
 800adaa:	d5fb      	bpl.n	800ada4 <_printf_i+0xb8>
 800adac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	da03      	bge.n	800adbc <_printf_i+0xd0>
 800adb4:	232d      	movs	r3, #45	@ 0x2d
 800adb6:	426d      	negs	r5, r5
 800adb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adbc:	4859      	ldr	r0, [pc, #356]	@ (800af24 <_printf_i+0x238>)
 800adbe:	230a      	movs	r3, #10
 800adc0:	e011      	b.n	800ade6 <_printf_i+0xfa>
 800adc2:	6821      	ldr	r1, [r4, #0]
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	0608      	lsls	r0, r1, #24
 800adc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800adcc:	d402      	bmi.n	800add4 <_printf_i+0xe8>
 800adce:	0649      	lsls	r1, r1, #25
 800add0:	bf48      	it	mi
 800add2:	b2ad      	uxthmi	r5, r5
 800add4:	2f6f      	cmp	r7, #111	@ 0x6f
 800add6:	4853      	ldr	r0, [pc, #332]	@ (800af24 <_printf_i+0x238>)
 800add8:	6033      	str	r3, [r6, #0]
 800adda:	bf14      	ite	ne
 800addc:	230a      	movne	r3, #10
 800adde:	2308      	moveq	r3, #8
 800ade0:	2100      	movs	r1, #0
 800ade2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ade6:	6866      	ldr	r6, [r4, #4]
 800ade8:	60a6      	str	r6, [r4, #8]
 800adea:	2e00      	cmp	r6, #0
 800adec:	bfa2      	ittt	ge
 800adee:	6821      	ldrge	r1, [r4, #0]
 800adf0:	f021 0104 	bicge.w	r1, r1, #4
 800adf4:	6021      	strge	r1, [r4, #0]
 800adf6:	b90d      	cbnz	r5, 800adfc <_printf_i+0x110>
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	d04b      	beq.n	800ae94 <_printf_i+0x1a8>
 800adfc:	4616      	mov	r6, r2
 800adfe:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae02:	fb03 5711 	mls	r7, r3, r1, r5
 800ae06:	5dc7      	ldrb	r7, [r0, r7]
 800ae08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae0c:	462f      	mov	r7, r5
 800ae0e:	42bb      	cmp	r3, r7
 800ae10:	460d      	mov	r5, r1
 800ae12:	d9f4      	bls.n	800adfe <_printf_i+0x112>
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d10b      	bne.n	800ae30 <_printf_i+0x144>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	07df      	lsls	r7, r3, #31
 800ae1c:	d508      	bpl.n	800ae30 <_printf_i+0x144>
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	6861      	ldr	r1, [r4, #4]
 800ae22:	4299      	cmp	r1, r3
 800ae24:	bfde      	ittt	le
 800ae26:	2330      	movle	r3, #48	@ 0x30
 800ae28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae30:	1b92      	subs	r2, r2, r6
 800ae32:	6122      	str	r2, [r4, #16]
 800ae34:	f8cd a000 	str.w	sl, [sp]
 800ae38:	464b      	mov	r3, r9
 800ae3a:	aa03      	add	r2, sp, #12
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4640      	mov	r0, r8
 800ae40:	f7ff fee6 	bl	800ac10 <_printf_common>
 800ae44:	3001      	adds	r0, #1
 800ae46:	d14a      	bne.n	800aede <_printf_i+0x1f2>
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	b004      	add	sp, #16
 800ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	f043 0320 	orr.w	r3, r3, #32
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	4833      	ldr	r0, [pc, #204]	@ (800af28 <_printf_i+0x23c>)
 800ae5c:	2778      	movs	r7, #120	@ 0x78
 800ae5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	6831      	ldr	r1, [r6, #0]
 800ae66:	061f      	lsls	r7, r3, #24
 800ae68:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae6c:	d402      	bmi.n	800ae74 <_printf_i+0x188>
 800ae6e:	065f      	lsls	r7, r3, #25
 800ae70:	bf48      	it	mi
 800ae72:	b2ad      	uxthmi	r5, r5
 800ae74:	6031      	str	r1, [r6, #0]
 800ae76:	07d9      	lsls	r1, r3, #31
 800ae78:	bf44      	itt	mi
 800ae7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae7e:	6023      	strmi	r3, [r4, #0]
 800ae80:	b11d      	cbz	r5, 800ae8a <_printf_i+0x19e>
 800ae82:	2310      	movs	r3, #16
 800ae84:	e7ac      	b.n	800ade0 <_printf_i+0xf4>
 800ae86:	4827      	ldr	r0, [pc, #156]	@ (800af24 <_printf_i+0x238>)
 800ae88:	e7e9      	b.n	800ae5e <_printf_i+0x172>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	f023 0320 	bic.w	r3, r3, #32
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	e7f6      	b.n	800ae82 <_printf_i+0x196>
 800ae94:	4616      	mov	r6, r2
 800ae96:	e7bd      	b.n	800ae14 <_printf_i+0x128>
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	6825      	ldr	r5, [r4, #0]
 800ae9c:	6961      	ldr	r1, [r4, #20]
 800ae9e:	1d18      	adds	r0, r3, #4
 800aea0:	6030      	str	r0, [r6, #0]
 800aea2:	062e      	lsls	r6, r5, #24
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	d501      	bpl.n	800aeac <_printf_i+0x1c0>
 800aea8:	6019      	str	r1, [r3, #0]
 800aeaa:	e002      	b.n	800aeb2 <_printf_i+0x1c6>
 800aeac:	0668      	lsls	r0, r5, #25
 800aeae:	d5fb      	bpl.n	800aea8 <_printf_i+0x1bc>
 800aeb0:	8019      	strh	r1, [r3, #0]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	4616      	mov	r6, r2
 800aeb8:	e7bc      	b.n	800ae34 <_printf_i+0x148>
 800aeba:	6833      	ldr	r3, [r6, #0]
 800aebc:	1d1a      	adds	r2, r3, #4
 800aebe:	6032      	str	r2, [r6, #0]
 800aec0:	681e      	ldr	r6, [r3, #0]
 800aec2:	6862      	ldr	r2, [r4, #4]
 800aec4:	2100      	movs	r1, #0
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7f5 fa12 	bl	80002f0 <memchr>
 800aecc:	b108      	cbz	r0, 800aed2 <_printf_i+0x1e6>
 800aece:	1b80      	subs	r0, r0, r6
 800aed0:	6060      	str	r0, [r4, #4]
 800aed2:	6863      	ldr	r3, [r4, #4]
 800aed4:	6123      	str	r3, [r4, #16]
 800aed6:	2300      	movs	r3, #0
 800aed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aedc:	e7aa      	b.n	800ae34 <_printf_i+0x148>
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	4632      	mov	r2, r6
 800aee2:	4649      	mov	r1, r9
 800aee4:	4640      	mov	r0, r8
 800aee6:	47d0      	blx	sl
 800aee8:	3001      	adds	r0, #1
 800aeea:	d0ad      	beq.n	800ae48 <_printf_i+0x15c>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	079b      	lsls	r3, r3, #30
 800aef0:	d413      	bmi.n	800af1a <_printf_i+0x22e>
 800aef2:	68e0      	ldr	r0, [r4, #12]
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	4298      	cmp	r0, r3
 800aef8:	bfb8      	it	lt
 800aefa:	4618      	movlt	r0, r3
 800aefc:	e7a6      	b.n	800ae4c <_printf_i+0x160>
 800aefe:	2301      	movs	r3, #1
 800af00:	4632      	mov	r2, r6
 800af02:	4649      	mov	r1, r9
 800af04:	4640      	mov	r0, r8
 800af06:	47d0      	blx	sl
 800af08:	3001      	adds	r0, #1
 800af0a:	d09d      	beq.n	800ae48 <_printf_i+0x15c>
 800af0c:	3501      	adds	r5, #1
 800af0e:	68e3      	ldr	r3, [r4, #12]
 800af10:	9903      	ldr	r1, [sp, #12]
 800af12:	1a5b      	subs	r3, r3, r1
 800af14:	42ab      	cmp	r3, r5
 800af16:	dcf2      	bgt.n	800aefe <_printf_i+0x212>
 800af18:	e7eb      	b.n	800aef2 <_printf_i+0x206>
 800af1a:	2500      	movs	r5, #0
 800af1c:	f104 0619 	add.w	r6, r4, #25
 800af20:	e7f5      	b.n	800af0e <_printf_i+0x222>
 800af22:	bf00      	nop
 800af24:	0800b445 	.word	0x0800b445
 800af28:	0800b456 	.word	0x0800b456

0800af2c <memmove>:
 800af2c:	4288      	cmp	r0, r1
 800af2e:	b510      	push	{r4, lr}
 800af30:	eb01 0402 	add.w	r4, r1, r2
 800af34:	d902      	bls.n	800af3c <memmove+0x10>
 800af36:	4284      	cmp	r4, r0
 800af38:	4623      	mov	r3, r4
 800af3a:	d807      	bhi.n	800af4c <memmove+0x20>
 800af3c:	1e43      	subs	r3, r0, #1
 800af3e:	42a1      	cmp	r1, r4
 800af40:	d008      	beq.n	800af54 <memmove+0x28>
 800af42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af4a:	e7f8      	b.n	800af3e <memmove+0x12>
 800af4c:	4402      	add	r2, r0
 800af4e:	4601      	mov	r1, r0
 800af50:	428a      	cmp	r2, r1
 800af52:	d100      	bne.n	800af56 <memmove+0x2a>
 800af54:	bd10      	pop	{r4, pc}
 800af56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af5e:	e7f7      	b.n	800af50 <memmove+0x24>

0800af60 <_sbrk_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d06      	ldr	r5, [pc, #24]	@ (800af7c <_sbrk_r+0x1c>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	602b      	str	r3, [r5, #0]
 800af6c:	f7f7 f8c0 	bl	80020f0 <_sbrk>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_sbrk_r+0x1a>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_sbrk_r+0x1a>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	24000340 	.word	0x24000340

0800af80 <memcpy>:
 800af80:	440a      	add	r2, r1
 800af82:	4291      	cmp	r1, r2
 800af84:	f100 33ff 	add.w	r3, r0, #4294967295
 800af88:	d100      	bne.n	800af8c <memcpy+0xc>
 800af8a:	4770      	bx	lr
 800af8c:	b510      	push	{r4, lr}
 800af8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af96:	4291      	cmp	r1, r2
 800af98:	d1f9      	bne.n	800af8e <memcpy+0xe>
 800af9a:	bd10      	pop	{r4, pc}

0800af9c <_realloc_r>:
 800af9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa0:	4680      	mov	r8, r0
 800afa2:	4615      	mov	r5, r2
 800afa4:	460c      	mov	r4, r1
 800afa6:	b921      	cbnz	r1, 800afb2 <_realloc_r+0x16>
 800afa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afac:	4611      	mov	r1, r2
 800afae:	f7ff bc4b 	b.w	800a848 <_malloc_r>
 800afb2:	b92a      	cbnz	r2, 800afc0 <_realloc_r+0x24>
 800afb4:	f7ff fbdc 	bl	800a770 <_free_r>
 800afb8:	2400      	movs	r4, #0
 800afba:	4620      	mov	r0, r4
 800afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc0:	f000 f81a 	bl	800aff8 <_malloc_usable_size_r>
 800afc4:	4285      	cmp	r5, r0
 800afc6:	4606      	mov	r6, r0
 800afc8:	d802      	bhi.n	800afd0 <_realloc_r+0x34>
 800afca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800afce:	d8f4      	bhi.n	800afba <_realloc_r+0x1e>
 800afd0:	4629      	mov	r1, r5
 800afd2:	4640      	mov	r0, r8
 800afd4:	f7ff fc38 	bl	800a848 <_malloc_r>
 800afd8:	4607      	mov	r7, r0
 800afda:	2800      	cmp	r0, #0
 800afdc:	d0ec      	beq.n	800afb8 <_realloc_r+0x1c>
 800afde:	42b5      	cmp	r5, r6
 800afe0:	462a      	mov	r2, r5
 800afe2:	4621      	mov	r1, r4
 800afe4:	bf28      	it	cs
 800afe6:	4632      	movcs	r2, r6
 800afe8:	f7ff ffca 	bl	800af80 <memcpy>
 800afec:	4621      	mov	r1, r4
 800afee:	4640      	mov	r0, r8
 800aff0:	f7ff fbbe 	bl	800a770 <_free_r>
 800aff4:	463c      	mov	r4, r7
 800aff6:	e7e0      	b.n	800afba <_realloc_r+0x1e>

0800aff8 <_malloc_usable_size_r>:
 800aff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affc:	1f18      	subs	r0, r3, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfbc      	itt	lt
 800b002:	580b      	ldrlt	r3, [r1, r0]
 800b004:	18c0      	addlt	r0, r0, r3
 800b006:	4770      	bx	lr

0800b008 <_init>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	bf00      	nop
 800b00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00e:	bc08      	pop	{r3}
 800b010:	469e      	mov	lr, r3
 800b012:	4770      	bx	lr

0800b014 <_fini>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr
