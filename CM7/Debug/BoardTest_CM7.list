
BoardTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b090  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800b330  0800b330  0000c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b420  0800b420  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b420  0800b420  0000c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b428  0800b428  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b428  0800b428  0000c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b42c  0800b42c  0000c42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  0800b430  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  2400006c  0800b49c  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003e8  0800b49c  0000d3e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025aa4  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004771  00000000  00000000  00032b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  000372b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013bc  00000000  00000000  00038c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00046af2  00000000  00000000  00039fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002938b  00000000  00000000  00080ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b51da  00000000  00000000  000a9e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025f033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000732c  00000000  00000000  0025f078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  002663a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b318 	.word	0x0800b318

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800b318 	.word	0x0800b318

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	@ 0x40
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007c2:	4b82      	ldr	r3, [pc, #520]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a80      	ldr	r2, [pc, #512]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b7e      	ldr	r3, [pc, #504]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e0:	4b7a      	ldr	r3, [pc, #488]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a79      	ldr	r2, [pc, #484]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b76      	ldr	r3, [pc, #472]	@ (80009cc <MX_GPIO_Init+0x220>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80007fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b73      	ldr	r3, [pc, #460]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000804:	4a71      	ldr	r2, [pc, #452]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080e:	4b6f      	ldr	r3, [pc, #444]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	623b      	str	r3, [r7, #32]
 800081a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b6b      	ldr	r3, [pc, #428]	@ (80009cc <MX_GPIO_Init+0x220>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000822:	4a6a      	ldr	r2, [pc, #424]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082c:	4b67      	ldr	r3, [pc, #412]	@ (80009cc <MX_GPIO_Init+0x220>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	61fb      	str	r3, [r7, #28]
 8000838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b64      	ldr	r3, [pc, #400]	@ (80009cc <MX_GPIO_Init+0x220>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	4a62      	ldr	r2, [pc, #392]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084a:	4b60      	ldr	r3, [pc, #384]	@ (80009cc <MX_GPIO_Init+0x220>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000858:	4b5c      	ldr	r3, [pc, #368]	@ (80009cc <MX_GPIO_Init+0x220>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085e:	4a5b      	ldr	r2, [pc, #364]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000860:	f043 0310 	orr.w	r3, r3, #16
 8000864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000868:	4b58      	ldr	r3, [pc, #352]	@ (80009cc <MX_GPIO_Init+0x220>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b55      	ldr	r3, [pc, #340]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087c:	4a53      	ldr	r2, [pc, #332]	@ (80009cc <MX_GPIO_Init+0x220>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000886:	4b51      	ldr	r3, [pc, #324]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b4d      	ldr	r3, [pc, #308]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089a:	4a4c      	ldr	r2, [pc, #304]	@ (80009cc <MX_GPIO_Init+0x220>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a4:	4b49      	ldr	r3, [pc, #292]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008b2:	4b46      	ldr	r3, [pc, #280]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	4a44      	ldr	r2, [pc, #272]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c2:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d0:	4b3e      	ldr	r3, [pc, #248]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d6:	4a3d      	ldr	r2, [pc, #244]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e0:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <MX_GPIO_Init+0x220>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GP1_Pin|GP2_Pin|GP3_Pin|GP4_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80008f4:	4836      	ldr	r0, [pc, #216]	@ (80009d0 <MX_GPIO_Init+0x224>)
 80008f6:	f001 fee5 	bl	80026c4 <HAL_GPIO_WritePin>
                          |GP5_Pin|GP6_Pin|GP7_Pin|GP8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_EN_GPIO_Port, MIC_EN_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	4834      	ldr	r0, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x228>)
 8000902:	f001 fedf 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, REDLED1_Pin|REDLED2_Pin|ORANGELED1_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2107      	movs	r1, #7
 800090a:	4833      	ldr	r0, [pc, #204]	@ (80009d8 <MX_GPIO_Init+0x22c>)
 800090c:	f001 feda 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ORANGELED2_Pin|BLUELED1_Pin|BLUELED2_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	211c      	movs	r1, #28
 8000914:	4831      	ldr	r0, [pc, #196]	@ (80009dc <MX_GPIO_Init+0x230>)
 8000916:	f001 fed5 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GP1_Pin|GP2_Pin|GP3_Pin|GP4_Pin
 800091a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GP5_Pin|GP6_Pin|GP7_Pin|GP8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000930:	4619      	mov	r1, r3
 8000932:	4827      	ldr	r0, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0x224>)
 8000934:	f001 fcfe 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_EN_Pin;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(MIC_EN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094e:	4619      	mov	r1, r3
 8000950:	4820      	ldr	r0, [pc, #128]	@ (80009d4 <MX_GPIO_Init+0x228>)
 8000952:	f001 fcef 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = REDLED1_Pin|REDLED2_Pin|ORANGELED1_Pin;
 8000956:	2307      	movs	r3, #7
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	481a      	ldr	r0, [pc, #104]	@ (80009d8 <MX_GPIO_Init+0x22c>)
 800096e:	f001 fce1 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ORANGELED2_Pin|BLUELED1_Pin|BLUELED2_Pin;
 8000972:	231c      	movs	r3, #28
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <MX_GPIO_Init+0x230>)
 800098a:	f001 fcd3 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 800098e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000998:	2301      	movs	r3, #1
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	@ (80009dc <MX_GPIO_Init+0x230>)
 80009a4:	f001 fcc6 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCARD_DETECT_Pin;
 80009a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDCARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_GPIO_Init+0x230>)
 80009be:	f001 fcb9 	bl	8002334 <HAL_GPIO_Init>

}
 80009c2:	bf00      	nop
 80009c4:	3740      	adds	r7, #64	@ 0x40
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58021000 	.word	0x58021000
 80009d4:	58020c00 	.word	0x58020c00
 80009d8:	58022800 	.word	0x58022800
 80009dc:	58021800 	.word	0x58021800

080009e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	@ (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f001 fe9a 	bl	8002754 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fccf 	bl	80013c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f002 fc1d 	bl	800326c <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fcc6 	bl	80013c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f002 fc5f 	bl	8003302 <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fcbd 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000088 	.word	0x24000088
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	307075b1 	.word	0x307075b1

08000a60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0ba      	sub	sp, #232	@ 0xe8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	22c0      	movs	r2, #192	@ 0xc0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 fe51 	bl	800a728 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a26      	ldr	r2, [pc, #152]	@ (8000b24 <HAL_I2C_MspInit+0xc4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d145      	bne.n	8000b1c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a90:	f04f 0208 	mov.w	r2, #8
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 fd72 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ab2:	f000 fc89 	bl	80013c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad4:	23c0      	movs	r3, #192	@ 0xc0
 8000ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <HAL_I2C_MspInit+0xcc>)
 8000afa:	f001 fc1b 	bl	8002334 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000b06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_I2C_MspInit+0xc8>)
 8000b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	37e8      	adds	r7, #232	@ 0xe8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	58020400 	.word	0x58020400

08000b30 <_ZN6driver3imuC1EP19__I2C_HandleTypeDefP12GPIO_TypeDeft>:
#include "imu.hpp"
#include <stdio.h>

namespace driver{

imu::imu(I2C_HandleTypeDef *i2c, GPIO_TypeDef* gyro_drdy_port, uint16_t gyro_drdy_pin){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	807b      	strh	r3, [r7, #2]
	uint8_t temp_reg;
	imu_conf.i2c = i2c;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	601a      	str	r2, [r3, #0]
	imu_conf.gyro_drdy_port = gyro_drdy_port;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	605a      	str	r2, [r3, #4]
	imu_conf.gyro_drdy_pin = gyro_drdy_pin;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	887a      	ldrh	r2, [r7, #2]
 8000b4e:	811a      	strh	r2, [r3, #8]

	// Gyro setup
	uint8_t value;
	value = i2c_readData(settings::GYRO_ADDR, settings::GYRO_WHO_AM_I);
 8000b50:	220f      	movs	r2, #15
 8000b52:	21d2      	movs	r1, #210	@ 0xd2
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f000 f878 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
	// Highpass filter - Normal mode, 0.09Hz
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG2, 0x09);
 8000b5e:	2309      	movs	r3, #9
 8000b60:	2221      	movs	r2, #33	@ 0x21
 8000b62:	21d2      	movs	r1, #210	@ 0xd2
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f897 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Disable interrupts, enable data ready flag
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG3, 0x08);
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	2222      	movs	r2, #34	@ 0x22
 8000b6e:	21d2      	movs	r1, #210	@ 0xd2
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 f891 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Scale selection 500dps, block data update until data is read
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG4, 0x90);
 8000b76:	2390      	movs	r3, #144	@ 0x90
 8000b78:	2223      	movs	r2, #35	@ 0x23
 8000b7a:	21d2      	movs	r1, #210	@ 0xd2
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f88b 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// No FIFO, no mem reboot, enable high-pass filter
	// LP1 0b00, LP1+HP 0b01, LP1+HP+LP2 0b10/0b11
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG5, 0x13);
 8000b82:	2313      	movs	r3, #19
 8000b84:	2224      	movs	r2, #36	@ 0x24
 8000b86:	21d2      	movs	r1, #210	@ 0xd2
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f885 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Set data rate, bandwidth, and enable channels
	temp_reg = settings::GYRO_DR_760HZ | settings::GYRO_BW_HIGH | settings::GYRO_PD_ON
 8000b8e:	23ff      	movs	r3, #255	@ 0xff
 8000b90:	75bb      	strb	r3, [r7, #22]
			| settings::GYRO_AX_EN | settings::GYRO_AY_EN | settings::GYRO_AZ_EN;
	i2c_writeData(settings::GYRO_ADDR, settings::GYRO_CTRL_REG1, temp_reg);
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	2220      	movs	r2, #32
 8000b96:	21d2      	movs	r1, #210	@ 0xd2
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f000 f87d 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>

	// Mag setup
	// temperature sensor on, 220Hz data rate
	temp_reg = settings::MAG_DR_220HZ | 0x80;
 8000b9e:	239c      	movs	r3, #156	@ 0x9c
 8000ba0:	75bb      	strb	r3, [r7, #22]
	i2c_writeData(settings::MAG_ADDR, settings::MAG_CRA_REG, temp_reg);
 8000ba2:	7dbb      	ldrb	r3, [r7, #22]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	213c      	movs	r1, #60	@ 0x3c
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f875 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// gain settings
	temp_reg = settings::MAG_GN_1G3;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	75bb      	strb	r3, [r7, #22]
	i2c_writeData(settings::MAG_ADDR, settings::MAG_CRB_REG, temp_reg);
 8000bb2:	7dbb      	ldrb	r3, [r7, #22]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	213c      	movs	r1, #60	@ 0x3c
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f86d 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// enable continuous conversion
	i2c_writeData(settings::MAG_ADDR, settings::MAG_MR_REG, 0);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	213c      	movs	r1, #60	@ 0x3c
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f000 f867 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// read dummy addr
	value = i2c_readData(settings::MAG_ADDR, settings::MAG_IRA_REG);
 8000bca:	220a      	movs	r2, #10
 8000bcc:	213c      	movs	r1, #60	@ 0x3c
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 f83b 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	75fb      	strb	r3, [r7, #23]
	value = i2c_readData(settings::MAG_ADDR, settings::MAG_IRB_REG);
 8000bd8:	220b      	movs	r2, #11
 8000bda:	213c      	movs	r1, #60	@ 0x3c
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f834 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
	value = i2c_readData(settings::MAG_ADDR, settings::MAG_IRC_REG);
 8000be6:	220c      	movs	r2, #12
 8000be8:	213c      	movs	r1, #60	@ 0x3c
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f000 f82d 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]

	// Accel setup
	temp_reg = settings::ACCEL_DR_100HZ | settings::ACCEL_AX_EN | settings::ACCEL_AY_EN | settings::ACCEL_AZ_EN;
 8000bf4:	2357      	movs	r3, #87	@ 0x57
 8000bf6:	75bb      	strb	r3, [r7, #22]
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG1, temp_reg);
 8000bf8:	7dbb      	ldrb	r3, [r7, #22]
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2132      	movs	r1, #50	@ 0x32
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f000 f84a 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG2, 0);
 8000c04:	2300      	movs	r3, #0
 8000c06:	2221      	movs	r2, #33	@ 0x21
 8000c08:	2132      	movs	r1, #50	@ 0x32
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 f844 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// Set DRDY1 source to INT1
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG3, 0x10);
 8000c10:	2310      	movs	r3, #16
 8000c12:	2222      	movs	r2, #34	@ 0x22
 8000c14:	2132      	movs	r1, #50	@ 0x32
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f000 f83e 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	// 0x00 Set Hi-res mode off -- 0x08 Hi-res mode on
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG4, 0x88);
 8000c1c:	2388      	movs	r3, #136	@ 0x88
 8000c1e:	2223      	movs	r2, #35	@ 0x23
 8000c20:	2132      	movs	r1, #50	@ 0x32
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f000 f838 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG5, 0);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2224      	movs	r2, #36	@ 0x24
 8000c2c:	2132      	movs	r1, #50	@ 0x32
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f000 f832 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG6, 0);
 8000c34:	2300      	movs	r3, #0
 8000c36:	2225      	movs	r2, #37	@ 0x25
 8000c38:	2132      	movs	r1, #50	@ 0x32
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f000 f82c 	bl	8000c98 <_ZN6driver3imu13i2c_writeDataEthh>

}
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_ZN6driver3imu12i2c_readDataEth>:
	i2c_writeData(settings::MAG_ADDR, settings::MAG_MR_REG, 0x03);
	//Shut down Accel
	i2c_writeData(settings::ACCEL_ADDR, settings::ACCEL_CTRL_REG1, 0);
}

uint8_t imu::i2c_readData(uint16_t addr, uint8_t reg){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b088      	sub	sp, #32
 8000c4e:	af04      	add	r7, sp, #16
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(imu_conf.i2c, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	787b      	ldrb	r3, [r7, #1]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	8879      	ldrh	r1, [r7, #2]
 8000c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 030e 	add.w	r3, r7, #14
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f001 ff19 	bl	8002ab4 <HAL_I2C_Mem_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d000      	beq.n	8000c8e <_ZN6driver3imu12i2c_readDataEth+0x44>
		__asm("NOP");
 8000c8c:	bf00      	nop
	return value;
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZN6driver3imu13i2c_writeDataEthh>:

void imu::i2c_writeData(uint16_t addr, uint8_t reg, uint8_t val){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af04      	add	r7, sp, #16
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	807b      	strh	r3, [r7, #2]
 8000caa:	460b      	mov	r3, r1
 8000cac:	707b      	strb	r3, [r7, #1]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	703b      	strb	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(imu_conf.i2c, addr, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 0x1000);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	8879      	ldrh	r1, [r7, #2]
 8000cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	463b      	mov	r3, r7
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f001 fddc 	bl	800288c <HAL_I2C_Mem_Write>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d000      	beq.n	8000ce0 <_ZN6driver3imu13i2c_writeDataEthh+0x48>
		__asm("NOP");
 8000cde:	bf00      	nop
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_ZN6driver3imu8getAccelEPs>:
	uint8_t temp_reg;
	temp_reg = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_TEMP);
	return temp_reg;
}

void imu::getAccel(int16_t *resV){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	uint8_t temp_reg[6];
	int16_t raw_data[3];

	temp_reg[0] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_X_L);
 8000cf2:	2228      	movs	r2, #40	@ 0x28
 8000cf4:	2132      	movs	r1, #50	@ 0x32
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa7 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	743b      	strb	r3, [r7, #16]
	temp_reg[1] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_X_H);
 8000d00:	2229      	movs	r2, #41	@ 0x29
 8000d02:	2132      	movs	r1, #50	@ 0x32
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffa0 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	747b      	strb	r3, [r7, #17]
	temp_reg[2] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Y_L);
 8000d0e:	222a      	movs	r2, #42	@ 0x2a
 8000d10:	2132      	movs	r1, #50	@ 0x32
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff99 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	74bb      	strb	r3, [r7, #18]
	temp_reg[3] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Y_H);
 8000d1c:	222b      	movs	r2, #43	@ 0x2b
 8000d1e:	2132      	movs	r1, #50	@ 0x32
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff92 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d26:	4603      	mov	r3, r0
 8000d28:	74fb      	strb	r3, [r7, #19]
	temp_reg[4] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Z_L);
 8000d2a:	222c      	movs	r2, #44	@ 0x2c
 8000d2c:	2132      	movs	r1, #50	@ 0x32
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff8b 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d34:	4603      	mov	r3, r0
 8000d36:	753b      	strb	r3, [r7, #20]
	temp_reg[5] = i2c_readData(settings::ACCEL_ADDR, settings::ACCEL_OUT_Z_H);
 8000d38:	222d      	movs	r2, #45	@ 0x2d
 8000d3a:	2132      	movs	r1, #50	@ 0x32
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff84 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000d42:	4603      	mov	r3, r0
 8000d44:	757b      	strb	r3, [r7, #21]

	raw_data[0] = (int16_t)(((uint16_t)temp_reg[1] << 8) + temp_reg[0]);
 8000d46:	7c7b      	ldrb	r3, [r7, #17]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	7c3a      	ldrb	r2, [r7, #16]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	813b      	strh	r3, [r7, #8]
	raw_data[1] = (int16_t)(((uint16_t)temp_reg[3] << 8) + temp_reg[2]);
 8000d56:	7cfb      	ldrb	r3, [r7, #19]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	7cba      	ldrb	r2, [r7, #18]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	817b      	strh	r3, [r7, #10]
	raw_data[2] = (int16_t)(((uint16_t)temp_reg[5] << 8) + temp_reg[4]);
 8000d66:	7d7b      	ldrb	r3, [r7, #21]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	7d3a      	ldrb	r2, [r7, #20]
 8000d6e:	4413      	add	r3, r2
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	81bb      	strh	r3, [r7, #12]

	resV[0] = raw_data[0];
 8000d76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	801a      	strh	r2, [r3, #0]
	resV[1] = raw_data[1];
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3302      	adds	r3, #2
 8000d82:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d86:	801a      	strh	r2, [r3, #0]
	resV[2] = raw_data[2];
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d90:	801a      	strh	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN6driver3imu7getGyroEPs>:

void imu::getGyro(int16_t *resV){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	uint8_t temp_reg[6];
	int16_t raw_data[3];

	temp_reg[0] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_X_L);
 8000da4:	2228      	movs	r2, #40	@ 0x28
 8000da6:	21d2      	movs	r1, #210	@ 0xd2
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff4e 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dae:	4603      	mov	r3, r0
 8000db0:	743b      	strb	r3, [r7, #16]
	temp_reg[1] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_X_H);
 8000db2:	2229      	movs	r2, #41	@ 0x29
 8000db4:	21d2      	movs	r1, #210	@ 0xd2
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff47 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	747b      	strb	r3, [r7, #17]
	temp_reg[2] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Y_L);
 8000dc0:	222a      	movs	r2, #42	@ 0x2a
 8000dc2:	21d2      	movs	r1, #210	@ 0xd2
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff40 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	74bb      	strb	r3, [r7, #18]
	temp_reg[3] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Y_H);
 8000dce:	222b      	movs	r2, #43	@ 0x2b
 8000dd0:	21d2      	movs	r1, #210	@ 0xd2
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff39 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	74fb      	strb	r3, [r7, #19]
	temp_reg[4] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Z_L);
 8000ddc:	222c      	movs	r2, #44	@ 0x2c
 8000dde:	21d2      	movs	r1, #210	@ 0xd2
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff32 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000de6:	4603      	mov	r3, r0
 8000de8:	753b      	strb	r3, [r7, #20]
	temp_reg[5] = i2c_readData(settings::GYRO_ADDR, settings::GYRO_OUT_Z_H);
 8000dea:	222d      	movs	r2, #45	@ 0x2d
 8000dec:	21d2      	movs	r1, #210	@ 0xd2
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff2b 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000df4:	4603      	mov	r3, r0
 8000df6:	757b      	strb	r3, [r7, #21]

	raw_data[0] = (int16_t)(((uint16_t)temp_reg[1] << 8) + temp_reg[0]);
 8000df8:	7c7b      	ldrb	r3, [r7, #17]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	7c3a      	ldrb	r2, [r7, #16]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	813b      	strh	r3, [r7, #8]
	raw_data[1] = (int16_t)(((uint16_t)temp_reg[3] << 8) + temp_reg[2]);
 8000e08:	7cfb      	ldrb	r3, [r7, #19]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	7cba      	ldrb	r2, [r7, #18]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	817b      	strh	r3, [r7, #10]
	raw_data[2] = (int16_t)(((uint16_t)temp_reg[5] << 8) + temp_reg[4]);
 8000e18:	7d7b      	ldrb	r3, [r7, #21]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	7d3a      	ldrb	r2, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	81bb      	strh	r3, [r7, #12]

	resV[0] = raw_data[0];
 8000e28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	801a      	strh	r2, [r3, #0]
	resV[1] = raw_data[1];
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e38:	801a      	strh	r2, [r3, #0]
	resV[2] = raw_data[2];
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e42:	801a      	strh	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_ZN6driver3imu11readRefGyroEv>:

uint8_t imu::readRefGyro(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = i2c_readData(settings::GYRO_ADDR, settings::GYRO_REFERENCE);
 8000e54:	2225      	movs	r2, #37	@ 0x25
 8000e56:	21d2      	movs	r1, #210	@ 0xd2
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fef6 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
	return temp;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_ZN6driver3imu6getMagEPs>:

void imu::getMag(int16_t *resV){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	uint8_t temp_reg[6];
	temp_reg[0] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_X_H);
 8000e76:	2203      	movs	r2, #3
 8000e78:	213c      	movs	r1, #60	@ 0x3c
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fee5 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e80:	4603      	mov	r3, r0
 8000e82:	723b      	strb	r3, [r7, #8]
	temp_reg[1] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_X_L);
 8000e84:	2204      	movs	r2, #4
 8000e86:	213c      	movs	r1, #60	@ 0x3c
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fede 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	727b      	strb	r3, [r7, #9]
	temp_reg[2] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Y_H);
 8000e92:	2205      	movs	r2, #5
 8000e94:	213c      	movs	r1, #60	@ 0x3c
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fed7 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	72bb      	strb	r3, [r7, #10]
	temp_reg[3] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Y_L);
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	213c      	movs	r1, #60	@ 0x3c
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fed0 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	72fb      	strb	r3, [r7, #11]
	temp_reg[4] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Z_H);
 8000eae:	2207      	movs	r2, #7
 8000eb0:	213c      	movs	r1, #60	@ 0x3c
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fec9 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	733b      	strb	r3, [r7, #12]
	temp_reg[5] = i2c_readData(settings::MAG_ADDR, settings::MAG_OUT_Z_L);
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	213c      	movs	r1, #60	@ 0x3c
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fec2 	bl	8000c4a <_ZN6driver3imu12i2c_readDataEth>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	737b      	strb	r3, [r7, #13]

	resV[0] = (int16_t)(((uint16_t)temp_reg[0] << 8) + temp_reg[1]);
 8000eca:	7a3b      	ldrb	r3, [r7, #8]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	7a7a      	ldrb	r2, [r7, #9]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	801a      	strh	r2, [r3, #0]
	resV[1] = (int16_t)(((uint16_t)temp_reg[2] << 8) + temp_reg[3]);
 8000edc:	7abb      	ldrb	r3, [r7, #10]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	7afa      	ldrb	r2, [r7, #11]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3302      	adds	r3, #2
 8000eec:	b212      	sxth	r2, r2
 8000eee:	801a      	strh	r2, [r3, #0]
	resV[2] = (int16_t)(((uint16_t)temp_reg[4] << 8) + temp_reg[5]);
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	7b7a      	ldrb	r2, [r7, #13]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3304      	adds	r3, #4
 8000f00:	b212      	sxth	r2, r2
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Process_LEDs_Buttons>:
 */

#include "ledsbutton.h"
#include "gpio.h"

void Process_LEDs_Buttons(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

    if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET)
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	4835      	ldr	r0, [pc, #212]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f14:	f001 fbbe 	bl	8002694 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d12c      	bne.n	8000f78 <Process_LEDs_Buttons+0x6c>
    {
        HAL_GPIO_WritePin(REDLED2_GPIO_Port, REDLED2_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2102      	movs	r1, #2
 8000f22:	4832      	ldr	r0, [pc, #200]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f24:	f001 fbce 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	@ 0x64
 8000f2a:	f001 f84b 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(REDLED1_GPIO_Port, REDLED1_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2101      	movs	r1, #1
 8000f32:	482e      	ldr	r0, [pc, #184]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f34:	f001 fbc6 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f38:	2064      	movs	r0, #100	@ 0x64
 8000f3a:	f001 f843 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED1_GPIO_Port, ORANGELED1_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2104      	movs	r1, #4
 8000f42:	482a      	ldr	r0, [pc, #168]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f44:	f001 fbbe 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f001 f83b 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED2_GPIO_Port, ORANGELED2_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2104      	movs	r1, #4
 8000f52:	4825      	ldr	r0, [pc, #148]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f54:	f001 fbb6 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	@ 0x64
 8000f5a:	f001 f833 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED1_GPIO_Port, BLUELED1_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2108      	movs	r1, #8
 8000f62:	4821      	ldr	r0, [pc, #132]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f64:	f001 fbae 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f68:	2064      	movs	r0, #100	@ 0x64
 8000f6a:	f001 f82b 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED2_GPIO_Port, BLUELED2_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2110      	movs	r1, #16
 8000f72:	481d      	ldr	r0, [pc, #116]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f74:	f001 fba6 	bl	80026c4 <HAL_GPIO_WritePin>
    }


    if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET)
 8000f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7c:	481a      	ldr	r0, [pc, #104]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000f7e:	f001 fb89 	bl	8002694 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d12c      	bne.n	8000fe2 <Process_LEDs_Buttons+0xd6>
    {
        HAL_GPIO_WritePin(REDLED2_GPIO_Port, REDLED2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f8e:	f001 fb99 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f92:	2064      	movs	r0, #100	@ 0x64
 8000f94:	f001 f816 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(REDLED1_GPIO_Port, REDLED1_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000f9e:	f001 fb91 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	@ 0x64
 8000fa4:	f001 f80e 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED1_GPIO_Port, ORANGELED1_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	480f      	ldr	r0, [pc, #60]	@ (8000fec <Process_LEDs_Buttons+0xe0>)
 8000fae:	f001 fb89 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	@ 0x64
 8000fb4:	f001 f806 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(ORANGELED2_GPIO_Port, ORANGELED2_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000fbe:	f001 fb81 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f000 fffe 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED1_GPIO_Port, BLUELED1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2108      	movs	r1, #8
 8000fcc:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000fce:	f001 fb79 	bl	80026c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000fd2:	2064      	movs	r0, #100	@ 0x64
 8000fd4:	f000 fff6 	bl	8001fc4 <HAL_Delay>
        HAL_GPIO_WritePin(BLUELED2_GPIO_Port, BLUELED2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <Process_LEDs_Buttons+0xdc>)
 8000fde:	f001 fb71 	bl	80026c4 <HAL_GPIO_WritePin>
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	58021800 	.word	0x58021800
 8000fec:	58022800 	.word	0x58022800

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	@ 0x30
 8000ff4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ff6:	f000 f9bb 	bl	8001370 <_ZL10MPU_Configv>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ffa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001000:	bf00      	nop
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <main+0x170>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <main+0x2c>
 800100e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd01      	ble.n	800101c <main+0x2c>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <main+0x2e>
 800101c:	2300      	movs	r3, #0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ef      	bne.n	8001002 <main+0x12>
  if ( timeout < 0 )
 8001022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001024:	2b00      	cmp	r3, #0
 8001026:	da01      	bge.n	800102c <main+0x3c>
  {
  Error_Handler();
 8001028:	f000 f9ce 	bl	80013c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 ff38 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f8a0 	bl	8001174 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001034:	f000 f962 	bl	80012fc <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <main+0x170>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	4a48      	ldr	r2, [pc, #288]	@ (8001160 <main+0x170>)
 8001040:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001048:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <main+0x170>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001056:	2000      	movs	r0, #0
 8001058:	f001 fb4e 	bl	80026f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800105c:	2100      	movs	r1, #0
 800105e:	2000      	movs	r0, #0
 8001060:	f001 fb64 	bl	800272c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001064:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800106a:	bf00      	nop
 800106c:	4b3c      	ldr	r3, [pc, #240]	@ (8001160 <main+0x170>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <main+0x96>
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800107e:	2b00      	cmp	r3, #0
 8001080:	dd01      	ble.n	8001086 <main+0x96>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <main+0x98>
 8001086:	2300      	movs	r3, #0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ef      	bne.n	800106c <main+0x7c>
if ( timeout < 0 )
 800108c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108e:	2b00      	cmp	r3, #0
 8001090:	da01      	bge.n	8001096 <main+0xa6>
{
Error_Handler();
 8001092:	f000 f999 	bl	80013c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f7ff fb89 	bl	80007ac <MX_GPIO_Init>
//  MX_SDMMC2_SD_Init();
//  MX_ETH_Init();
  MX_QUADSPI_Init();
 800109a:	f000 f99b 	bl	80013d4 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 800109e:	f7ff fc9f 	bl	80009e0 <MX_I2C1_Init>
  MX_SPI3_Init();
 80010a2:	f000 fa9f 	bl	80015e4 <MX_SPI3_Init>
  MX_UART5_Init();
 80010a6:	f000 fe1b 	bl	8001ce0 <MX_UART5_Init>
//  MX_USB_OTG_FS_PCD_Init();
  MX_TIM3_Init();
 80010aa:	f000 fc75 	bl	8001998 <MX_TIM3_Init>
//  MX_ADC1_Init();
//  MX_ADC2_Init();
//  MX_DAC1_Init();
//  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  Servo_Init(&htim3);
 80010ae:	482d      	ldr	r0, [pc, #180]	@ (8001164 <main+0x174>)
 80010b0:	f000 fa62 	bl	8001578 <Servo_Init>
  UART_Test_Init();
 80010b4:	f000 fd6c 	bl	8001b90 <UART_Test_Init>
  UART_Send_String("UART5 Test Initialized!\r\n");
 80010b8:	482b      	ldr	r0, [pc, #172]	@ (8001168 <main+0x178>)
 80010ba:	f000 fd77 	bl	8001bac <UART_Send_String>
  printf("Teszt\r\n");
 80010be:	482b      	ldr	r0, [pc, #172]	@ (800116c <main+0x17c>)
 80010c0:	f009 fa1a 	bl	800a4f8 <puts>
  Test_SPI_Communication();
 80010c4:	f000 fb78 	bl	80017b8 <Test_SPI_Communication>

  driver::imu sensor = driver::imu(&hi2c1, nullptr, 0);
 80010c8:	f107 0020 	add.w	r0, r7, #32
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	4927      	ldr	r1, [pc, #156]	@ (8001170 <main+0x180>)
 80010d2:	f7ff fd2d 	bl	8000b30 <_ZN6driver3imuC1EP19__I2C_HandleTypeDefP12GPIO_TypeDeft>
  	  int16_t gyro_val[3];
      int16_t mag_val[3];
      int16_t acc_val[3];

      sensor.getGyro(gyro_val);
 80010d6:	f107 0218 	add.w	r2, r7, #24
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fe5a 	bl	8000d9a <_ZN6driver3imu7getGyroEPs>
      sensor.getAccel(acc_val);
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdf9 	bl	8000ce8 <_ZN6driver3imu8getAccelEPs>
      sensor.getMag(mag_val);
 80010f6:	f107 0210 	add.w	r2, r7, #16
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff feb3 	bl	8000e6c <_ZN6driver3imu6getMagEPs>

      sensor.readRefGyro();
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe9e 	bl	8000e4c <_ZN6driver3imu11readRefGyroEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_LEDs_Buttons();
 8001110:	f7ff fefc 	bl	8000f0c <Process_LEDs_Buttons>
	  Servo_TestFixedPositions(&htim3);
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <main+0x174>)
 8001116:	f000 fa47 	bl	80015a8 <Servo_TestFixedPositions>
//	  UART_Send_String("Hello from STM32 UART5!\r\n");
	  sensor.getMag(mag_val);
 800111a:	f107 0210 	add.w	r2, r7, #16
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fea1 	bl	8000e6c <_ZN6driver3imu6getMagEPs>
	  sensor.getAccel(acc_val);
 800112a:	f107 0208 	add.w	r2, r7, #8
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fdd7 	bl	8000ce8 <_ZN6driver3imu8getAccelEPs>
	  sensor.getGyro(gyro_val);
 800113a:	f107 0218 	add.w	r2, r7, #24
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe28 	bl	8000d9a <_ZN6driver3imu7getGyroEPs>

	  Send_IMU_Data(gyro_val, mag_val, acc_val);
 800114a:	f107 0208 	add.w	r2, r7, #8
 800114e:	f107 0110 	add.w	r1, r7, #16
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fd60 	bl	8001c1c <Send_IMU_Data>
	  Process_LEDs_Buttons();
 800115c:	bf00      	nop
 800115e:	e7d7      	b.n	8001110 <main+0x120>
 8001160:	58024400 	.word	0x58024400
 8001164:	240001b4 	.word	0x240001b4
 8001168:	0800b330 	.word	0x0800b330
 800116c:	0800b34c 	.word	0x0800b34c
 8001170:	24000088 	.word	0x24000088

08001174 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09e      	sub	sp, #120	@ 0x78
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117e:	224c      	movs	r2, #76	@ 0x4c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fad0 	bl	800a728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2220      	movs	r2, #32
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f009 fac9 	bl	800a728 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001196:	2002      	movs	r0, #2
 8001198:	f002 f900 	bl	800339c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b53      	ldr	r3, [pc, #332]	@ (80012f0 <_Z18SystemClock_Configv+0x17c>)
 80011a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a4:	4a52      	ldr	r2, [pc, #328]	@ (80012f0 <_Z18SystemClock_Configv+0x17c>)
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011ac:	4b50      	ldr	r3, [pc, #320]	@ (80012f0 <_Z18SystemClock_Configv+0x17c>)
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 80011bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ce:	bf00      	nop
 80011d0:	4b48      	ldr	r3, [pc, #288]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b43      	ldr	r3, [pc, #268]	@ (80012f8 <_Z18SystemClock_Configv+0x184>)
 80011ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ee:	4a42      	ldr	r2, [pc, #264]	@ (80012f8 <_Z18SystemClock_Configv+0x184>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011f8:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <_Z18SystemClock_Configv+0x184>)
 80011fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b3a      	ldr	r3, [pc, #232]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a39      	ldr	r2, [pc, #228]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 8001210:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <_Z18SystemClock_Configv+0x17c>)
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <_Z18SystemClock_Configv+0x17c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800122c:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <_Z18SystemClock_Configv+0x17c>)
 800122e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001238:	bf00      	nop
 800123a:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <_Z18SystemClock_Configv+0x180>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f3      	bne.n	800123a <_Z18SystemClock_Configv+0xc6>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001252:	2321      	movs	r3, #33	@ 0x21
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001256:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001264:	2302      	movs	r3, #2
 8001266:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 800126c:	23f0      	movs	r3, #240	@ 0xf0
 800126e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001274:	2305      	movs	r3, #5
 8001276:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800127c:	2308      	movs	r3, #8
 800127e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001280:	2300      	movs	r3, #0
 8001282:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128c:	4618      	mov	r0, r3
 800128e:	f002 f999 	bl	80035c4 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf14      	ite	ne
 8001298:	2301      	movne	r3, #1
 800129a:	2300      	moveq	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <_Z18SystemClock_Configv+0x132>
  {
    Error_Handler();
 80012a2:	f000 f891 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	233f      	movs	r3, #63	@ 0x3f
 80012a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2303      	movs	r3, #3
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012b2:	2308      	movs	r3, #8
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012b6:	2340      	movs	r3, #64	@ 0x40
 80012b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012ba:	2340      	movs	r3, #64	@ 0x40
 80012bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012c4:	2340      	movs	r3, #64	@ 0x40
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2104      	movs	r1, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fdd2 	bl	8003e78 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <_Z18SystemClock_Configv+0x174>
  {
    Error_Handler();
 80012e4:	f000 f870 	bl	80013c8 <Error_Handler>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3778      	adds	r7, #120	@ 0x78
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58000400 	.word	0x58000400
 80012f4:	58024800 	.word	0x58024800
 80012f8:	58024400 	.word	0x58024400

080012fc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0b0      	sub	sp, #192	@ 0xc0
 8001300:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	22c0      	movs	r2, #192	@ 0xc0
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f009 fa0d 	bl	800a728 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800130e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 800131a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800131e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f934 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <_Z24PeriphCommonClock_Configv+0x40>
  {
    Error_Handler();
 8001338:	f000 f846 	bl	80013c8 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	37c0      	adds	r7, #192	@ 0xc0
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_write>:

/* USER CODE BEGIN 4 */
extern "C" int _write(int fd, char *ptr, int len){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	b29a      	uxth	r2, r3
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	4804      	ldr	r0, [pc, #16]	@ (800136c <_write+0x28>)
 800135c:	f006 fffa 	bl	8008354 <HAL_UART_Transmit>
    return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000204 	.word	0x24000204

08001370 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001382:	f000 ff5f 	bl	8002244 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001386:	2301      	movs	r3, #1
 8001388:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800138a:	2300      	movs	r3, #0
 800138c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001392:	231f      	movs	r3, #31
 8001394:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001396:	2387      	movs	r3, #135	@ 0x87
 8001398:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800139a:	2300      	movs	r3, #0
 800139c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800139e:	2300      	movs	r3, #0
 80013a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013a2:	2301      	movs	r3, #1
 80013a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013b2:	463b      	mov	r3, r7
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 ff7d 	bl	80022b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013ba:	2004      	movs	r0, #4
 80013bc:	f000 ff5a 	bl	8002274 <HAL_MPU_Enable>

}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <Error_Handler+0x8>

080013d4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <MX_QUADSPI_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013e0:	22ff      	movs	r2, #255	@ 0xff
 80013e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013f2:	2219      	movs	r2, #25
 80013f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_QUADSPI_Init+0x50>)
 8001410:	f002 f81e 	bl	8003450 <HAL_QSPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800141a:	f7ff ffd5 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	240000dc 	.word	0x240000dc
 8001428:	52005000 	.word	0x52005000

0800142c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0bc      	sub	sp, #240	@ 0xf0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	22c0      	movs	r2, #192	@ 0xc0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f009 f96b 	bl	800a728 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a44      	ldr	r2, [pc, #272]	@ (8001568 <HAL_QSPI_MspInit+0x13c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	f040 8081 	bne.w	8001560 <HAL_QSPI_MspInit+0x134>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800145e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800146a:	2300      	movs	r3, #0
 800146c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f88c 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800147e:	f7ff ffa3 	bl	80013c8 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001482:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 8001484:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001488:	4a38      	ldr	r2, [pc, #224]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001492:	4b36      	ldr	r3, [pc, #216]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 8001494:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a0:	4b32      	ldr	r3, [pc, #200]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a6:	4a31      	ldr	r2, [pc, #196]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c4:	4a29      	ldr	r2, [pc, #164]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_QSPI_MspInit+0x140>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80014dc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80014e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014f6:	2309      	movs	r3, #9
 80014f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001500:	4619      	mov	r1, r3
 8001502:	481b      	ldr	r0, [pc, #108]	@ (8001570 <HAL_QSPI_MspInit+0x144>)
 8001504:	f000 ff16 	bl	8002334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001508:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800150c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001522:	230a      	movs	r3, #10
 8001524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001528:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800152c:	4619      	mov	r1, r3
 800152e:	4810      	ldr	r0, [pc, #64]	@ (8001570 <HAL_QSPI_MspInit+0x144>)
 8001530:	f000 ff00 	bl	8002334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800154e:	2309      	movs	r3, #9
 8001550:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <HAL_QSPI_MspInit+0x148>)
 800155c:	f000 feea 	bl	8002334 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	37f0      	adds	r7, #240	@ 0xf0
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	52005000 	.word	0x52005000
 800156c:	58024400 	.word	0x58024400
 8001570:	58021400 	.word	0x58021400
 8001574:	58020400 	.word	0x58020400

08001578 <Servo_Init>:
 *      Author: Huni
 */

#include "servotest.h"

void Servo_Init(TIM_HandleTypeDef *htim) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f005 fd56 	bl	8007034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001588:	2104      	movs	r1, #4
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f005 fd52 	bl	8007034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001590:	2108      	movs	r1, #8
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f005 fd4e 	bl	8007034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001598:	210c      	movs	r1, #12
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 fd4a 	bl	8007034 <HAL_TIM_PWM_Start>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <Servo_TestFixedPositions>:

void Servo_TestFixedPositions(TIM_HandleTypeDef *htim) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 500);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015b8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 1500);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 2000);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80015cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 2500);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80015d6:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80015e8:	4b28      	ldr	r3, [pc, #160]	@ (800168c <MX_SPI3_Init+0xa8>)
 80015ea:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <MX_SPI3_Init+0xac>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b27      	ldr	r3, [pc, #156]	@ (800168c <MX_SPI3_Init+0xa8>)
 80015f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <MX_SPI3_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <MX_SPI3_Init+0xa8>)
 80015fe:	2207      	movs	r2, #7
 8001600:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001608:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <MX_SPI3_Init+0xa8>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001612:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001616:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_SPI3_Init+0xa8>)
 800161a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800161e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_SPI3_Init+0xa8>)
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001634:	2200      	movs	r2, #0
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_SPI3_Init+0xa8>)
 800163a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_SPI3_Init+0xa8>)
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_SPI3_Init+0xa8>)
 800165a:	2200      	movs	r2, #0
 800165c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001660:	2200      	movs	r2, #0
 8001662:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_SPI3_Init+0xa8>)
 800166c:	2200      	movs	r2, #0
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_SPI3_Init+0xa8>)
 8001678:	f004 fdb6 	bl	80061e8 <HAL_SPI_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001682:	f7ff fea1 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	24000128 	.word	0x24000128
 8001690:	40003c00 	.word	0x40003c00

08001694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ba      	sub	sp, #232	@ 0xe8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	22c0      	movs	r2, #192	@ 0xc0
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f009 f837 	bl	800a728 <memset>
  if(spiHandle->Instance==SPI3)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <HAL_SPI_MspInit+0xc4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d145      	bne.n	8001750 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80016c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 ff59 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80016e4:	f7ff fe70 	bl	80013c8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016e8:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <HAL_SPI_MspInit+0xc8>)
 80016ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ee:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <HAL_SPI_MspInit+0xc8>)
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_SPI_MspInit+0xc8>)
 80016fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_SPI_MspInit+0xc8>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170c:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_SPI_MspInit+0xc8>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_SPI_MspInit+0xc8>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001724:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800173e:	2306      	movs	r3, #6
 8001740:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <HAL_SPI_MspInit+0xcc>)
 800174c:	f000 fdf2 	bl	8002334 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	37e8      	adds	r7, #232	@ 0xe8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40003c00 	.word	0x40003c00
 800175c:	58024400 	.word	0x58024400
 8001760:	58020800 	.word	0x58020800

08001764 <RC522_ReadRegister>:
  }
}

/* USER CODE BEGIN 1 */

uint8_t RC522_ReadRegister(uint8_t reg) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    uint8_t txData[2], rxData[2];

    txData[0] = ((reg << 1) & 0x7E) | 0x80;
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b25b      	sxtb	r3, r3
 8001774:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800177e:	b25b      	sxtb	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	733b      	strb	r3, [r7, #12]
    txData[1] = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	737b      	strb	r3, [r7, #13]

    HAL_SPI_Transmit(&hspi3, &txData[0], 1, HAL_MAX_DELAY);
 8001788:	f107 010c 	add.w	r1, r7, #12
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	2201      	movs	r2, #1
 8001792:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <RC522_ReadRegister+0x50>)
 8001794:	f004 fe4c 	bl	8006430 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &rxData[1], 1, HAL_MAX_DELAY);
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	1c59      	adds	r1, r3, #1
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	2201      	movs	r2, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <RC522_ReadRegister+0x50>)
 80017a6:	f005 f831 	bl	800680c <HAL_SPI_Receive>

    return rxData[1];
 80017aa:	7a7b      	ldrb	r3, [r7, #9]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	24000128 	.word	0x24000128

080017b8 <Test_SPI_Communication>:


void Test_SPI_Communication() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	uint8_t version = RC522_ReadRegister(RC522_VERSION_REG);
 80017be:	2037      	movs	r0, #55	@ 0x37
 80017c0:	f7ff ffd0 	bl	8001764 <RC522_ReadRegister>
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]


	UART_Send_Data("SPI Test: RC522 Version Register = 0x%X\r\n", version);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <Test_SPI_Communication+0x24>)
 80017ce:	f000 fa03 	bl	8001bd8 <UART_Send_Data>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0800b354 	.word	0x0800b354

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_MspInit+0x30>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_MspInit+0x30>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_MspInit+0x30>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	58024400 	.word	0x58024400

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f000 fb8b 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <TIM3_IRQHandler+0x10>)
 800187a:	f005 fce9 	bl	8007250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	240001b4 	.word	0x240001b4

08001888 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ea:	605a      	str	r2, [r3, #4]
  return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_isatty>:

int _isatty(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f008 ff32 	bl	800a7c4 <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	24080000 	.word	0x24080000
 800198c:	00000400 	.word	0x00000400
 8001990:	240001b0 	.word	0x240001b0
 8001994:	240003e8 	.word	0x240003e8

08001998 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	@ 0x38
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ca:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019cc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac4 <MX_TIM3_Init+0x12c>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 80019d0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019d2:	22ef      	movs	r2, #239	@ 0xef
 80019d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80019dc:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ea:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019f0:	4833      	ldr	r0, [pc, #204]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 80019f2:	f005 fa66 	bl	8006ec2 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80019fc:	f7ff fce4 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	482c      	ldr	r0, [pc, #176]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001a0e:	f005 fe3b 	bl	8007688 <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a18:	f7ff fcd6 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a1c:	4828      	ldr	r0, [pc, #160]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001a1e:	f005 faa7 	bl	8006f70 <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a28:	f7ff fcce 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4821      	ldr	r0, [pc, #132]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001a3c:	f006 fb8e 	bl	800815c <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a46:	f7ff fcbf 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	@ 0x60
 8001a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4817      	ldr	r0, [pc, #92]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001a62:	f005 fcfd 	bl	8007460 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a6c:	f7ff fcac 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a70:	463b      	mov	r3, r7
 8001a72:	2204      	movs	r2, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4812      	ldr	r0, [pc, #72]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001a78:	f005 fcf2 	bl	8007460 <HAL_TIM_PWM_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001a82:	f7ff fca1 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001a8e:	f005 fce7 	bl	8007460 <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001a98:	f7ff fc96 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001aa4:	f005 fcdc 	bl	8007460 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001aae:	f7ff fc8b 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <MX_TIM3_Init+0x128>)
 8001ab4:	f000 f830 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 8001ab8:	bf00      	nop
 8001aba:	3738      	adds	r7, #56	@ 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	240001b4 	.word	0x240001b4
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d116      	bne.n	8001b08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	201d      	movs	r0, #29
 8001afe:	f000 fb6c 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b02:	201d      	movs	r0, #29
 8001b04:	f000 fb83 	bl	800220e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40000400 	.word	0x40000400
 8001b14:	58024400 	.word	0x58024400

08001b18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a13      	ldr	r2, [pc, #76]	@ (8001b84 <HAL_TIM_MspPostInit+0x6c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d11f      	bne.n	8001b7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_TIM_MspPostInit+0x70>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b40:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_TIM_MspPostInit+0x70>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <HAL_TIM_MspPostInit+0x70>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_V_Pin|SERVO_X_Pin|SERVO_Y_Pin|SERVO_Z_Pin;
 8001b58:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001b5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <HAL_TIM_MspPostInit+0x74>)
 8001b76:	f000 fbdd 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40000400 	.word	0x40000400
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020800 	.word	0x58020800

08001b90 <UART_Test_Init>:

extern UART_HandleTypeDef huart5;

static uint8_t rxData;

void UART_Test_Init(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, &rxData, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	4903      	ldr	r1, [pc, #12]	@ (8001ba4 <UART_Test_Init+0x14>)
 8001b98:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <UART_Test_Init+0x18>)
 8001b9a:	f006 fc69 	bl	8008470 <HAL_UART_Receive_IT>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	24000200 	.word	0x24000200
 8001ba8:	24000204 	.word	0x24000204

08001bac <UART_Send_String>:

void UART_Send_String(const char *str) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7fe fb93 	bl	80002e0 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <UART_Send_String+0x28>)
 8001bc6:	f006 fbc5 	bl	8008354 <HAL_UART_Transmit>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	24000204 	.word	0x24000204

08001bd8 <UART_Send_Data>:

void UART_Send_Data(const char *format, ...) {
 8001bd8:	b40f      	push	{r0, r1, r2, r3}
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b09a      	sub	sp, #104	@ 0x68
 8001bde:	af00      	add	r7, sp, #0
    char buffer[100];
    va_list args;
    va_start(args, format);
 8001be0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001be4:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001be6:	1d38      	adds	r0, r7, #4
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001bec:	2164      	movs	r1, #100	@ 0x64
 8001bee:	f008 fcf9 	bl	800a5e4 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart5, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fb73 	bl	80002e0 <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	1d39      	adds	r1, r7, #4
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <UART_Send_Data+0x40>)
 8001c06:	f006 fba5 	bl	8008354 <HAL_UART_Transmit>
}
 8001c0a:	bf00      	nop
 8001c0c:	3768      	adds	r7, #104	@ 0x68
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c14:	b004      	add	sp, #16
 8001c16:	4770      	bx	lr
 8001c18:	24000204 	.word	0x24000204

08001c1c <Send_IMU_Data>:

void Send_IMU_Data(int16_t *gyro, int16_t *mag, int16_t *accel) {
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b08b      	sub	sp, #44	@ 0x2c
 8001c20:	af06      	add	r7, sp, #24
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
        gyro[0], gyro[1], gyro[2],
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c2e:	461e      	mov	r6, r3
        gyro[0], gyro[1], gyro[2],
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3302      	adds	r3, #2
 8001c34:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c38:	469c      	mov	ip, r3
        gyro[0], gyro[1], gyro[2],
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c42:	469e      	mov	lr, r3
        accel[0], accel[1], accel[2],
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c4a:	461a      	mov	r2, r3
        accel[0], accel[1], accel[2],
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c54:	4619      	mov	r1, r3
        accel[0], accel[1], accel[2],
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c5e:	4618      	mov	r0, r3
        mag[0], mag[1], mag[2]);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c66:	461c      	mov	r4, r3
        mag[0], mag[1], mag[2]);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c70:	461d      	mov	r5, r3
        mag[0], mag[1], mag[2]);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3304      	adds	r3, #4
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
    UART_Send_Data("\rIMU: G[%d, %d, %d] A[%d, %d, %d] M[%d, %d, %d]   ",
 8001c7a:	9305      	str	r3, [sp, #20]
 8001c7c:	9504      	str	r5, [sp, #16]
 8001c7e:	9403      	str	r4, [sp, #12]
 8001c80:	9002      	str	r0, [sp, #8]
 8001c82:	9101      	str	r1, [sp, #4]
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	4673      	mov	r3, lr
 8001c88:	4662      	mov	r2, ip
 8001c8a:	4631      	mov	r1, r6
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <Send_IMU_Data+0x80>)
 8001c8e:	f7ff ffa3 	bl	8001bd8 <UART_Send_Data>
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800b380 	.word	0x0800b380

08001ca0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x34>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10b      	bne.n	8001cca <HAL_UART_RxCpltCallback+0x2a>
        HAL_UART_Transmit(&huart5, &rxData, 1, HAL_MAX_DELAY);
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <HAL_UART_RxCpltCallback+0x38>)
 8001cba:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <HAL_UART_RxCpltCallback+0x3c>)
 8001cbc:	f006 fb4a 	bl	8008354 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart5, &rxData, 1);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4905      	ldr	r1, [pc, #20]	@ (8001cd8 <HAL_UART_RxCpltCallback+0x38>)
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <HAL_UART_RxCpltCallback+0x3c>)
 8001cc6:	f006 fbd3 	bl	8008470 <HAL_UART_Receive_IT>
    }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40005000 	.word	0x40005000
 8001cd8:	24000200 	.word	0x24000200
 8001cdc:	24000204 	.word	0x24000204

08001ce0 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <MX_UART5_Init+0x94>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d28:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d2a:	f006 fac3 	bl	80082b4 <HAL_UART_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001d34:	f7ff fb48 	bl	80013c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d3c:	f008 f9f9 	bl	800a132 <HAL_UARTEx_SetTxFifoThreshold>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001d46:	f7ff fb3f 	bl	80013c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d4e:	f008 fa2e 	bl	800a1ae <HAL_UARTEx_SetRxFifoThreshold>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001d58:	f7ff fb36 	bl	80013c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_UART5_Init+0x90>)
 8001d5e:	f008 f9af 	bl	800a0c0 <HAL_UARTEx_DisableFifoMode>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001d68:	f7ff fb2e 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24000204 	.word	0x24000204
 8001d74:	40005000 	.word	0x40005000

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	22c0      	movs	r2, #192	@ 0xc0
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f008 fcc5 	bl	800a728 <memset>
  if(uartHandle->Instance==UART5)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a27      	ldr	r2, [pc, #156]	@ (8001e40 <HAL_UART_MspInit+0xc8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d146      	bne.n	8001e36 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001da8:	f04f 0202 	mov.w	r2, #2
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dba:	f107 0310 	add.w	r3, r7, #16
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fbe6 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001dca:	f7ff fafd 	bl	80013c8 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_UART_MspInit+0xcc>)
 8001dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e44 <HAL_UART_MspInit+0xcc>)
 8001dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_UART_MspInit+0xcc>)
 8001de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_UART_MspInit+0xcc>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df2:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <HAL_UART_MspInit+0xcc>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_UART_MspInit+0xcc>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e0a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001e24:	230e      	movs	r3, #14
 8001e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_UART_MspInit+0xd0>)
 8001e32:	f000 fa7f 	bl	8002334 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	37e8      	adds	r7, #232	@ 0xe8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005000 	.word	0x40005000
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020400 	.word	0x58020400

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e50:	f7fe fc16 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	@ (8001e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f008 fca9 	bl	800a7d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff f8b7 	bl	8000ff0 <main>
  bx  lr
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e8c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001e90:	0800b430 	.word	0x0800b430
  ldr r2, =_sbss
 8001e94:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001e98:	240003e8 	.word	0x240003e8

08001e9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC3_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f000 f98c 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eac:	f002 f99a 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_Init+0x68>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	4913      	ldr	r1, [pc, #76]	@ (8001f0c <HAL_Init+0x6c>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_Init+0x68>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f0c <HAL_Init+0x6c>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f10 <HAL_Init+0x70>)
 8001ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <HAL_Init+0x74>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f814 	bl	8001f18 <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e002      	b.n	8001f00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001efa:	f7ff fc71 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	0800b3b4 	.word	0x0800b3b4
 8001f10:	24000004 	.word	0x24000004
 8001f14:	24000000 	.word	0x24000000

08001f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_InitTick+0x60>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e021      	b.n	8001f70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_InitTick+0x64>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_InitTick+0x60>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f971 	bl	800222a <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 f93b 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_InitTick+0x68>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2400000c 	.word	0x2400000c
 8001f7c:	24000000 	.word	0x24000000
 8001f80:	24000008 	.word	0x24000008

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2400000c 	.word	0x2400000c
 8001fa8:	24000298 	.word	0x24000298

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	24000298 	.word	0x24000298

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2400000c 	.word	0x2400000c

0800200c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_GetREVID+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0c1b      	lsrs	r3, r3, #16
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	5c001000 	.word	0x5c001000

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <__NVIC_SetPriorityGrouping+0x40>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	4313      	orrs	r3, r2
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <__NVIC_SetPriorityGrouping+0x40>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00
 8002068:	05fa0000 	.word	0x05fa0000

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	@ (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	@ (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	@ (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff40 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff90 	bl	8002118 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5f 	bl	80020c4 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff33 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa4 	bl	8002180 <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002248:	f3bf 8f5f 	dmb	sy
}
 800224c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_MPU_Disable+0x28>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	4a06      	ldr	r2, [pc, #24]	@ (800226c <HAL_MPU_Disable+0x28>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002258:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800225a:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_MPU_Disable+0x2c>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	e000ed90 	.word	0xe000ed90

08002274 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800227c:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <HAL_MPU_Enable+0x38>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_MPU_Enable+0x3c>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_MPU_Enable+0x3c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002290:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002292:	f3bf 8f4f 	dsb	sy
}
 8002296:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002298:	f3bf 8f6f 	isb	sy
}
 800229c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed90 	.word	0xe000ed90
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	785a      	ldrb	r2, [r3, #1]
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_MPU_ConfigRegion+0x7c>)
 80022c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_MPU_ConfigRegion+0x7c>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4a19      	ldr	r2, [pc, #100]	@ (8002330 <HAL_MPU_ConfigRegion+0x7c>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022d0:	4a17      	ldr	r2, [pc, #92]	@ (8002330 <HAL_MPU_ConfigRegion+0x7c>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7b1b      	ldrb	r3, [r3, #12]
 80022dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7adb      	ldrb	r3, [r3, #11]
 80022e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7a9b      	ldrb	r3, [r3, #10]
 80022ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7b5b      	ldrb	r3, [r3, #13]
 80022f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7b9b      	ldrb	r3, [r3, #14]
 80022fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7bdb      	ldrb	r3, [r3, #15]
 8002302:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7a5b      	ldrb	r3, [r3, #9]
 800230a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800230c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7a1b      	ldrb	r3, [r3, #8]
 8002312:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002314:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800231c:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800231e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002320:	6113      	str	r3, [r2, #16]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed90 	.word	0xe000ed90

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002342:	4b89      	ldr	r3, [pc, #548]	@ (8002568 <HAL_GPIO_Init+0x234>)
 8002344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002346:	e194      	b.n	8002672 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8186 	beq.w	800266c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d005      	beq.n	8002378 <HAL_GPIO_Init+0x44>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d017      	beq.n	8002416 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d123      	bne.n	800246a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	69b9      	ldr	r1, [r7, #24]
 8002466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0203 	and.w	r2, r3, #3
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80e0 	beq.w	800266c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ac:	4b2f      	ldr	r3, [pc, #188]	@ (800256c <HAL_GPIO_Init+0x238>)
 80024ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024b2:	4a2e      	ldr	r2, [pc, #184]	@ (800256c <HAL_GPIO_Init+0x238>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024bc:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_GPIO_Init+0x238>)
 80024be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ca:	4a29      	ldr	r2, [pc, #164]	@ (8002570 <HAL_GPIO_Init+0x23c>)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	220f      	movs	r2, #15
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a20      	ldr	r2, [pc, #128]	@ (8002574 <HAL_GPIO_Init+0x240>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d052      	beq.n	800259c <HAL_GPIO_Init+0x268>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <HAL_GPIO_Init+0x244>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d031      	beq.n	8002562 <HAL_GPIO_Init+0x22e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1e      	ldr	r2, [pc, #120]	@ (800257c <HAL_GPIO_Init+0x248>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x22a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1d      	ldr	r2, [pc, #116]	@ (8002580 <HAL_GPIO_Init+0x24c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x226>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <HAL_GPIO_Init+0x250>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x222>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_GPIO_Init+0x254>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x21e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1a      	ldr	r2, [pc, #104]	@ (800258c <HAL_GPIO_Init+0x258>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x21a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_GPIO_Init+0x25c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x216>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_GPIO_Init+0x260>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x212>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_GPIO_Init+0x264>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x20e>
 800253e:	2309      	movs	r3, #9
 8002540:	e02d      	b.n	800259e <HAL_GPIO_Init+0x26a>
 8002542:	230a      	movs	r3, #10
 8002544:	e02b      	b.n	800259e <HAL_GPIO_Init+0x26a>
 8002546:	2308      	movs	r3, #8
 8002548:	e029      	b.n	800259e <HAL_GPIO_Init+0x26a>
 800254a:	2307      	movs	r3, #7
 800254c:	e027      	b.n	800259e <HAL_GPIO_Init+0x26a>
 800254e:	2306      	movs	r3, #6
 8002550:	e025      	b.n	800259e <HAL_GPIO_Init+0x26a>
 8002552:	2305      	movs	r3, #5
 8002554:	e023      	b.n	800259e <HAL_GPIO_Init+0x26a>
 8002556:	2304      	movs	r3, #4
 8002558:	e021      	b.n	800259e <HAL_GPIO_Init+0x26a>
 800255a:	2303      	movs	r3, #3
 800255c:	e01f      	b.n	800259e <HAL_GPIO_Init+0x26a>
 800255e:	2302      	movs	r3, #2
 8002560:	e01d      	b.n	800259e <HAL_GPIO_Init+0x26a>
 8002562:	2301      	movs	r3, #1
 8002564:	e01b      	b.n	800259e <HAL_GPIO_Init+0x26a>
 8002566:	bf00      	nop
 8002568:	58000080 	.word	0x58000080
 800256c:	58024400 	.word	0x58024400
 8002570:	58000400 	.word	0x58000400
 8002574:	58020000 	.word	0x58020000
 8002578:	58020400 	.word	0x58020400
 800257c:	58020800 	.word	0x58020800
 8002580:	58020c00 	.word	0x58020c00
 8002584:	58021000 	.word	0x58021000
 8002588:	58021400 	.word	0x58021400
 800258c:	58021800 	.word	0x58021800
 8002590:	58021c00 	.word	0x58021c00
 8002594:	58022000 	.word	0x58022000
 8002598:	58022400 	.word	0x58022400
 800259c:	2300      	movs	r3, #0
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	f002 0203 	and.w	r2, r2, #3
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	4093      	lsls	r3, r2
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ae:	4938      	ldr	r1, [pc, #224]	@ (8002690 <HAL_GPIO_Init+0x35c>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f ae63 	bne.w	8002348 <HAL_GPIO_Init+0x14>
  }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3724      	adds	r7, #36	@ 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	58000400 	.word	0x58000400

08002694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e001      	b.n	80026b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002700:	4a08      	ldr	r2, [pc, #32]	@ (8002724 <HAL_HSEM_FastTake+0x2c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3320      	adds	r3, #32
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <HAL_HSEM_FastTake+0x30>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e000      	b.n	8002716 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	58026400 	.word	0x58026400
 8002728:	80000300 	.word	0x80000300

0800272c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002736:	4906      	ldr	r1, [pc, #24]	@ (8002750 <HAL_HSEM_Release+0x24>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	58026400 	.word	0x58026400

08002754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e08b      	b.n	800287e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe f970 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	@ 0x24
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e006      	b.n	80027dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d108      	bne.n	80027f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	e007      	b.n	8002806 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HAL_I2C_Init+0x134>)
 8002812:	430b      	orrs	r3, r1
 8002814:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002824:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	02008000 	.word	0x02008000

0800288c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	817b      	strh	r3, [r7, #10]
 800289e:	460b      	mov	r3, r1
 80028a0:	813b      	strh	r3, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	f040 80f9 	bne.w	8002aa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x34>
 80028ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0ed      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Write+0x4e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0e6      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028e2:	f7ff fb63 	bl	8001fac <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2319      	movs	r3, #25
 80028ee:	2201      	movs	r2, #1
 80028f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fac3 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0d1      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2221      	movs	r2, #33	@ 0x21
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	@ 0x40
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800292c:	88f8      	ldrh	r0, [r7, #6]
 800292e:	893a      	ldrh	r2, [r7, #8]
 8002930:	8979      	ldrh	r1, [r7, #10]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4603      	mov	r3, r0
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f9d3 	bl	8002ce8 <I2C_RequestMemoryWrite>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0a9      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2bff      	cmp	r3, #255	@ 0xff
 800295c:	d90e      	bls.n	800297c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	22ff      	movs	r2, #255	@ 0xff
 8002962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fc47 	bl	8003208 <I2C_TransferConfig>
 800297a:	e00f      	b.n	800299c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	b2da      	uxtb	r2, r3
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	2300      	movs	r3, #0
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fc36 	bl	8003208 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fac6 	bl	8002f32 <I2C_WaitOnTXISFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e07b      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d034      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x1c8>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d130      	bne.n	8002a54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fa3f 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04d      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2bff      	cmp	r3, #255	@ 0xff
 8002a14:	d90e      	bls.n	8002a34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	22ff      	movs	r2, #255	@ 0xff
 8002a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	2300      	movs	r3, #0
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fbeb 	bl	8003208 <I2C_TransferConfig>
 8002a32:	e00f      	b.n	8002a54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	8979      	ldrh	r1, [r7, #10]
 8002a46:	2300      	movs	r3, #0
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fbda 	bl	8003208 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d19e      	bne.n	800299c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 faac 	bl	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e01a      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2220      	movs	r2, #32
 8002a78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_I2C_Mem_Write+0x224>)
 8002a86:	400b      	ands	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 80fd 	bne.w	8002cd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x34>
 8002ae2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0f1      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Mem_Read+0x4e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0ea      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b0a:	f7ff fa4f 	bl	8001fac <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2319      	movs	r3, #25
 8002b16:	2201      	movs	r2, #1
 8002b18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f9af 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0d5      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2222      	movs	r2, #34	@ 0x22
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2240      	movs	r2, #64	@ 0x40
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b54:	88f8      	ldrh	r0, [r7, #6]
 8002b56:	893a      	ldrh	r2, [r7, #8]
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	4603      	mov	r3, r0
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f913 	bl	8002d90 <I2C_RequestMemoryRead>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0ad      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2bff      	cmp	r3, #255	@ 0xff
 8002b84:	d90e      	bls.n	8002ba4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	22ff      	movs	r2, #255	@ 0xff
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	8979      	ldrh	r1, [r7, #10]
 8002b94:	4b52      	ldr	r3, [pc, #328]	@ (8002ce0 <HAL_I2C_Mem_Read+0x22c>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fb33 	bl	8003208 <I2C_TransferConfig>
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	8979      	ldrh	r1, [r7, #10]
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce0 <HAL_I2C_Mem_Read+0x22c>)
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fb22 	bl	8003208 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2104      	movs	r1, #4
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f956 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07c      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d034      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x1d0>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d130      	bne.n	8002c84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	@ 0x80
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f927 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e04d      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2bff      	cmp	r3, #255	@ 0xff
 8002c44:	d90e      	bls.n	8002c64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	22ff      	movs	r2, #255	@ 0xff
 8002c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fad3 	bl	8003208 <I2C_TransferConfig>
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fac2 	bl	8003208 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d19a      	bne.n	8002bc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f994 	bl	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01a      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_I2C_Mem_Read+0x230>)
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	80002400 	.word	0x80002400
 8002ce4:	fe00e800 	.word	0xfe00e800

08002ce8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	8979      	ldrh	r1, [r7, #10]
 8002d08:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <I2C_RequestMemoryWrite+0xa4>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fa79 	bl	8003208 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	69b9      	ldr	r1, [r7, #24]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f909 	bl	8002f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02c      	b.n	8002d84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d3a:	e015      	b.n	8002d68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	69b9      	ldr	r1, [r7, #24]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8ef 	bl	8002f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e012      	b.n	8002d84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f884 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	80002000 	.word	0x80002000

08002d90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	8979      	ldrh	r1, [r7, #10]
 8002db0:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <I2C_RequestMemoryRead+0xa4>)
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa26 	bl	8003208 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f8b6 	bl	8002f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e02c      	b.n	8002e2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd6:	893b      	ldrh	r3, [r7, #8]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de0:	e015      	b.n	8002e0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002de2:	893b      	ldrh	r3, [r7, #8]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f89c 	bl	8002f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e012      	b.n	8002e2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e04:	893b      	ldrh	r3, [r7, #8]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2140      	movs	r1, #64	@ 0x40
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f831 	bl	8002e80 <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	80002000 	.word	0x80002000

08002e38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d103      	bne.n	8002e56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d007      	beq.n	8002e74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	619a      	str	r2, [r3, #24]
  }
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e90:	e03b      	b.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8d6 	bl	8003048 <I2C_IsErrorOccurred>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e041      	b.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d02d      	beq.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7ff f87d 	bl	8001fac <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d122      	bne.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d113      	bne.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d0b4      	beq.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f3e:	e033      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f87f 	bl	8003048 <I2C_IsErrorOccurred>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e031      	b.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d025      	beq.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7ff f826 	bl	8001fac <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11a      	bne.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d013      	beq.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d1c4      	bne.n	8002f40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fcc:	e02f      	b.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f838 	bl	8003048 <I2C_IsErrorOccurred>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e02d      	b.n	800303e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe ffe3 	bl	8001fac <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11a      	bne.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d013      	beq.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b20      	cmp	r3, #32
 800303a:	d1c8      	bne.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	@ 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d068      	beq.n	8003146 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800307c:	e049      	b.n	8003112 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d045      	beq.n	8003112 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe ff91 	bl	8001fac <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_IsErrorOccurred+0x54>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d13a      	bne.n	8003112 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030be:	d121      	bne.n	8003104 <I2C_IsErrorOccurred+0xbc>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030c6:	d01d      	beq.n	8003104 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d01a      	beq.n	8003104 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030de:	f7fe ff65 	bl	8001fac <HAL_GetTick>
 80030e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e4:	e00e      	b.n	8003104 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030e6:	f7fe ff61 	bl	8001fac <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b19      	cmp	r3, #25
 80030f2:	d907      	bls.n	8003104 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	f043 0320 	orr.w	r3, r3, #32
 80030fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003102:	e006      	b.n	8003112 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d1e9      	bne.n	80030e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d003      	beq.n	8003128 <I2C_IsErrorOccurred+0xe0>
 8003120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0aa      	beq.n	800307e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2220      	movs	r2, #32
 8003136:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003168:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01c      	beq.n	80031f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff fe3b 	bl	8002e38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <I2C_IsErrorOccurred+0x1bc>)
 80031ce:	400b      	ands	r3, r1
 80031d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3728      	adds	r7, #40	@ 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	fe00e800 	.word	0xfe00e800

08003208 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	4613      	mov	r3, r2
 8003218:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800321a:	897b      	ldrh	r3, [r7, #10]
 800321c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003220:	7a7b      	ldrb	r3, [r7, #9]
 8003222:	041b      	lsls	r3, r3, #16
 8003224:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003228:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	4313      	orrs	r3, r2
 8003232:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003236:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	0d5b      	lsrs	r3, r3, #21
 8003242:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003246:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <I2C_TransferConfig+0x60>)
 8003248:	430b      	orrs	r3, r1
 800324a:	43db      	mvns	r3, r3
 800324c:	ea02 0103 	and.w	r1, r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	03ff63ff 	.word	0x03ff63ff

0800326c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b20      	cmp	r3, #32
 8003280:	d138      	bne.n	80032f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800328c:	2302      	movs	r3, #2
 800328e:	e032      	b.n	80032f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	@ 0x24
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b20      	cmp	r3, #32
 8003316:	d139      	bne.n	800338c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003322:	2302      	movs	r3, #2
 8003324:	e033      	b.n	800338e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2224      	movs	r2, #36	@ 0x24
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80033a4:	4b29      	ldr	r3, [pc, #164]	@ (800344c <HAL_PWREx_ConfigSupply+0xb0>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d00a      	beq.n	80033c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033b0:	4b26      	ldr	r3, [pc, #152]	@ (800344c <HAL_PWREx_ConfigSupply+0xb0>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e040      	b.n	8003444 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e03e      	b.n	8003444 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033c6:	4b21      	ldr	r3, [pc, #132]	@ (800344c <HAL_PWREx_ConfigSupply+0xb0>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80033ce:	491f      	ldr	r1, [pc, #124]	@ (800344c <HAL_PWREx_ConfigSupply+0xb0>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033d6:	f7fe fde9 	bl	8001fac <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033dc:	e009      	b.n	80033f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033de:	f7fe fde5 	bl	8001fac <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ec:	d901      	bls.n	80033f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e028      	b.n	8003444 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <HAL_PWREx_ConfigSupply+0xb0>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fe:	d1ee      	bne.n	80033de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b1e      	cmp	r3, #30
 8003404:	d008      	beq.n	8003418 <HAL_PWREx_ConfigSupply+0x7c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b2e      	cmp	r3, #46	@ 0x2e
 800340a:	d005      	beq.n	8003418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b1d      	cmp	r3, #29
 8003410:	d002      	beq.n	8003418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b2d      	cmp	r3, #45	@ 0x2d
 8003416:	d114      	bne.n	8003442 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003418:	f7fe fdc8 	bl	8001fac <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800341e:	e009      	b.n	8003434 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003420:	f7fe fdc4 	bl	8001fac <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e007      	b.n	8003444 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_PWREx_ConfigSupply+0xb0>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003440:	d1ee      	bne.n	8003420 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	58024800 	.word	0x58024800

08003450 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7fe fda8 	bl	8001fac <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e05f      	b.n	8003528 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd ffd9 	bl	800142c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800347a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f85a 	bl	8003538 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	3b01      	subs	r3, #1
 8003494:	021a      	lsls	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	2120      	movs	r1, #32
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f852 	bl	8003554 <QSPI_WaitFlagStateUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80034b4:	7afb      	ldrb	r3, [r7, #11]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d135      	bne.n	8003526 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_QSPI_Init+0xe0>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6852      	ldr	r2, [r2, #4]
 80034c8:	0611      	lsls	r1, r2, #24
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	69d2      	ldr	r2, [r2, #28]
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a12      	ldr	r2, [r2, #32]
 80034da:	4311      	orrs	r1, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_QSPI_Init+0xe4>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6912      	ldr	r2, [r2, #16]
 80034f2:	0411      	lsls	r1, r2, #16
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6952      	ldr	r2, [r2, #20]
 80034f8:	4311      	orrs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6992      	ldr	r2, [r2, #24]
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003526:	7afb      	ldrb	r3, [r7, #11]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	00ffff2f 	.word	0x00ffff2f
 8003534:	ffe0f8fe 	.word	0xffe0f8fe

08003538 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003564:	e01a      	b.n	800359c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d016      	beq.n	800359c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe fd1d 	bl	8001fac <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2204      	movs	r2, #4
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e00e      	b.n	80035ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1d6      	bne.n	8003566 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	@ 0x30
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f000 bc48 	b.w	8003e68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8088 	beq.w	80036f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e6:	4b99      	ldr	r3, [pc, #612]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035f0:	4b96      	ldr	r3, [pc, #600]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d007      	beq.n	800360c <HAL_RCC_OscConfig+0x48>
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	2b18      	cmp	r3, #24
 8003600:	d111      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	4b8f      	ldr	r3, [pc, #572]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d06d      	beq.n	80036f4 <HAL_RCC_OscConfig+0x130>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d169      	bne.n	80036f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f000 bc21 	b.w	8003e68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x7a>
 8003630:	4b86      	ldr	r3, [pc, #536]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a85      	ldr	r2, [pc, #532]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e02e      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x9c>
 8003646:	4b81      	ldr	r3, [pc, #516]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a80      	ldr	r2, [pc, #512]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b7e      	ldr	r3, [pc, #504]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7d      	ldr	r2, [pc, #500]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xc0>
 800366a:	4b78      	ldr	r3, [pc, #480]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a77      	ldr	r2, [pc, #476]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b75      	ldr	r3, [pc, #468]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a74      	ldr	r2, [pc, #464]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003684:	4b71      	ldr	r3, [pc, #452]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a70      	ldr	r2, [pc, #448]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b6e      	ldr	r3, [pc, #440]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6d      	ldr	r2, [pc, #436]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fc82 	bl	8001fac <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fc7e 	bl	8001fac <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	@ 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e3d4      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036be:	4b63      	ldr	r3, [pc, #396]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fc6e 	bl	8001fac <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fc6a 	bl	8001fac <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e3c0      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036e6:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x110>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80ca 	beq.w	8003898 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003704:	4b51      	ldr	r3, [pc, #324]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800370c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800370e:	4b4f      	ldr	r3, [pc, #316]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_RCC_OscConfig+0x166>
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	2b18      	cmp	r3, #24
 800371e:	d156      	bne.n	80037ce <HAL_RCC_OscConfig+0x20a>
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d151      	bne.n	80037ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372a:	4b48      	ldr	r3, [pc, #288]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x17e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e392      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003742:	4b42      	ldr	r3, [pc, #264]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0219 	bic.w	r2, r3, #25
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	493f      	ldr	r1, [pc, #252]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fc2a 	bl	8001fac <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fc26 	bl	8001fac <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e37c      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	f7fe fc47 	bl	800200c <HAL_GetREVID>
 800377e:	4603      	mov	r3, r0
 8003780:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003784:	4293      	cmp	r3, r2
 8003786:	d817      	bhi.n	80037b8 <HAL_RCC_OscConfig+0x1f4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b40      	cmp	r3, #64	@ 0x40
 800378e:	d108      	bne.n	80037a2 <HAL_RCC_OscConfig+0x1de>
 8003790:	4b2e      	ldr	r3, [pc, #184]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003798:	4a2c      	ldr	r2, [pc, #176]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800379a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a0:	e07a      	b.n	8003898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	031b      	lsls	r3, r3, #12
 80037b0:	4926      	ldr	r1, [pc, #152]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b6:	e06f      	b.n	8003898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	4921      	ldr	r1, [pc, #132]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037cc:	e064      	b.n	8003898 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d047      	beq.n	8003866 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0219 	bic.w	r2, r3, #25
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	491a      	ldr	r1, [pc, #104]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe fbe0 	bl	8001fac <HAL_GetTick>
 80037ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fe fbdc 	bl	8001fac <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e332      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	f7fe fbfd 	bl	800200c <HAL_GetREVID>
 8003812:	4603      	mov	r3, r0
 8003814:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003818:	4293      	cmp	r3, r2
 800381a:	d819      	bhi.n	8003850 <HAL_RCC_OscConfig+0x28c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d108      	bne.n	8003836 <HAL_RCC_OscConfig+0x272>
 8003824:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800382c:	4a07      	ldr	r2, [pc, #28]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003832:	6053      	str	r3, [r2, #4]
 8003834:	e030      	b.n	8003898 <HAL_RCC_OscConfig+0x2d4>
 8003836:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	4901      	ldr	r1, [pc, #4]	@ (800384c <HAL_RCC_OscConfig+0x288>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
 800384a:	e025      	b.n	8003898 <HAL_RCC_OscConfig+0x2d4>
 800384c:	58024400 	.word	0x58024400
 8003850:	4b9a      	ldr	r3, [pc, #616]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	4997      	ldr	r1, [pc, #604]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
 8003864:	e018      	b.n	8003898 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b95      	ldr	r3, [pc, #596]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a94      	ldr	r2, [pc, #592]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe fb9b 	bl	8001fac <HAL_GetTick>
 8003876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387a:	f7fe fb97 	bl	8001fac <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e2ed      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800388c:	4b8b      	ldr	r3, [pc, #556]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a9 	beq.w	80039f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a6:	4b85      	ldr	r3, [pc, #532]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b0:	4b82      	ldr	r3, [pc, #520]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d007      	beq.n	80038cc <HAL_RCC_OscConfig+0x308>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b18      	cmp	r3, #24
 80038c0:	d13a      	bne.n	8003938 <HAL_RCC_OscConfig+0x374>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d135      	bne.n	8003938 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038cc:	4b7b      	ldr	r3, [pc, #492]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_OscConfig+0x320>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b80      	cmp	r3, #128	@ 0x80
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e2c1      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038e4:	f7fe fb92 	bl	800200c <HAL_GetREVID>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d817      	bhi.n	8003922 <HAL_RCC_OscConfig+0x35e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d108      	bne.n	800390c <HAL_RCC_OscConfig+0x348>
 80038fa:	4b70      	ldr	r3, [pc, #448]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003902:	4a6e      	ldr	r2, [pc, #440]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003908:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800390a:	e075      	b.n	80039f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800390c:	4b6b      	ldr	r3, [pc, #428]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	069b      	lsls	r3, r3, #26
 800391a:	4968      	ldr	r1, [pc, #416]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003920:	e06a      	b.n	80039f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003922:	4b66      	ldr	r3, [pc, #408]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	4962      	ldr	r1, [pc, #392]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003936:	e05f      	b.n	80039f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d042      	beq.n	80039c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003940:	4b5e      	ldr	r3, [pc, #376]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5d      	ldr	r2, [pc, #372]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800394a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe fb2e 	bl	8001fac <HAL_GetTick>
 8003950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003954:	f7fe fb2a 	bl	8001fac <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e280      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003966:	4b55      	ldr	r3, [pc, #340]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003972:	f7fe fb4b 	bl	800200c <HAL_GetREVID>
 8003976:	4603      	mov	r3, r0
 8003978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800397c:	4293      	cmp	r3, r2
 800397e:	d817      	bhi.n	80039b0 <HAL_RCC_OscConfig+0x3ec>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	2b20      	cmp	r3, #32
 8003986:	d108      	bne.n	800399a <HAL_RCC_OscConfig+0x3d6>
 8003988:	4b4c      	ldr	r3, [pc, #304]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003990:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003996:	6053      	str	r3, [r2, #4]
 8003998:	e02e      	b.n	80039f8 <HAL_RCC_OscConfig+0x434>
 800399a:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	069b      	lsls	r3, r3, #26
 80039a8:	4944      	ldr	r1, [pc, #272]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
 80039ae:	e023      	b.n	80039f8 <HAL_RCC_OscConfig+0x434>
 80039b0:	4b42      	ldr	r3, [pc, #264]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	493f      	ldr	r1, [pc, #252]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
 80039c4:	e018      	b.n	80039f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039c6:	4b3d      	ldr	r3, [pc, #244]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3c      	ldr	r2, [pc, #240]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80039cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe faeb 	bl	8001fac <HAL_GetTick>
 80039d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039da:	f7fe fae7 	bl	8001fac <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e23d      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039ec:	4b33      	ldr	r3, [pc, #204]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d036      	beq.n	8003a72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d019      	beq.n	8003a40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a10:	4a2a      	ldr	r2, [pc, #168]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe fac8 	bl	8001fac <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fe fac4 	bl	8001fac <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e21a      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a32:	4b22      	ldr	r3, [pc, #136]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x45c>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a44:	4a1d      	ldr	r2, [pc, #116]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fe faae 	bl	8001fac <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fe faaa 	bl	8001fac <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e200      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a66:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d039      	beq.n	8003af2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01c      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a92:	f7fe fa8b 	bl	8001fac <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a9a:	f7fe fa87 	bl	8001fac <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1dd      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x4d6>
 8003ab8:	e01b      	b.n	8003af2 <HAL_RCC_OscConfig+0x52e>
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a9a      	ldr	r2, [pc, #616]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003acc:	f7fe fa6e 	bl	8001fac <HAL_GetTick>
 8003ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad4:	f7fe fa6a 	bl	8001fac <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1c0      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ae6:	4b92      	ldr	r3, [pc, #584]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8081 	beq.w	8003c02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b00:	4b8c      	ldr	r3, [pc, #560]	@ (8003d34 <HAL_RCC_OscConfig+0x770>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a8b      	ldr	r2, [pc, #556]	@ (8003d34 <HAL_RCC_OscConfig+0x770>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fa4e 	bl	8001fac <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fe fa4a 	bl	8001fac <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1a0      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b26:	4b83      	ldr	r3, [pc, #524]	@ (8003d34 <HAL_RCC_OscConfig+0x770>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x584>
 8003b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b46:	e02d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x5e0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5a6>
 8003b50:	4b77      	ldr	r3, [pc, #476]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a76      	ldr	r2, [pc, #472]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5c:	4b74      	ldr	r3, [pc, #464]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4a73      	ldr	r2, [pc, #460]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x5e0>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c8>
 8003b72:	4b6f      	ldr	r3, [pc, #444]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a6e      	ldr	r2, [pc, #440]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	4a6b      	ldr	r2, [pc, #428]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x5e0>
 8003b8c:	4b68      	ldr	r3, [pc, #416]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	4a67      	ldr	r2, [pc, #412]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b98:	4b65      	ldr	r3, [pc, #404]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9c:	4a64      	ldr	r2, [pc, #400]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003b9e:	f023 0304 	bic.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe f9fe 	bl	8001fac <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f9fa 	bl	8001fac <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e14e      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bca:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ee      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x5f0>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fe f9e8 	bl	8001fac <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fe f9e4 	bl	8001fac <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e138      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ee      	bne.n	8003be0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 812d 	beq.w	8003e66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c0c:	4b48      	ldr	r3, [pc, #288]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c14:	2b18      	cmp	r3, #24
 8003c16:	f000 80bd 	beq.w	8003d94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	f040 809e 	bne.w	8003d60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c24:	4b42      	ldr	r3, [pc, #264]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a41      	ldr	r2, [pc, #260]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe f9bc 	bl	8001fac <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fe f9b8 	bl	8001fac <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e10e      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c4a:	4b39      	ldr	r3, [pc, #228]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c56:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c5a:	4b37      	ldr	r3, [pc, #220]	@ (8003d38 <HAL_RCC_OscConfig+0x774>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4931      	ldr	r1, [pc, #196]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	3b01      	subs	r3, #1
 8003c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	025b      	lsls	r3, r3, #9
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ca0:	4923      	ldr	r1, [pc, #140]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ca6:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <HAL_RCC_OscConfig+0x778>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cbe:	00d2      	lsls	r2, r2, #3
 8003cc0:	491b      	ldr	r1, [pc, #108]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	f023 020c 	bic.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	4917      	ldr	r1, [pc, #92]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cd8:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	f023 0202 	bic.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce4:	4912      	ldr	r1, [pc, #72]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	4a10      	ldr	r2, [pc, #64]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d02:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d0e:	4b08      	ldr	r3, [pc, #32]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	4a07      	ldr	r2, [pc, #28]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <HAL_RCC_OscConfig+0x76c>)
 8003d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe f941 	bl	8001fac <HAL_GetTick>
 8003d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d2c:	e011      	b.n	8003d52 <HAL_RCC_OscConfig+0x78e>
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
 8003d34:	58024800 	.word	0x58024800
 8003d38:	fffffc0c 	.word	0xfffffc0c
 8003d3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe f934 	bl	8001fac <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e08a      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d52:	4b47      	ldr	r3, [pc, #284]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x77c>
 8003d5e:	e082      	b.n	8003e66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b43      	ldr	r3, [pc, #268]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a42      	ldr	r2, [pc, #264]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe f91e 	bl	8001fac <HAL_GetTick>
 8003d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fe f91a 	bl	8001fac <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e070      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d86:	4b3a      	ldr	r3, [pc, #232]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x7b0>
 8003d92:	e068      	b.n	8003e66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d94:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d9a:	4b35      	ldr	r3, [pc, #212]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d031      	beq.n	8003e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0203 	and.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d12a      	bne.n	8003e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d122      	bne.n	8003e0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d11a      	bne.n	8003e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	0a5b      	lsrs	r3, r3, #9
 8003dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d108      	bne.n	8003e0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e02b      	b.n	8003e68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e10:	4b17      	ldr	r3, [pc, #92]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d01f      	beq.n	8003e66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e26:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e32:	f7fe f8bb 	bl	8001fac <HAL_GetTick>
 8003e36:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e38:	bf00      	nop
 8003e3a:	f7fe f8b7 	bl	8001fac <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d0f9      	beq.n	8003e3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_RCC_OscConfig+0x8b0>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e52:	00d2      	lsls	r2, r2, #3
 8003e54:	4906      	ldr	r1, [pc, #24]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	4a04      	ldr	r2, [pc, #16]	@ (8003e70 <HAL_RCC_OscConfig+0x8ac>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3730      	adds	r7, #48	@ 0x30
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	58024400 	.word	0x58024400
 8003e74:	ffff0007 	.word	0xffff0007

08003e78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e19c      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d910      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b87      	ldr	r3, [pc, #540]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 020f 	bic.w	r2, r3, #15
 8003ea2:	4985      	ldr	r1, [pc, #532]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b83      	ldr	r3, [pc, #524]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e184      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ed8:	4b78      	ldr	r3, [pc, #480]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4975      	ldr	r1, [pc, #468]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	4b70      	ldr	r3, [pc, #448]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f06:	4b6d      	ldr	r3, [pc, #436]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	496a      	ldr	r1, [pc, #424]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	4b64      	ldr	r3, [pc, #400]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f34:	4b61      	ldr	r3, [pc, #388]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	495e      	ldr	r1, [pc, #376]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d010      	beq.n	8003f74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	4b59      	ldr	r3, [pc, #356]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d908      	bls.n	8003f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f62:	4b56      	ldr	r3, [pc, #344]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4953      	ldr	r1, [pc, #332]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4b4d      	ldr	r3, [pc, #308]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d908      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b4a      	ldr	r3, [pc, #296]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f023 020f 	bic.w	r2, r3, #15
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4947      	ldr	r1, [pc, #284]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d055      	beq.n	800405a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fae:	4b43      	ldr	r3, [pc, #268]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4940      	ldr	r1, [pc, #256]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d121      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0f6      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe0:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0ea      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ff8:	4b30      	ldr	r3, [pc, #192]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0de      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004008:	4b2c      	ldr	r3, [pc, #176]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0d6      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004018:	4b28      	ldr	r3, [pc, #160]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4925      	ldr	r1, [pc, #148]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8004026:	4313      	orrs	r3, r2
 8004028:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402a:	f7fd ffbf 	bl	8001fac <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004030:	e00a      	b.n	8004048 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004032:	f7fd ffbb 	bl	8001fac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e0be      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004048:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	429a      	cmp	r2, r3
 8004058:	d1eb      	bne.n	8004032 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	429a      	cmp	r2, r3
 8004074:	d208      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004076:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	490e      	ldr	r1, [pc, #56]	@ (80040bc <HAL_RCC_ClockConfig+0x244>)
 8004084:	4313      	orrs	r3, r2
 8004086:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d214      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	4906      	ldr	r1, [pc, #24]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b04      	ldr	r3, [pc, #16]	@ (80040b8 <HAL_RCC_ClockConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e086      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
 80040b8:	52002000 	.word	0x52002000
 80040bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040dc:	4b3c      	ldr	r3, [pc, #240]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4939      	ldr	r1, [pc, #228]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800410a:	4b31      	ldr	r3, [pc, #196]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	492e      	ldr	r1, [pc, #184]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004118:	4313      	orrs	r3, r2
 800411a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004134:	429a      	cmp	r2, r3
 8004136:	d208      	bcs.n	800414a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4922      	ldr	r1, [pc, #136]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004146:	4313      	orrs	r3, r2
 8004148:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004162:	429a      	cmp	r2, r3
 8004164:	d208      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004166:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	4917      	ldr	r1, [pc, #92]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004174:	4313      	orrs	r3, r2
 8004176:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004178:	f000 f834 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	4912      	ldr	r1, [pc, #72]	@ (80041d4 <HAL_RCC_ClockConfig+0x35c>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
 8004194:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004196:	4b0e      	ldr	r3, [pc, #56]	@ (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	4a0d      	ldr	r2, [pc, #52]	@ (80041d4 <HAL_RCC_ClockConfig+0x35c>)
 80041a0:	5cd3      	ldrb	r3, [r2, r3]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <HAL_RCC_ClockConfig+0x360>)
 80041ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041b0:	4a0a      	ldr	r2, [pc, #40]	@ (80041dc <HAL_RCC_ClockConfig+0x364>)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041b6:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <HAL_RCC_ClockConfig+0x368>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd feac 	bl	8001f18 <HAL_InitTick>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	0800b3b4 	.word	0x0800b3b4
 80041d8:	24000004 	.word	0x24000004
 80041dc:	24000000 	.word	0x24000000
 80041e0:	24000008 	.word	0x24000008

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	@ 0x24
 80041e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ea:	4bb3      	ldr	r3, [pc, #716]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f2:	2b18      	cmp	r3, #24
 80041f4:	f200 8155 	bhi.w	80044a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80041f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004265 	.word	0x08004265
 8004204:	080044a3 	.word	0x080044a3
 8004208:	080044a3 	.word	0x080044a3
 800420c:	080044a3 	.word	0x080044a3
 8004210:	080044a3 	.word	0x080044a3
 8004214:	080044a3 	.word	0x080044a3
 8004218:	080044a3 	.word	0x080044a3
 800421c:	080044a3 	.word	0x080044a3
 8004220:	0800428b 	.word	0x0800428b
 8004224:	080044a3 	.word	0x080044a3
 8004228:	080044a3 	.word	0x080044a3
 800422c:	080044a3 	.word	0x080044a3
 8004230:	080044a3 	.word	0x080044a3
 8004234:	080044a3 	.word	0x080044a3
 8004238:	080044a3 	.word	0x080044a3
 800423c:	080044a3 	.word	0x080044a3
 8004240:	08004291 	.word	0x08004291
 8004244:	080044a3 	.word	0x080044a3
 8004248:	080044a3 	.word	0x080044a3
 800424c:	080044a3 	.word	0x080044a3
 8004250:	080044a3 	.word	0x080044a3
 8004254:	080044a3 	.word	0x080044a3
 8004258:	080044a3 	.word	0x080044a3
 800425c:	080044a3 	.word	0x080044a3
 8004260:	08004297 	.word	0x08004297
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004264:	4b94      	ldr	r3, [pc, #592]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d009      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004270:	4b91      	ldr	r3, [pc, #580]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	4a90      	ldr	r2, [pc, #576]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
 8004280:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004282:	e111      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004284:	4b8d      	ldr	r3, [pc, #564]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004286:	61bb      	str	r3, [r7, #24]
      break;
 8004288:	e10e      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800428a:	4b8d      	ldr	r3, [pc, #564]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800428c:	61bb      	str	r3, [r7, #24]
      break;
 800428e:	e10b      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004290:	4b8c      	ldr	r3, [pc, #560]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004292:	61bb      	str	r3, [r7, #24]
      break;
 8004294:	e108      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004296:	4b88      	ldr	r3, [pc, #544]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042a0:	4b85      	ldr	r3, [pc, #532]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042ac:	4b82      	ldr	r3, [pc, #520]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042b6:	4b80      	ldr	r3, [pc, #512]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ba:	08db      	lsrs	r3, r3, #3
 80042bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80e1 	beq.w	800449c <HAL_RCC_GetSysClockFreq+0x2b8>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f000 8083 	beq.w	80043e8 <HAL_RCC_GetSysClockFreq+0x204>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f200 80a1 	bhi.w	800442c <HAL_RCC_GetSysClockFreq+0x248>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x114>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d056      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042f6:	e099      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042f8:	4b6f      	ldr	r3, [pc, #444]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02d      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004304:	4b6c      	ldr	r3, [pc, #432]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	4a6b      	ldr	r2, [pc, #428]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b62      	ldr	r3, [pc, #392]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004342:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800435e:	e087      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b51      	ldr	r3, [pc, #324]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a02 	vldr	s12, [r7, #8]
 8004386:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043a2:	e065      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	4b40      	ldr	r3, [pc, #256]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043e6:	e043      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b2f      	ldr	r3, [pc, #188]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a02 	vldr	s12, [r7, #8]
 800440e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800442a:	e021      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004452:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800446e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004470:	4b11      	ldr	r3, [pc, #68]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	0a5b      	lsrs	r3, r3, #9
 8004476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447a:	3301      	adds	r3, #1
 800447c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004488:	edd7 6a07 	vldr	s13, [r7, #28]
 800448c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004494:	ee17 3a90 	vmov	r3, s15
 8004498:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800449a:	e005      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
      break;
 80044a0:	e002      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a4:	61bb      	str	r3, [r7, #24]
      break;
 80044a6:	bf00      	nop
  }

  return sysclockfreq;
 80044a8:	69bb      	ldr	r3, [r7, #24]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400
 80044bc:	03d09000 	.word	0x03d09000
 80044c0:	003d0900 	.word	0x003d0900
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	46000000 	.word	0x46000000
 80044cc:	4c742400 	.word	0x4c742400
 80044d0:	4a742400 	.word	0x4a742400
 80044d4:	4b742400 	.word	0x4b742400

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044de:	f7ff fe81 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_RCC_GetHCLKFreq+0x50>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	490f      	ldr	r1, [pc, #60]	@ (800452c <HAL_RCC_GetHCLKFreq+0x54>)
 80044f0:	5ccb      	ldrb	r3, [r1, r3]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_GetHCLKFreq+0x50>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	4a09      	ldr	r2, [pc, #36]	@ (800452c <HAL_RCC_GetHCLKFreq+0x54>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	4a07      	ldr	r2, [pc, #28]	@ (8004530 <HAL_RCC_GetHCLKFreq+0x58>)
 8004514:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004516:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <HAL_RCC_GetHCLKFreq+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	58024400 	.word	0x58024400
 800452c:	0800b3b4 	.word	0x0800b3b4
 8004530:	24000004 	.word	0x24000004
 8004534:	24000000 	.word	0x24000000

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800453c:	f7ff ffcc 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	@ (8004560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	58024400 	.word	0x58024400
 8004560:	0800b3b4 	.word	0x0800b3b4

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004568:	f7ff ffb6 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4904      	ldr	r1, [pc, #16]	@ (800458c <HAL_RCC_GetPCLK2Freq+0x28>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	58024400 	.word	0x58024400
 800458c:	0800b3b4 	.word	0x0800b3b4

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004594:	b0ca      	sub	sp, #296	@ 0x128
 8004596:	af00      	add	r7, sp, #0
 8004598:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800459c:	2300      	movs	r3, #0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80045b4:	2500      	movs	r5, #0
 80045b6:	ea54 0305 	orrs.w	r3, r4, r5
 80045ba:	d049      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045c6:	d02f      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80045c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045cc:	d828      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d2:	d01a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d8:	d822      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e2:	d007      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045e4:	e01c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e6:	4bb8      	ldr	r3, [pc, #736]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	4ab7      	ldr	r2, [pc, #732]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045f2:	e01a      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	3308      	adds	r3, #8
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fc8f 	bl	8005f20 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004608:	e00f      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2102      	movs	r1, #2
 8004612:	4618      	mov	r0, r3
 8004614:	f001 fd36 	bl	8006084 <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800461e:	e004      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004632:	4ba5      	ldr	r3, [pc, #660]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004636:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004640:	4aa1      	ldr	r2, [pc, #644]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004642:	430b      	orrs	r3, r1
 8004644:	6513      	str	r3, [r2, #80]	@ 0x50
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800465c:	f04f 0900 	mov.w	r9, #0
 8004660:	ea58 0309 	orrs.w	r3, r8, r9
 8004664:	d047      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466c:	2b04      	cmp	r3, #4
 800466e:	d82a      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004670:	a201      	add	r2, pc, #4	@ (adr r2, 8004678 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	0800468d 	.word	0x0800468d
 800467c:	0800469b 	.word	0x0800469b
 8004680:	080046b1 	.word	0x080046b1
 8004684:	080046cf 	.word	0x080046cf
 8004688:	080046cf 	.word	0x080046cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4b8e      	ldr	r3, [pc, #568]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4a8d      	ldr	r2, [pc, #564]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004698:	e01a      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fc3c 	bl	8005f20 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ae:	e00f      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	3328      	adds	r3, #40	@ 0x28
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fce3 	bl	8006084 <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c4:	e004      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80046ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046d8:	4b7b      	ldr	r3, [pc, #492]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046dc:	f023 0107 	bic.w	r1, r3, #7
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	4a78      	ldr	r2, [pc, #480]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004702:	f04f 0b00 	mov.w	fp, #0
 8004706:	ea5a 030b 	orrs.w	r3, sl, fp
 800470a:	d04c      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004716:	d030      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800471c:	d829      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800471e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004720:	d02d      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004722:	2bc0      	cmp	r3, #192	@ 0xc0
 8004724:	d825      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d018      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800472a:	2b80      	cmp	r3, #128	@ 0x80
 800472c:	d821      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004732:	2b40      	cmp	r3, #64	@ 0x40
 8004734:	d007      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004736:	e01c      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004738:	4b63      	ldr	r3, [pc, #396]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	4a62      	ldr	r2, [pc, #392]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004744:	e01c      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	3308      	adds	r3, #8
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fbe6 	bl	8005f20 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800475a:	e011      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	3328      	adds	r3, #40	@ 0x28
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f001 fc8d 	bl	8006084 <RCCEx_PLL3_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800477e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004788:	4b4f      	ldr	r3, [pc, #316]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	4a4c      	ldr	r2, [pc, #304]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004798:	430b      	orrs	r3, r1
 800479a:	6513      	str	r3, [r2, #80]	@ 0x50
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80047b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80047bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d053      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047d2:	d035      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80047d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047d8:	d82e      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80047da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80047de:	d031      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80047e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80047e4:	d828      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ea:	d01a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80047ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f0:	d822      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80047f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047fa:	d007      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80047fc:	e01c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fe:	4b32      	ldr	r3, [pc, #200]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800480a:	e01c      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	3308      	adds	r3, #8
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f001 fb83 	bl	8005f20 <RCCEx_PLL2_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004820:	e011      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	3328      	adds	r3, #40	@ 0x28
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fc2a 	bl	8006084 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004836:	e006      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800484e:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800485e:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004860:	430b      	orrs	r3, r1
 8004862:	6593      	str	r3, [r2, #88]	@ 0x58
 8004864:	e003      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800487a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004884:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d056      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004896:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800489a:	d038      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800489c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048a0:	d831      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048a6:	d034      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80048a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048ac:	d82b      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048b2:	d01d      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80048b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048b8:	d825      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80048be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048c4:	e01f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048cc:	4ba2      	ldr	r3, [pc, #648]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	4aa1      	ldr	r2, [pc, #644]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048d8:	e01c      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	3308      	adds	r3, #8
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fb1c 	bl	8005f20 <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048ee:	e011      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f4:	3328      	adds	r3, #40	@ 0x28
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fbc3 	bl	8006084 <RCCEx_PLL3_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800490c:	e002      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800491c:	4b8e      	ldr	r3, [pc, #568]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800492c:	4a8a      	ldr	r2, [pc, #552]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800492e:	430b      	orrs	r3, r1
 8004930:	6593      	str	r3, [r2, #88]	@ 0x58
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004952:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d03a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	2b30      	cmp	r3, #48	@ 0x30
 8004964:	d01f      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004966:	2b30      	cmp	r3, #48	@ 0x30
 8004968:	d819      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d00c      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d815      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d019      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004976:	2b10      	cmp	r3, #16
 8004978:	d111      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497a:	4b77      	ldr	r3, [pc, #476]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	4a76      	ldr	r2, [pc, #472]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004986:	e011      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498c:	3308      	adds	r3, #8
 800498e:	2102      	movs	r1, #2
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fac5 	bl	8005f20 <RCCEx_PLL2_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049a6:	bf00      	nop
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049b4:	4b68      	ldr	r3, [pc, #416]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c2:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80049de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80049e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d051      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049fc:	d035      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80049fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a02:	d82e      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a08:	d031      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a0e:	d828      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a14:	d01a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1a:	d822      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a24:	d007      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a26:	e01c      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4b4b      	ldr	r3, [pc, #300]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a34:	e01c      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fa6e 	bl	8005f20 <RCCEx_PLL2_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a50:	3328      	adds	r3, #40	@ 0x28
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fb15 	bl	8006084 <RCCEx_PLL3_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a68:	e002      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a78:	4b37      	ldr	r3, [pc, #220]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a86:	4a34      	ldr	r2, [pc, #208]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a8c:	e003      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004aac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	d056      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac0:	d033      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac6:	d82c      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004acc:	d02f      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ad2:	d826      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad8:	d02b      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ade:	d820      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae4:	d012      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aea:	d81a      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d022      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af4:	d115      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afa:	3308      	adds	r3, #8
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fa0e 	bl	8005f20 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e015      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	3328      	adds	r3, #40	@ 0x28
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 fab5 	bl	8006084 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b20:	e00a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10d      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b4e:	4a02      	ldr	r2, [pc, #8]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d055      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b90:	d033      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b96:	d82c      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d02f      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba2:	d826      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ba4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ba8:	d02b      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bae:	d820      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bb4:	d012      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bba:	d81a      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d022      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004bc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bc4:	d115      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bca:	3308      	adds	r3, #8
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 f9a6 	bl	8005f20 <RCCEx_PLL2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004bda:	e015      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	3328      	adds	r3, #40	@ 0x28
 8004be2:	2101      	movs	r1, #1
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 fa4d 	bl	8006084 <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c10:	4ba3      	ldr	r3, [pc, #652]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c20:	4a9f      	ldr	r2, [pc, #636]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c26:	e003      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d037      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c5a:	d00e      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c60:	d816      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d018      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c6a:	d111      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	4a8b      	ldr	r2, [pc, #556]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c78:	e00f      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	3308      	adds	r3, #8
 8004c80:	2101      	movs	r1, #1
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f94c 	bl	8005f20 <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c8e:	e004      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb0:	4a7b      	ldr	r2, [pc, #492]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004cd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d039      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d81c      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004cea:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d2d 	.word	0x08004d2d
 8004cf4:	08004d01 	.word	0x08004d01
 8004cf8:	08004d0f 	.word	0x08004d0f
 8004cfc:	08004d2d 	.word	0x08004d2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d00:	4b67      	ldr	r3, [pc, #412]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	4a66      	ldr	r2, [pc, #408]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d12:	3308      	adds	r3, #8
 8004d14:	2102      	movs	r1, #2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f902 	bl	8005f20 <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d22:	e004      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d36:	4b5a      	ldr	r3, [pc, #360]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3a:	f023 0103 	bic.w	r1, r3, #3
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	4a56      	ldr	r2, [pc, #344]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f000 809f 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d76:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d82:	f7fd f913 	bl	8001fac <HAL_GetTick>
 8004d86:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d8a:	e00b      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8c:	f7fd f90e 	bl	8001fac <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b64      	cmp	r3, #100	@ 0x64
 8004d9a:	d903      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004da2:	e005      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004da4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ed      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d179      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004db8:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dc4:	4053      	eors	r3, r2
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dce:	4b34      	ldr	r3, [pc, #208]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dda:	4b31      	ldr	r3, [pc, #196]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	4a30      	ldr	r2, [pc, #192]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004de6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004df2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004df8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e06:	d118      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd f8d0 	bl	8001fac <HAL_GetTick>
 8004e0c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e10:	e00d      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fd f8cb 	bl	8001fac <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d903      	bls.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004e2c:	e005      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0eb      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d129      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e52:	d10e      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004e54:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e64:	091a      	lsrs	r2, r3, #4
 8004e66:	4b10      	ldr	r3, [pc, #64]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6113      	str	r3, [r2, #16]
 8004e70:	e005      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004e72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e7c:	6113      	str	r3, [r2, #16]
 8004e7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e80:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8e:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e94:	e00e      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004e9e:	e009      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	58024800 	.word	0x58024800
 8004ea8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f002 0301 	and.w	r3, r2, #1
 8004ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004eca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f000 8089 	beq.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004edc:	2b28      	cmp	r3, #40	@ 0x28
 8004ede:	d86b      	bhi.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004fc1 	.word	0x08004fc1
 8004eec:	08004fb9 	.word	0x08004fb9
 8004ef0:	08004fb9 	.word	0x08004fb9
 8004ef4:	08004fb9 	.word	0x08004fb9
 8004ef8:	08004fb9 	.word	0x08004fb9
 8004efc:	08004fb9 	.word	0x08004fb9
 8004f00:	08004fb9 	.word	0x08004fb9
 8004f04:	08004fb9 	.word	0x08004fb9
 8004f08:	08004f8d 	.word	0x08004f8d
 8004f0c:	08004fb9 	.word	0x08004fb9
 8004f10:	08004fb9 	.word	0x08004fb9
 8004f14:	08004fb9 	.word	0x08004fb9
 8004f18:	08004fb9 	.word	0x08004fb9
 8004f1c:	08004fb9 	.word	0x08004fb9
 8004f20:	08004fb9 	.word	0x08004fb9
 8004f24:	08004fb9 	.word	0x08004fb9
 8004f28:	08004fa3 	.word	0x08004fa3
 8004f2c:	08004fb9 	.word	0x08004fb9
 8004f30:	08004fb9 	.word	0x08004fb9
 8004f34:	08004fb9 	.word	0x08004fb9
 8004f38:	08004fb9 	.word	0x08004fb9
 8004f3c:	08004fb9 	.word	0x08004fb9
 8004f40:	08004fb9 	.word	0x08004fb9
 8004f44:	08004fb9 	.word	0x08004fb9
 8004f48:	08004fc1 	.word	0x08004fc1
 8004f4c:	08004fb9 	.word	0x08004fb9
 8004f50:	08004fb9 	.word	0x08004fb9
 8004f54:	08004fb9 	.word	0x08004fb9
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	08004fb9 	.word	0x08004fb9
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004fc1 	.word	0x08004fc1
 8004f6c:	08004fb9 	.word	0x08004fb9
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fb9 	.word	0x08004fb9
 8004f78:	08004fb9 	.word	0x08004fb9
 8004f7c:	08004fb9 	.word	0x08004fb9
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004fc1 	.word	0x08004fc1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	3308      	adds	r3, #8
 8004f92:	2101      	movs	r1, #1
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 ffc3 	bl	8005f20 <RCCEx_PLL2_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fa0:	e00f      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa6:	3328      	adds	r3, #40	@ 0x28
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f86a 	bl	8006084 <RCCEx_PLL3_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fb6:	e004      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fca:	4bbf      	ldr	r3, [pc, #764]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fd8:	4abb      	ldr	r2, [pc, #748]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fde:	e003      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f002 0302 	and.w	r3, r2, #2
 8004ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ffe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005002:	460b      	mov	r3, r1
 8005004:	4313      	orrs	r3, r2
 8005006:	d041      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800500e:	2b05      	cmp	r3, #5
 8005010:	d824      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005012:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005065 	.word	0x08005065
 800501c:	08005031 	.word	0x08005031
 8005020:	08005047 	.word	0x08005047
 8005024:	08005065 	.word	0x08005065
 8005028:	08005065 	.word	0x08005065
 800502c:	08005065 	.word	0x08005065
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	3308      	adds	r3, #8
 8005036:	2101      	movs	r1, #1
 8005038:	4618      	mov	r0, r3
 800503a:	f000 ff71 	bl	8005f20 <RCCEx_PLL2_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005044:	e00f      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	3328      	adds	r3, #40	@ 0x28
 800504c:	2101      	movs	r1, #1
 800504e:	4618      	mov	r0, r3
 8005050:	f001 f818 	bl	8006084 <RCCEx_PLL3_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800506e:	4b96      	ldr	r3, [pc, #600]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005072:	f023 0107 	bic.w	r1, r3, #7
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800507c:	4a92      	ldr	r2, [pc, #584]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800507e:	430b      	orrs	r3, r1
 8005080:	6553      	str	r3, [r2, #84]	@ 0x54
 8005082:	e003      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f002 0304 	and.w	r3, r2, #4
 8005098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	d044      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d825      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	080050d9 	.word	0x080050d9
 80050c8:	080050ef 	.word	0x080050ef
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800510d 	.word	0x0800510d
 80050d4:	0800510d 	.word	0x0800510d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050dc:	3308      	adds	r3, #8
 80050de:	2101      	movs	r1, #1
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 ff1d 	bl	8005f20 <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050ec:	e00f      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	3328      	adds	r3, #40	@ 0x28
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 ffc4 	bl	8006084 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005116:	4b6c      	ldr	r3, [pc, #432]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511a:	f023 0107 	bic.w	r1, r3, #7
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005126:	4a68      	ldr	r2, [pc, #416]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005128:	430b      	orrs	r3, r1
 800512a:	6593      	str	r3, [r2, #88]	@ 0x58
 800512c:	e003      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f002 0320 	and.w	r3, r2, #32
 8005142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800514c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005150:	460b      	mov	r3, r1
 8005152:	4313      	orrs	r3, r2
 8005154:	d055      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005162:	d033      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005168:	d82c      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516e:	d02f      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005174:	d826      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800517a:	d02b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800517c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005180:	d820      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005186:	d012      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800518c:	d81a      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d022      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005196:	d115      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	3308      	adds	r3, #8
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 febd 	bl	8005f20 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051ac:	e015      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b2:	3328      	adds	r3, #40	@ 0x28
 80051b4:	2102      	movs	r1, #2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff64 	bl	8006084 <RCCEx_PLL3_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051c2:	e00a      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ca:	e006      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051cc:	bf00      	nop
 80051ce:	e004      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051e2:	4b39      	ldr	r3, [pc, #228]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f2:	4a35      	ldr	r2, [pc, #212]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80051f8:	e003      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800520e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005212:	2300      	movs	r3, #0
 8005214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005218:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800521c:	460b      	mov	r3, r1
 800521e:	4313      	orrs	r3, r2
 8005220:	d058      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800522e:	d033      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005230:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005234:	d82c      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523a:	d02f      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005240:	d826      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005246:	d02b      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005248:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800524c:	d820      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005252:	d012      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005258:	d81a      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d022      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800525e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005262:	d115      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	3308      	adds	r3, #8
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fe57 	bl	8005f20 <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005278:	e015      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527e:	3328      	adds	r3, #40	@ 0x28
 8005280:	2102      	movs	r1, #2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fefe 	bl	8006084 <RCCEx_PLL3_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800528e:	e00a      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005296:	e006      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005298:	bf00      	nop
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800529c:	bf00      	nop
 800529e:	e002      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052a0:	bf00      	nop
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10e      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052be:	4a02      	ldr	r2, [pc, #8]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052c4:	e006      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80052e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80052ee:	460b      	mov	r3, r1
 80052f0:	4313      	orrs	r3, r2
 80052f2:	d055      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005300:	d033      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005302:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005306:	d82c      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800530c:	d02f      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005312:	d826      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005314:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005318:	d02b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800531a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800531e:	d820      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005324:	d012      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800532a:	d81a      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d022      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005334:	d115      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	3308      	adds	r3, #8
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fdee 	bl	8005f20 <RCCEx_PLL2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800534a:	e015      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800534c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005350:	3328      	adds	r3, #40	@ 0x28
 8005352:	2102      	movs	r1, #2
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fe95 	bl	8006084 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005360:	e00a      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800536a:	bf00      	nop
 800536c:	e004      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005380:	4ba1      	ldr	r3, [pc, #644]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005384:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005390:	4a9d      	ldr	r2, [pc, #628]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005392:	430b      	orrs	r3, r1
 8005394:	6593      	str	r3, [r2, #88]	@ 0x58
 8005396:	e003      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f002 0308 	and.w	r3, r2, #8
 80053ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80053ba:	460b      	mov	r3, r1
 80053bc:	4313      	orrs	r3, r2
 80053be:	d01e      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d2:	3328      	adds	r3, #40	@ 0x28
 80053d4:	2102      	movs	r1, #2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fe54 	bl	8006084 <RCCEx_PLL3_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053e8:	4b87      	ldr	r3, [pc, #540]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f8:	4a83      	ldr	r2, [pc, #524]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053fa:	430b      	orrs	r3, r1
 80053fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f002 0310 	and.w	r3, r2, #16
 800540a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800540e:	2300      	movs	r3, #0
 8005410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005414:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d01e      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542a:	d10c      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	3328      	adds	r3, #40	@ 0x28
 8005432:	2102      	movs	r1, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fe25 	bl	8006084 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005446:	4b70      	ldr	r3, [pc, #448]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005456:	4a6c      	ldr	r2, [pc, #432]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005472:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005476:	460b      	mov	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	d03e      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005488:	d022      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800548a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800548e:	d81b      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005498:	d00b      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800549a:	e015      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	3308      	adds	r3, #8
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fd3b 	bl	8005f20 <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054b0:	e00f      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	3328      	adds	r3, #40	@ 0x28
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fde2 	bl	8006084 <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054c6:	e004      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ce:	e000      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80054d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054da:	4b4b      	ldr	r3, [pc, #300]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054ea:	4a47      	ldr	r2, [pc, #284]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f0:	e003      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005506:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005508:	2300      	movs	r3, #0
 800550a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800550c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d03b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005522:	d01f      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005528:	d818      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800552e:	d003      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005534:	d007      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005538:	4b33      	ldr	r3, [pc, #204]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	4a32      	ldr	r2, [pc, #200]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800553e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005544:	e00f      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554a:	3328      	adds	r3, #40	@ 0x28
 800554c:	2101      	movs	r1, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fd98 	bl	8006084 <RCCEx_PLL3_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800555a:	e004      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005562:	e000      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800556e:	4b26      	ldr	r3, [pc, #152]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557e:	4a22      	ldr	r2, [pc, #136]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005580:	430b      	orrs	r3, r1
 8005582:	6553      	str	r3, [r2, #84]	@ 0x54
 8005584:	e003      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800559a:	673b      	str	r3, [r7, #112]	@ 0x70
 800559c:	2300      	movs	r3, #0
 800559e:	677b      	str	r3, [r7, #116]	@ 0x74
 80055a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80055a4:	460b      	mov	r3, r1
 80055a6:	4313      	orrs	r3, r2
 80055a8:	d034      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b8:	d007      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80055ba:	e011      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055bc:	4b12      	ldr	r3, [pc, #72]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	4a11      	ldr	r2, [pc, #68]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055c8:	e00e      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	3308      	adds	r3, #8
 80055d0:	2102      	movs	r1, #2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fca4 	bl	8005f20 <RCCEx_PLL2_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055f0:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fe:	4a02      	ldr	r2, [pc, #8]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005600:	430b      	orrs	r3, r1
 8005602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005606:	bf00      	nop
 8005608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005622:	2300      	movs	r3, #0
 8005624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005626:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800562a:	460b      	mov	r3, r1
 800562c:	4313      	orrs	r3, r2
 800562e:	d00c      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	3328      	adds	r3, #40	@ 0x28
 8005636:	2102      	movs	r1, #2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fd23 	bl	8006084 <RCCEx_PLL3_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005656:	663b      	str	r3, [r7, #96]	@ 0x60
 8005658:	2300      	movs	r3, #0
 800565a:	667b      	str	r3, [r7, #100]	@ 0x64
 800565c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d038      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800566e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005672:	d018      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005678:	d811      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800567a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567e:	d014      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005684:	d80b      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d011      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800568a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800568e:	d106      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005690:	4bc3      	ldr	r3, [pc, #780]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	4ac2      	ldr	r2, [pc, #776]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056a4:	e004      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056b8:	4bb9      	ldr	r3, [pc, #740]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	4ab5      	ldr	r2, [pc, #724]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ca:	430b      	orrs	r3, r1
 80056cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ce:	e003      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80056e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056e6:	2300      	movs	r3, #0
 80056e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056f4:	4baa      	ldr	r3, [pc, #680]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005702:	4aa7      	ldr	r2, [pc, #668]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005704:	430b      	orrs	r3, r1
 8005706:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005714:	653b      	str	r3, [r7, #80]	@ 0x50
 8005716:	2300      	movs	r3, #0
 8005718:	657b      	str	r3, [r7, #84]	@ 0x54
 800571a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800571e:	460b      	mov	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005724:	4b9e      	ldr	r3, [pc, #632]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005730:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005734:	4a9a      	ldr	r2, [pc, #616]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005736:	430b      	orrs	r3, r1
 8005738:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005748:	2300      	movs	r3, #0
 800574a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800574c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005750:	460b      	mov	r3, r1
 8005752:	4313      	orrs	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005756:	4b92      	ldr	r3, [pc, #584]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800575e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005764:	4a8e      	ldr	r2, [pc, #568]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005766:	430b      	orrs	r3, r1
 8005768:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005776:	643b      	str	r3, [r7, #64]	@ 0x40
 8005778:	2300      	movs	r3, #0
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
 800577c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005786:	4b86      	ldr	r3, [pc, #536]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	4a85      	ldr	r2, [pc, #532]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800578c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005790:	6113      	str	r3, [r2, #16]
 8005792:	4b83      	ldr	r3, [pc, #524]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005794:	6919      	ldr	r1, [r3, #16]
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800579e:	4a80      	ldr	r2, [pc, #512]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80057b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057b2:	2300      	movs	r3, #0
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057ba:	460b      	mov	r3, r1
 80057bc:	4313      	orrs	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057c0:	4b77      	ldr	r3, [pc, #476]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ce:	4a74      	ldr	r2, [pc, #464]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d0:	430b      	orrs	r3, r1
 80057d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80057e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e2:	2300      	movs	r3, #0
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057ea:	460b      	mov	r3, r1
 80057ec:	4313      	orrs	r3, r2
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057f0:	4b6b      	ldr	r3, [pc, #428]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005800:	4a67      	ldr	r2, [pc, #412]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005802:	430b      	orrs	r3, r1
 8005804:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	2100      	movs	r1, #0
 8005810:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005818:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	3308      	adds	r3, #8
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fb78 	bl	8005f20 <RCCEx_PLL2_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	2100      	movs	r1, #0
 8005850:	6239      	str	r1, [r7, #32]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
 8005858:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d011      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	3308      	adds	r3, #8
 8005868:	2101      	movs	r1, #1
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fb58 	bl	8005f20 <RCCEx_PLL2_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	2100      	movs	r1, #0
 8005890:	61b9      	str	r1, [r7, #24]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800589c:	460b      	mov	r3, r1
 800589e:	4313      	orrs	r3, r2
 80058a0:	d011      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a6:	3308      	adds	r3, #8
 80058a8:	2102      	movs	r1, #2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb38 	bl	8005f20 <RCCEx_PLL2_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	2100      	movs	r1, #0
 80058d0:	6139      	str	r1, [r7, #16]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058dc:	460b      	mov	r3, r1
 80058de:	4313      	orrs	r3, r2
 80058e0:	d011      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	3328      	adds	r3, #40	@ 0x28
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fbca 	bl	8006084 <RCCEx_PLL3_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	2100      	movs	r1, #0
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d011      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	3328      	adds	r3, #40	@ 0x28
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fbaa 	bl	8006084 <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	2100      	movs	r1, #0
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	e9d7 1200 	ldrd	r1, r2, [r7]
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d011      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	3328      	adds	r3, #40	@ 0x28
 8005968:	2102      	movs	r1, #2
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fb8a 	bl	8006084 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005986:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
}
 8005994:	4618      	mov	r0, r3
 8005996:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800599a:	46bd      	mov	sp, r7
 800599c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059a0:	58024400 	.word	0x58024400

080059a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059a8:	f7fe fd96 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4904      	ldr	r1, [pc, #16]	@ (80059cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	58024400 	.word	0x58024400
 80059cc:	0800b3b4 	.word	0x0800b3b4

080059d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b089      	sub	sp, #36	@ 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059d8:	4ba1      	ldr	r3, [pc, #644]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80059e2:	4b9f      	ldr	r3, [pc, #636]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	0b1b      	lsrs	r3, r3, #12
 80059e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80059ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80059fa:	4b99      	ldr	r3, [pc, #612]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8111 	beq.w	8005c40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	f000 8083 	beq.w	8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	f200 80a1 	bhi.w	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d056      	beq.n	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a3a:	e099      	b.n	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a3c:	4b88      	ldr	r3, [pc, #544]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02d      	beq.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a48:	4b85      	ldr	r3, [pc, #532]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	08db      	lsrs	r3, r3, #3
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	4a84      	ldr	r2, [pc, #528]	@ (8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b7b      	ldr	r3, [pc, #492]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005aa2:	e087      	b.n	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae6:	e065      	b.n	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b59      	ldr	r3, [pc, #356]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b2a:	e043      	b.n	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3e:	4b48      	ldr	r3, [pc, #288]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b6e:	e021      	b.n	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b37      	ldr	r3, [pc, #220]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	0a5b      	lsrs	r3, r3, #9
 8005bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bda:	ee17 2a90 	vmov	r2, s15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005be2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be6:	0c1b      	lsrs	r3, r3, #16
 8005be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c08:	ee17 2a90 	vmov	r2, s15
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c10:	4b13      	ldr	r3, [pc, #76]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c14:	0e1b      	lsrs	r3, r3, #24
 8005c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c36:	ee17 2a90 	vmov	r2, s15
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c3e:	e008      	b.n	8005c52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	609a      	str	r2, [r3, #8]
}
 8005c52:	bf00      	nop
 8005c54:	3724      	adds	r7, #36	@ 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	58024400 	.word	0x58024400
 8005c64:	03d09000 	.word	0x03d09000
 8005c68:	46000000 	.word	0x46000000
 8005c6c:	4c742400 	.word	0x4c742400
 8005c70:	4a742400 	.word	0x4a742400
 8005c74:	4b742400 	.word	0x4b742400

08005c78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	@ 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c80:	4ba1      	ldr	r3, [pc, #644]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c8a:	4b9f      	ldr	r3, [pc, #636]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	0d1b      	lsrs	r3, r3, #20
 8005c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c96:	4b9c      	ldr	r3, [pc, #624]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ca2:	4b99      	ldr	r3, [pc, #612]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8111 	beq.w	8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f000 8083 	beq.w	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	f200 80a1 	bhi.w	8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d056      	beq.n	8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ce2:	e099      	b.n	8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce4:	4b88      	ldr	r3, [pc, #544]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02d      	beq.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cf0:	4b85      	ldr	r3, [pc, #532]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	4a84      	ldr	r2, [pc, #528]	@ (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d4a:	e087      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8e:	e065      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da2:	4b59      	ldr	r3, [pc, #356]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dd2:	e043      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de6:	4b48      	ldr	r3, [pc, #288]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e16:	e021      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2a:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e60:	0a5b      	lsrs	r3, r3, #9
 8005e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e82:	ee17 2a90 	vmov	r2, s15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb0:	ee17 2a90 	vmov	r2, s15
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005eb8:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	0e1b      	lsrs	r3, r3, #24
 8005ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ede:	ee17 2a90 	vmov	r2, s15
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ee6:	e008      	b.n	8005efa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
}
 8005efa:	bf00      	nop
 8005efc:	3724      	adds	r7, #36	@ 0x24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	03d09000 	.word	0x03d09000
 8005f10:	46000000 	.word	0x46000000
 8005f14:	4c742400 	.word	0x4c742400
 8005f18:	4a742400 	.word	0x4a742400
 8005f1c:	4b742400 	.word	0x4b742400

08005f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f2e:	4b53      	ldr	r3, [pc, #332]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d101      	bne.n	8005f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e099      	b.n	8006072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4e      	ldr	r2, [pc, #312]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4a:	f7fc f82f 	bl	8001fac <HAL_GetTick>
 8005f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f50:	e008      	b.n	8005f64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f52:	f7fc f82b 	bl	8001fac <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e086      	b.n	8006072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f64:	4b45      	ldr	r3, [pc, #276]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f0      	bne.n	8005f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f70:	4b42      	ldr	r3, [pc, #264]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	493f      	ldr	r1, [pc, #252]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	025b      	lsls	r3, r3, #9
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fb4:	4931      	ldr	r1, [pc, #196]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fba:	4b30      	ldr	r3, [pc, #192]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	492d      	ldr	r1, [pc, #180]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	f023 0220 	bic.w	r2, r3, #32
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4928      	ldr	r1, [pc, #160]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fde:	4b27      	ldr	r3, [pc, #156]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	4a26      	ldr	r2, [pc, #152]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fea:	4b24      	ldr	r3, [pc, #144]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fee:	4b24      	ldr	r3, [pc, #144]	@ (8006080 <RCCEx_PLL2_Config+0x160>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	69d2      	ldr	r2, [r2, #28]
 8005ff6:	00d2      	lsls	r2, r2, #3
 8005ff8:	4920      	ldr	r1, [pc, #128]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	4a1e      	ldr	r2, [pc, #120]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006004:	f043 0310 	orr.w	r3, r3, #16
 8006008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006010:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	4a19      	ldr	r2, [pc, #100]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800601a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800601c:	e00f      	b.n	800603e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d106      	bne.n	8006032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006024:	4b15      	ldr	r3, [pc, #84]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800602e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006030:	e005      	b.n	800603e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006036:	4a11      	ldr	r2, [pc, #68]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800603c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800603e:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a0e      	ldr	r2, [pc, #56]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006044:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604a:	f7fb ffaf 	bl	8001fac <HAL_GetTick>
 800604e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006050:	e008      	b.n	8006064 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006052:	f7fb ffab 	bl	8001fac <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e006      	b.n	8006072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006064:	4b05      	ldr	r3, [pc, #20]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	ffff0007 	.word	0xffff0007

08006084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006092:	4b53      	ldr	r3, [pc, #332]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d101      	bne.n	80060a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e099      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060a2:	4b4f      	ldr	r3, [pc, #316]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a4e      	ldr	r2, [pc, #312]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ae:	f7fb ff7d 	bl	8001fac <HAL_GetTick>
 80060b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060b4:	e008      	b.n	80060c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060b6:	f7fb ff79 	bl	8001fac <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e086      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060c8:	4b45      	ldr	r3, [pc, #276]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060d4:	4b42      	ldr	r3, [pc, #264]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	051b      	lsls	r3, r3, #20
 80060e2:	493f      	ldr	r1, [pc, #252]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	025b      	lsls	r3, r3, #9
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	3b01      	subs	r3, #1
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006118:	4931      	ldr	r1, [pc, #196]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800611e:	4b30      	ldr	r3, [pc, #192]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	492d      	ldr	r1, [pc, #180]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006130:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	4928      	ldr	r1, [pc, #160]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006142:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	4a26      	ldr	r2, [pc, #152]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800614c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800614e:	4b24      	ldr	r3, [pc, #144]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006152:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <RCCEx_PLL3_Config+0x160>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	69d2      	ldr	r2, [r2, #28]
 800615a:	00d2      	lsls	r2, r2, #3
 800615c:	4920      	ldr	r1, [pc, #128]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800615e:	4313      	orrs	r3, r2
 8006160:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006162:	4b1f      	ldr	r3, [pc, #124]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006166:	4a1e      	ldr	r2, [pc, #120]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800616c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006174:	4b1a      	ldr	r3, [pc, #104]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4a19      	ldr	r2, [pc, #100]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800617a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006180:	e00f      	b.n	80061a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d106      	bne.n	8006196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006188:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4a14      	ldr	r2, [pc, #80]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800618e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006194:	e005      	b.n	80061a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006196:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	4a11      	ldr	r2, [pc, #68]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800619c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061a2:	4b0f      	ldr	r3, [pc, #60]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0e      	ldr	r2, [pc, #56]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ae:	f7fb fefd 	bl	8001fac <HAL_GetTick>
 80061b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061b4:	e008      	b.n	80061c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061b6:	f7fb fef9 	bl	8001fac <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e006      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061c8:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	58024400 	.word	0x58024400
 80061e4:	ffff0007 	.word	0xffff0007

080061e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e10f      	b.n	800641a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a87      	ldr	r2, [pc, #540]	@ (8006424 <HAL_SPI_Init+0x23c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <HAL_SPI_Init+0x42>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a86      	ldr	r2, [pc, #536]	@ (8006428 <HAL_SPI_Init+0x240>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00a      	beq.n	800622a <HAL_SPI_Init+0x42>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a84      	ldr	r2, [pc, #528]	@ (800642c <HAL_SPI_Init+0x244>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d005      	beq.n	800622a <HAL_SPI_Init+0x42>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d901      	bls.n	800622a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0f7      	b.n	800641a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fe2e 	bl	8006e8c <SPI_GetPacketSize>
 8006230:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7b      	ldr	r2, [pc, #492]	@ (8006424 <HAL_SPI_Init+0x23c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00c      	beq.n	8006256 <HAL_SPI_Init+0x6e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a79      	ldr	r2, [pc, #484]	@ (8006428 <HAL_SPI_Init+0x240>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <HAL_SPI_Init+0x6e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a78      	ldr	r2, [pc, #480]	@ (800642c <HAL_SPI_Init+0x244>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d002      	beq.n	8006256 <HAL_SPI_Init+0x6e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d811      	bhi.n	800627a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800625a:	4a72      	ldr	r2, [pc, #456]	@ (8006424 <HAL_SPI_Init+0x23c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a70      	ldr	r2, [pc, #448]	@ (8006428 <HAL_SPI_Init+0x240>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_SPI_Init+0x8c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a6f      	ldr	r2, [pc, #444]	@ (800642c <HAL_SPI_Init+0x244>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d104      	bne.n	800627e <HAL_SPI_Init+0x96>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b10      	cmp	r3, #16
 8006278:	d901      	bls.n	800627e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e0cd      	b.n	800641a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb f9fe 	bl	8001694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80062ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062c4:	d119      	bne.n	80062fa <HAL_SPI_Init+0x112>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ce:	d103      	bne.n	80062d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10c      	bne.n	80062fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80062e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e8:	d107      	bne.n	80062fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <HAL_SPI_Init+0x13e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b06      	cmp	r3, #6
 800630c:	d90b      	bls.n	8006326 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e007      	b.n	8006336 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	431a      	orrs	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006348:	ea42 0103 	orr.w	r1, r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006396:	ea42 0103 	orr.w	r1, r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d113      	bne.n	80063d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40013000 	.word	0x40013000
 8006428:	40003800 	.word	0x40003800
 800642c:	40003c00 	.word	0x40003c00

08006430 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af02      	add	r7, sp, #8
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3320      	adds	r3, #32
 8006446:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006448:	f7fb fdb0 	bl	8001fac <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d001      	beq.n	800645e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
 800645c:	e1d1      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_SPI_Transmit+0x3a>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e1c9      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_SPI_Transmit+0x4c>
 8006478:	2302      	movs	r3, #2
 800647a:	e1c2      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2203      	movs	r2, #3
 8006488:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80064d4:	d108      	bne.n	80064e8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e009      	b.n	80064fc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80064fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	4b96      	ldr	r3, [pc, #600]	@ (800675c <HAL_SPI_Transmit+0x32c>)
 8006504:	4013      	ands	r3, r2
 8006506:	88f9      	ldrh	r1, [r7, #6]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	430b      	orrs	r3, r1
 800650e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006528:	d107      	bne.n	800653a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d947      	bls.n	80065d2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006542:	e03f      	b.n	80065c4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d114      	bne.n	800657c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006562:	1d1a      	adds	r2, r3, #4
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800657a:	e023      	b.n	80065c4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657c:	f7fb fd16 	bl	8001fac <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d803      	bhi.n	8006594 <HAL_SPI_Transmit+0x164>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d102      	bne.n	800659a <HAL_SPI_Transmit+0x16a>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d114      	bne.n	80065c4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fba8 	bl	8006cf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e11e      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1b9      	bne.n	8006544 <HAL_SPI_Transmit+0x114>
 80065d0:	e0f1      	b.n	80067b6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	f240 80e6 	bls.w	80067a8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80065dc:	e05d      	b.n	800669a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d132      	bne.n	8006652 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d918      	bls.n	800662a <HAL_SPI_Transmit+0x1fa>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d014      	beq.n	800662a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	1d1a      	adds	r2, r3, #4
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b02      	subs	r3, #2
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006628:	e037      	b.n	800669a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662e:	881a      	ldrh	r2, [r3, #0]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006650:	e023      	b.n	800669a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006652:	f7fb fcab 	bl	8001fac <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d803      	bhi.n	800666a <HAL_SPI_Transmit+0x23a>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d102      	bne.n	8006670 <HAL_SPI_Transmit+0x240>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d114      	bne.n	800669a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fb3d 	bl	8006cf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800667c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e0b3      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d19b      	bne.n	80065de <HAL_SPI_Transmit+0x1ae>
 80066a6:	e086      	b.n	80067b6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d154      	bne.n	8006760 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d918      	bls.n	80066f4 <HAL_SPI_Transmit+0x2c4>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d914      	bls.n	80066f4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b04      	subs	r3, #4
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066f2:	e059      	b.n	80067a8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d917      	bls.n	8006730 <HAL_SPI_Transmit+0x300>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670c:	881a      	ldrh	r2, [r3, #0]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006716:	1c9a      	adds	r2, r3, #2
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b02      	subs	r3, #2
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800672e:	e03b      	b.n	80067a8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3320      	adds	r3, #32
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800675a:	e025      	b.n	80067a8 <HAL_SPI_Transmit+0x378>
 800675c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006760:	f7fb fc24 	bl	8001fac <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d803      	bhi.n	8006778 <HAL_SPI_Transmit+0x348>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d102      	bne.n	800677e <HAL_SPI_Transmit+0x34e>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d114      	bne.n	80067a8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 fab6 	bl	8006cf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800678a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e02c      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f47f af79 	bne.w	80066a8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2200      	movs	r2, #0
 80067be:	2108      	movs	r1, #8
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fb35 	bl	8006e30 <SPI_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fa87 	bl	8006cf0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006800:	2300      	movs	r3, #0
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop

0800680c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	b29b      	uxth	r3, r3
 8006824:	3301      	adds	r3, #1
 8006826:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3330      	adds	r3, #48	@ 0x30
 800682e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006830:	f7fb fbbc 	bl	8001fac <HAL_GetTick>
 8006834:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	d001      	beq.n	8006846 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
 8006844:	e250      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_SPI_Receive+0x46>
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e248      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_SPI_Receive+0x58>
 8006860:	2302      	movs	r3, #2
 8006862:	e241      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2204      	movs	r2, #4
 8006870:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	88fa      	ldrh	r2, [r7, #6]
 8006886:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80068bc:	d108      	bne.n	80068d0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e009      	b.n	80068e4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80068e2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	4b95      	ldr	r3, [pc, #596]	@ (8006b40 <HAL_SPI_Receive+0x334>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	88f9      	ldrh	r1, [r7, #6]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006910:	d107      	bne.n	8006922 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006920:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d96c      	bls.n	8006a04 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800692a:	e064      	b.n	80069f6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b01      	cmp	r3, #1
 8006940:	d114      	bne.n	800696c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800694a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800694c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800696a:	e044      	b.n	80069f6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006972:	b29b      	uxth	r3, r3
 8006974:	8bfa      	ldrh	r2, [r7, #30]
 8006976:	429a      	cmp	r2, r3
 8006978:	d919      	bls.n	80069ae <HAL_SPI_Receive+0x1a2>
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d014      	beq.n	80069ae <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800698c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800698e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069ac:	e023      	b.n	80069f6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ae:	f7fb fafd 	bl	8001fac <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d803      	bhi.n	80069c6 <HAL_SPI_Receive+0x1ba>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d102      	bne.n	80069cc <HAL_SPI_Receive+0x1c0>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d114      	bne.n	80069f6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f98f 	bl	8006cf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e178      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d194      	bne.n	800692c <HAL_SPI_Receive+0x120>
 8006a02:	e15e      	b.n	8006cc2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b07      	cmp	r3, #7
 8006a0a:	f240 8153 	bls.w	8006cb4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006a0e:	e08f      	b.n	8006b30 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d114      	bne.n	8006a50 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	8812      	ldrh	r2, [r2, #0]
 8006a2e:	b292      	uxth	r2, r2
 8006a30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a4e:	e06f      	b.n	8006b30 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8bfa      	ldrh	r2, [r7, #30]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d924      	bls.n	8006aa8 <HAL_SPI_Receive+0x29c>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01f      	beq.n	8006aa8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	8812      	ldrh	r2, [r2, #0]
 8006a70:	b292      	uxth	r2, r2
 8006a72:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	8812      	ldrh	r2, [r2, #0]
 8006a86:	b292      	uxth	r2, r2
 8006a88:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a8e:	1c9a      	adds	r2, r3, #2
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b02      	subs	r3, #2
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006aa6:	e043      	b.n	8006b30 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d119      	bne.n	8006ae8 <HAL_SPI_Receive+0x2dc>
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d014      	beq.n	8006ae8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	8812      	ldrh	r2, [r2, #0]
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ae6:	e023      	b.n	8006b30 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ae8:	f7fb fa60 	bl	8001fac <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d803      	bhi.n	8006b00 <HAL_SPI_Receive+0x2f4>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afe:	d102      	bne.n	8006b06 <HAL_SPI_Receive+0x2fa>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d114      	bne.n	8006b30 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f8f2 	bl	8006cf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e0db      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f47f af69 	bne.w	8006a10 <HAL_SPI_Receive+0x204>
 8006b3e:	e0c0      	b.n	8006cc2 <HAL_SPI_Receive+0x4b6>
 8006b40:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d117      	bne.n	8006b8a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b66:	7812      	ldrb	r2, [r2, #0]
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b88:	e094      	b.n	8006cb4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8bfa      	ldrh	r2, [r7, #30]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d946      	bls.n	8006c26 <HAL_SPI_Receive+0x41a>
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d041      	beq.n	8006c26 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b04      	subs	r3, #4
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c24:	e046      	b.n	8006cb4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d81c      	bhi.n	8006c6c <HAL_SPI_Receive+0x460>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d017      	beq.n	8006c6c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c6a:	e023      	b.n	8006cb4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c6c:	f7fb f99e 	bl	8001fac <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d803      	bhi.n	8006c84 <HAL_SPI_Receive+0x478>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d102      	bne.n	8006c8a <HAL_SPI_Receive+0x47e>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d114      	bne.n	8006cb4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f830 	bl	8006cf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e019      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f47f af41 	bne.w	8006b44 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f814 	bl	8006cf0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0208 	orr.w	r2, r2, #8
 8006d0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0210 	orr.w	r2, r2, #16
 8006d1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6919      	ldr	r1, [r3, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8006e2c <SPI_CloseTransfer+0x13c>)
 8006d3c:	400b      	ands	r3, r1
 8006d3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d014      	beq.n	8006d86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0220 	orr.w	r2, r2, #32
 8006d84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d014      	beq.n	8006dbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00f      	beq.n	8006dbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da2:	f043 0204 	orr.w	r2, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00f      	beq.n	8006de6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dcc:	f043 0201 	orr.w	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006de4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00f      	beq.n	8006e10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006df6:	f043 0208 	orr.w	r2, r3, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	fffffc90 	.word	0xfffffc90

08006e30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e40:	e010      	b.n	8006e64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e42:	f7fb f8b3 	bl	8001fac <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d803      	bhi.n	8006e5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d102      	bne.n	8006e60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e00f      	b.n	8006e84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	bf0c      	ite	eq
 8006e74:	2301      	moveq	r3, #1
 8006e76:	2300      	movne	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d0df      	beq.n	8006e42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	3307      	adds	r3, #7
 8006eaa:	08db      	lsrs	r3, r3, #3
 8006eac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e049      	b.n	8006f68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d106      	bne.n	8006eee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fa fded 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4619      	mov	r1, r3
 8006f00:	4610      	mov	r0, r2
 8006f02:	f000 fceb 	bl	80078dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e049      	b.n	8007016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f841 	bl	800701e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f000 fc94 	bl	80078dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
	...

08007034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d109      	bne.n	8007058 <HAL_TIM_PWM_Start+0x24>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	e03c      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b04      	cmp	r3, #4
 800705c:	d109      	bne.n	8007072 <HAL_TIM_PWM_Start+0x3e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b01      	cmp	r3, #1
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	e02f      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d109      	bne.n	800708c <HAL_TIM_PWM_Start+0x58>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	e022      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d109      	bne.n	80070a6 <HAL_TIM_PWM_Start+0x72>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	e015      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d109      	bne.n	80070c0 <HAL_TIM_PWM_Start+0x8c>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	bf14      	ite	ne
 80070b8:	2301      	movne	r3, #1
 80070ba:	2300      	moveq	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	e008      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0a1      	b.n	800721e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start+0xb6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e8:	e023      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start+0xc6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f8:	e01b      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Start+0xd6>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007108:	e013      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b0c      	cmp	r3, #12
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Start+0xe6>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007118:	e00b      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b10      	cmp	r3, #16
 800711e:	d104      	bne.n	800712a <HAL_TIM_PWM_Start+0xf6>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007128:	e003      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2201      	movs	r2, #1
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 ffe8 	bl	8008110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a38      	ldr	r2, [pc, #224]	@ (8007228 <HAL_TIM_PWM_Start+0x1f4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a37      	ldr	r2, [pc, #220]	@ (800722c <HAL_TIM_PWM_Start+0x1f8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a35      	ldr	r2, [pc, #212]	@ (8007230 <HAL_TIM_PWM_Start+0x1fc>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a34      	ldr	r2, [pc, #208]	@ (8007234 <HAL_TIM_PWM_Start+0x200>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a32      	ldr	r2, [pc, #200]	@ (8007238 <HAL_TIM_PWM_Start+0x204>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <HAL_TIM_PWM_Start+0x142>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_TIM_PWM_Start+0x144>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800718a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a25      	ldr	r2, [pc, #148]	@ (8007228 <HAL_TIM_PWM_Start+0x1f4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d022      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719e:	d01d      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a25      	ldr	r2, [pc, #148]	@ (800723c <HAL_TIM_PWM_Start+0x208>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d018      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a24      	ldr	r2, [pc, #144]	@ (8007240 <HAL_TIM_PWM_Start+0x20c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a22      	ldr	r2, [pc, #136]	@ (8007244 <HAL_TIM_PWM_Start+0x210>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00e      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <HAL_TIM_PWM_Start+0x1f8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d009      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007248 <HAL_TIM_PWM_Start+0x214>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_TIM_PWM_Start+0x1a8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <HAL_TIM_PWM_Start+0x1fc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d115      	bne.n	8007208 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	4b1a      	ldr	r3, [pc, #104]	@ (800724c <HAL_TIM_PWM_Start+0x218>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b06      	cmp	r3, #6
 80071ec:	d015      	beq.n	800721a <HAL_TIM_PWM_Start+0x1e6>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f4:	d011      	beq.n	800721a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007206:	e008      	b.n	800721a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e000      	b.n	800721c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000
 800722c:	40010400 	.word	0x40010400
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40000c00 	.word	0x40000c00
 8007248:	40001800 	.word	0x40001800
 800724c:	00010007 	.word	0x00010007

08007250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d020      	beq.n	80072b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01b      	beq.n	80072b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0202 	mvn.w	r2, #2
 8007284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fb00 	bl	80078a0 <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 faf2 	bl	800788c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb03 	bl	80078b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d020      	beq.n	8007300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01b      	beq.n	8007300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0204 	mvn.w	r2, #4
 80072d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fada 	bl	80078a0 <HAL_TIM_IC_CaptureCallback>
 80072ec:	e005      	b.n	80072fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 facc 	bl	800788c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fadd 	bl	80078b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d020      	beq.n	800734c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01b      	beq.n	800734c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0208 	mvn.w	r2, #8
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fab4 	bl	80078a0 <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 faa6 	bl	800788c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fab7 	bl	80078b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 0310 	and.w	r3, r3, #16
 8007352:	2b00      	cmp	r3, #0
 8007354:	d020      	beq.n	8007398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01b      	beq.n	8007398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0210 	mvn.w	r2, #16
 8007368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2208      	movs	r2, #8
 800736e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa8e 	bl	80078a0 <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa80 	bl	800788c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa91 	bl	80078b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0201 	mvn.w	r2, #1
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa5e 	bl	8007878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80073e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ff51 	bl	800828c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 ff49 	bl	80082a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa4b 	bl	80078c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00c      	beq.n	8007456 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f06f 0220 	mvn.w	r2, #32
 800744e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 ff11 	bl	8008278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800747a:	2302      	movs	r3, #2
 800747c:	e0ff      	b.n	800767e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b14      	cmp	r3, #20
 800748a:	f200 80f0 	bhi.w	800766e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800748e:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074e9 	.word	0x080074e9
 8007498:	0800766f 	.word	0x0800766f
 800749c:	0800766f 	.word	0x0800766f
 80074a0:	0800766f 	.word	0x0800766f
 80074a4:	08007529 	.word	0x08007529
 80074a8:	0800766f 	.word	0x0800766f
 80074ac:	0800766f 	.word	0x0800766f
 80074b0:	0800766f 	.word	0x0800766f
 80074b4:	0800756b 	.word	0x0800756b
 80074b8:	0800766f 	.word	0x0800766f
 80074bc:	0800766f 	.word	0x0800766f
 80074c0:	0800766f 	.word	0x0800766f
 80074c4:	080075ab 	.word	0x080075ab
 80074c8:	0800766f 	.word	0x0800766f
 80074cc:	0800766f 	.word	0x0800766f
 80074d0:	0800766f 	.word	0x0800766f
 80074d4:	080075ed 	.word	0x080075ed
 80074d8:	0800766f 	.word	0x0800766f
 80074dc:	0800766f 	.word	0x0800766f
 80074e0:	0800766f 	.word	0x0800766f
 80074e4:	0800762d 	.word	0x0800762d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fa9a 	bl	8007a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0208 	orr.w	r2, r2, #8
 8007502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0204 	bic.w	r2, r2, #4
 8007512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6999      	ldr	r1, [r3, #24]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	619a      	str	r2, [r3, #24]
      break;
 8007526:	e0a5      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fb0a 	bl	8007b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6999      	ldr	r1, [r3, #24]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	021a      	lsls	r2, r3, #8
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	619a      	str	r2, [r3, #24]
      break;
 8007568:	e084      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fb73 	bl	8007c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0208 	orr.w	r2, r2, #8
 8007584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69da      	ldr	r2, [r3, #28]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0204 	bic.w	r2, r2, #4
 8007594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69d9      	ldr	r1, [r3, #28]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	61da      	str	r2, [r3, #28]
      break;
 80075a8:	e064      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68b9      	ldr	r1, [r7, #8]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fbdb 	bl	8007d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69d9      	ldr	r1, [r3, #28]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	021a      	lsls	r2, r3, #8
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	61da      	str	r2, [r3, #28]
      break;
 80075ea:	e043      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fc24 	bl	8007e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0208 	orr.w	r2, r2, #8
 8007606:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0204 	bic.w	r2, r2, #4
 8007616:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800762a:	e023      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fc68 	bl	8007f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007646:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007656:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	021a      	lsls	r2, r3, #8
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800766c:	e002      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	75fb      	strb	r3, [r7, #23]
      break;
 8007672:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop

08007688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_TIM_ConfigClockSource+0x1c>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e0dc      	b.n	800785e <HAL_TIM_ConfigClockSource+0x1d6>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	4b6a      	ldr	r3, [pc, #424]	@ (8007868 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a64      	ldr	r2, [pc, #400]	@ (800786c <HAL_TIM_ConfigClockSource+0x1e4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	f000 80a9 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 80076e0:	4a62      	ldr	r2, [pc, #392]	@ (800786c <HAL_TIM_ConfigClockSource+0x1e4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	f200 80ae 	bhi.w	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 80076e8:	4a61      	ldr	r2, [pc, #388]	@ (8007870 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f000 80a1 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 80076f0:	4a5f      	ldr	r2, [pc, #380]	@ (8007870 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	f200 80a6 	bhi.w	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 80076f8:	4a5e      	ldr	r2, [pc, #376]	@ (8007874 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	f000 8099 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 8007700:	4a5c      	ldr	r2, [pc, #368]	@ (8007874 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007702:	4293      	cmp	r3, r2
 8007704:	f200 809e 	bhi.w	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007708:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800770c:	f000 8091 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 8007710:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007714:	f200 8096 	bhi.w	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007718:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800771c:	f000 8089 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 8007720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007724:	f200 808e 	bhi.w	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800772c:	d03e      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x124>
 800772e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007732:	f200 8087 	bhi.w	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800773a:	f000 8086 	beq.w	800784a <HAL_TIM_ConfigClockSource+0x1c2>
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007742:	d87f      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007744:	2b70      	cmp	r3, #112	@ 0x70
 8007746:	d01a      	beq.n	800777e <HAL_TIM_ConfigClockSource+0xf6>
 8007748:	2b70      	cmp	r3, #112	@ 0x70
 800774a:	d87b      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 800774c:	2b60      	cmp	r3, #96	@ 0x60
 800774e:	d050      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x16a>
 8007750:	2b60      	cmp	r3, #96	@ 0x60
 8007752:	d877      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007754:	2b50      	cmp	r3, #80	@ 0x50
 8007756:	d03c      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x14a>
 8007758:	2b50      	cmp	r3, #80	@ 0x50
 800775a:	d873      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 800775c:	2b40      	cmp	r3, #64	@ 0x40
 800775e:	d058      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x18a>
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	d86f      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007764:	2b30      	cmp	r3, #48	@ 0x30
 8007766:	d064      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 8007768:	2b30      	cmp	r3, #48	@ 0x30
 800776a:	d86b      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 800776c:	2b20      	cmp	r3, #32
 800776e:	d060      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 8007770:	2b20      	cmp	r3, #32
 8007772:	d867      	bhi.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d05c      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 8007778:	2b10      	cmp	r3, #16
 800777a:	d05a      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x1aa>
 800777c:	e062      	b.n	8007844 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800778e:	f000 fc9f 	bl	80080d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	609a      	str	r2, [r3, #8]
      break;
 80077aa:	e04f      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077bc:	f000 fc88 	bl	80080d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077ce:	609a      	str	r2, [r3, #8]
      break;
 80077d0:	e03c      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077de:	461a      	mov	r2, r3
 80077e0:	f000 fbf8 	bl	8007fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2150      	movs	r1, #80	@ 0x50
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fc52 	bl	8008094 <TIM_ITRx_SetConfig>
      break;
 80077f0:	e02c      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077fe:	461a      	mov	r2, r3
 8007800:	f000 fc17 	bl	8008032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2160      	movs	r1, #96	@ 0x60
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fc42 	bl	8008094 <TIM_ITRx_SetConfig>
      break;
 8007810:	e01c      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800781e:	461a      	mov	r2, r3
 8007820:	f000 fbd8 	bl	8007fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2140      	movs	r1, #64	@ 0x40
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fc32 	bl	8008094 <TIM_ITRx_SetConfig>
      break;
 8007830:	e00c      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f000 fc29 	bl	8008094 <TIM_ITRx_SetConfig>
      break;
 8007842:	e003      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	e000      	b.n	800784c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800784a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	ffceff88 	.word	0xffceff88
 800786c:	00100040 	.word	0x00100040
 8007870:	00100030 	.word	0x00100030
 8007874:	00100020 	.word	0x00100020

08007878 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a46      	ldr	r2, [pc, #280]	@ (8007a08 <TIM_Base_SetConfig+0x12c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d013      	beq.n	800791c <TIM_Base_SetConfig+0x40>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fa:	d00f      	beq.n	800791c <TIM_Base_SetConfig+0x40>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a43      	ldr	r2, [pc, #268]	@ (8007a0c <TIM_Base_SetConfig+0x130>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00b      	beq.n	800791c <TIM_Base_SetConfig+0x40>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a42      	ldr	r2, [pc, #264]	@ (8007a10 <TIM_Base_SetConfig+0x134>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d007      	beq.n	800791c <TIM_Base_SetConfig+0x40>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a41      	ldr	r2, [pc, #260]	@ (8007a14 <TIM_Base_SetConfig+0x138>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d003      	beq.n	800791c <TIM_Base_SetConfig+0x40>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a40      	ldr	r2, [pc, #256]	@ (8007a18 <TIM_Base_SetConfig+0x13c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d108      	bne.n	800792e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a35      	ldr	r2, [pc, #212]	@ (8007a08 <TIM_Base_SetConfig+0x12c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01f      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793c:	d01b      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a32      	ldr	r2, [pc, #200]	@ (8007a0c <TIM_Base_SetConfig+0x130>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d017      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a31      	ldr	r2, [pc, #196]	@ (8007a10 <TIM_Base_SetConfig+0x134>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a30      	ldr	r2, [pc, #192]	@ (8007a14 <TIM_Base_SetConfig+0x138>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00f      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2f      	ldr	r2, [pc, #188]	@ (8007a18 <TIM_Base_SetConfig+0x13c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00b      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2e      	ldr	r2, [pc, #184]	@ (8007a1c <TIM_Base_SetConfig+0x140>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2d      	ldr	r2, [pc, #180]	@ (8007a20 <TIM_Base_SetConfig+0x144>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_Base_SetConfig+0x9a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a2c      	ldr	r2, [pc, #176]	@ (8007a24 <TIM_Base_SetConfig+0x148>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800797c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a16      	ldr	r2, [pc, #88]	@ (8007a08 <TIM_Base_SetConfig+0x12c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00f      	beq.n	80079d4 <TIM_Base_SetConfig+0xf8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a18      	ldr	r2, [pc, #96]	@ (8007a18 <TIM_Base_SetConfig+0x13c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_Base_SetConfig+0xf8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a17      	ldr	r2, [pc, #92]	@ (8007a1c <TIM_Base_SetConfig+0x140>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0xf8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a16      	ldr	r2, [pc, #88]	@ (8007a20 <TIM_Base_SetConfig+0x144>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0xf8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a15      	ldr	r2, [pc, #84]	@ (8007a24 <TIM_Base_SetConfig+0x148>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d103      	bne.n	80079dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	691a      	ldr	r2, [r3, #16]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d105      	bne.n	80079fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f023 0201 	bic.w	r2, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	611a      	str	r2, [r3, #16]
  }
}
 80079fa:	bf00      	nop
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800
 8007a14:	40000c00 	.word	0x40000c00
 8007a18:	40010400 	.word	0x40010400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	f023 0201 	bic.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4b37      	ldr	r3, [pc, #220]	@ (8007b30 <TIM_OC1_SetConfig+0x108>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0302 	bic.w	r3, r3, #2
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8007b34 <TIM_OC1_SetConfig+0x10c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00f      	beq.n	8007aa4 <TIM_OC1_SetConfig+0x7c>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2c      	ldr	r2, [pc, #176]	@ (8007b38 <TIM_OC1_SetConfig+0x110>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00b      	beq.n	8007aa4 <TIM_OC1_SetConfig+0x7c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8007b3c <TIM_OC1_SetConfig+0x114>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d007      	beq.n	8007aa4 <TIM_OC1_SetConfig+0x7c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2a      	ldr	r2, [pc, #168]	@ (8007b40 <TIM_OC1_SetConfig+0x118>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d003      	beq.n	8007aa4 <TIM_OC1_SetConfig+0x7c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a29      	ldr	r2, [pc, #164]	@ (8007b44 <TIM_OC1_SetConfig+0x11c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d10c      	bne.n	8007abe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0308 	bic.w	r3, r3, #8
 8007aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 0304 	bic.w	r3, r3, #4
 8007abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b34 <TIM_OC1_SetConfig+0x10c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xbe>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <TIM_OC1_SetConfig+0x110>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xbe>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b3c <TIM_OC1_SetConfig+0x114>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xbe>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a19      	ldr	r2, [pc, #100]	@ (8007b40 <TIM_OC1_SetConfig+0x118>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xbe>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <TIM_OC1_SetConfig+0x11c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d111      	bne.n	8007b0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	621a      	str	r2, [r3, #32]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	fffeff8f 	.word	0xfffeff8f
 8007b34:	40010000 	.word	0x40010000
 8007b38:	40010400 	.word	0x40010400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f023 0210 	bic.w	r2, r3, #16
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4b34      	ldr	r3, [pc, #208]	@ (8007c44 <TIM_OC2_SetConfig+0xfc>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0320 	bic.w	r3, r3, #32
 8007b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a29      	ldr	r2, [pc, #164]	@ (8007c48 <TIM_OC2_SetConfig+0x100>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC2_SetConfig+0x68>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a28      	ldr	r2, [pc, #160]	@ (8007c4c <TIM_OC2_SetConfig+0x104>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10d      	bne.n	8007bcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a1e      	ldr	r2, [pc, #120]	@ (8007c48 <TIM_OC2_SetConfig+0x100>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00f      	beq.n	8007bf4 <TIM_OC2_SetConfig+0xac>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8007c4c <TIM_OC2_SetConfig+0x104>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <TIM_OC2_SetConfig+0xac>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1c      	ldr	r2, [pc, #112]	@ (8007c50 <TIM_OC2_SetConfig+0x108>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d007      	beq.n	8007bf4 <TIM_OC2_SetConfig+0xac>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c54 <TIM_OC2_SetConfig+0x10c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC2_SetConfig+0xac>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1a      	ldr	r2, [pc, #104]	@ (8007c58 <TIM_OC2_SetConfig+0x110>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d113      	bne.n	8007c1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	feff8fff 	.word	0xfeff8fff
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40010400 	.word	0x40010400
 8007c50:	40014000 	.word	0x40014000
 8007c54:	40014400 	.word	0x40014400
 8007c58:	40014800 	.word	0x40014800

08007c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4b33      	ldr	r3, [pc, #204]	@ (8007d54 <TIM_OC3_SetConfig+0xf8>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a28      	ldr	r2, [pc, #160]	@ (8007d58 <TIM_OC3_SetConfig+0xfc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_OC3_SetConfig+0x66>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a27      	ldr	r2, [pc, #156]	@ (8007d5c <TIM_OC3_SetConfig+0x100>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10d      	bne.n	8007cde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d58 <TIM_OC3_SetConfig+0xfc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00f      	beq.n	8007d06 <TIM_OC3_SetConfig+0xaa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d5c <TIM_OC3_SetConfig+0x100>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <TIM_OC3_SetConfig+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d60 <TIM_OC3_SetConfig+0x104>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d007      	beq.n	8007d06 <TIM_OC3_SetConfig+0xaa>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d64 <TIM_OC3_SetConfig+0x108>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC3_SetConfig+0xaa>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a19      	ldr	r2, [pc, #100]	@ (8007d68 <TIM_OC3_SetConfig+0x10c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d113      	bne.n	8007d2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	fffeff8f 	.word	0xfffeff8f
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	40010400 	.word	0x40010400
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4b24      	ldr	r3, [pc, #144]	@ (8007e28 <TIM_OC4_SetConfig+0xbc>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	031b      	lsls	r3, r3, #12
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a19      	ldr	r2, [pc, #100]	@ (8007e2c <TIM_OC4_SetConfig+0xc0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00f      	beq.n	8007dec <TIM_OC4_SetConfig+0x80>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a18      	ldr	r2, [pc, #96]	@ (8007e30 <TIM_OC4_SetConfig+0xc4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00b      	beq.n	8007dec <TIM_OC4_SetConfig+0x80>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a17      	ldr	r2, [pc, #92]	@ (8007e34 <TIM_OC4_SetConfig+0xc8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d007      	beq.n	8007dec <TIM_OC4_SetConfig+0x80>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a16      	ldr	r2, [pc, #88]	@ (8007e38 <TIM_OC4_SetConfig+0xcc>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d003      	beq.n	8007dec <TIM_OC4_SetConfig+0x80>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a15      	ldr	r2, [pc, #84]	@ (8007e3c <TIM_OC4_SetConfig+0xd0>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d109      	bne.n	8007e00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	019b      	lsls	r3, r3, #6
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	feff8fff 	.word	0xfeff8fff
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40010400 	.word	0x40010400
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	40014800 	.word	0x40014800

08007e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4b21      	ldr	r3, [pc, #132]	@ (8007ef0 <TIM_OC5_SetConfig+0xb0>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a18      	ldr	r2, [pc, #96]	@ (8007ef4 <TIM_OC5_SetConfig+0xb4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00f      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x76>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a17      	ldr	r2, [pc, #92]	@ (8007ef8 <TIM_OC5_SetConfig+0xb8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x76>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a16      	ldr	r2, [pc, #88]	@ (8007efc <TIM_OC5_SetConfig+0xbc>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x76>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a15      	ldr	r2, [pc, #84]	@ (8007f00 <TIM_OC5_SetConfig+0xc0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x76>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a14      	ldr	r2, [pc, #80]	@ (8007f04 <TIM_OC5_SetConfig+0xc4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d109      	bne.n	8007eca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	621a      	str	r2, [r3, #32]
}
 8007ee4:	bf00      	nop
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	fffeff8f 	.word	0xfffeff8f
 8007ef4:	40010000 	.word	0x40010000
 8007ef8:	40010400 	.word	0x40010400
 8007efc:	40014000 	.word	0x40014000
 8007f00:	40014400 	.word	0x40014400
 8007f04:	40014800 	.word	0x40014800

08007f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4b22      	ldr	r3, [pc, #136]	@ (8007fbc <TIM_OC6_SetConfig+0xb4>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	051b      	lsls	r3, r3, #20
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <TIM_OC6_SetConfig+0xb8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00f      	beq.n	8007f80 <TIM_OC6_SetConfig+0x78>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a18      	ldr	r2, [pc, #96]	@ (8007fc4 <TIM_OC6_SetConfig+0xbc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00b      	beq.n	8007f80 <TIM_OC6_SetConfig+0x78>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a17      	ldr	r2, [pc, #92]	@ (8007fc8 <TIM_OC6_SetConfig+0xc0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d007      	beq.n	8007f80 <TIM_OC6_SetConfig+0x78>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a16      	ldr	r2, [pc, #88]	@ (8007fcc <TIM_OC6_SetConfig+0xc4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d003      	beq.n	8007f80 <TIM_OC6_SetConfig+0x78>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a15      	ldr	r2, [pc, #84]	@ (8007fd0 <TIM_OC6_SetConfig+0xc8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d109      	bne.n	8007f94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	029b      	lsls	r3, r3, #10
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	feff8fff 	.word	0xfeff8fff
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40010400 	.word	0x40010400
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40014400 	.word	0x40014400
 8007fd0:	40014800 	.word	0x40014800

08007fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 030a 	bic.w	r3, r3, #10
 8008010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008032:	b480      	push	{r7}
 8008034:	b087      	sub	sp, #28
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f023 0210 	bic.w	r2, r3, #16
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800805c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	031b      	lsls	r3, r3, #12
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800806e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	621a      	str	r2, [r3, #32]
}
 8008086:	bf00      	nop
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4b09      	ldr	r3, [pc, #36]	@ (80080cc <TIM_ITRx_SetConfig+0x38>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f043 0307 	orr.w	r3, r3, #7
 80080b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	609a      	str	r2, [r3, #8]
}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	ffcfff8f 	.word	0xffcfff8f

080080d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	021a      	lsls	r2, r3, #8
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	2201      	movs	r2, #1
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1a      	ldr	r2, [r3, #32]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	43db      	mvns	r3, r3
 8008132:	401a      	ands	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1a      	ldr	r2, [r3, #32]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 031f 	and.w	r3, r3, #31
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	fa01 f303 	lsl.w	r3, r1, r3
 8008148:	431a      	orrs	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	621a      	str	r2, [r3, #32]
}
 800814e:	bf00      	nop
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008170:	2302      	movs	r3, #2
 8008172:	e06d      	b.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a30      	ldr	r2, [pc, #192]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a2f      	ldr	r2, [pc, #188]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d108      	bne.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a20      	ldr	r2, [pc, #128]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d022      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e6:	d01d      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d018      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1a      	ldr	r2, [pc, #104]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a15      	ldr	r2, [pc, #84]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a16      	ldr	r2, [pc, #88]	@ (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a15      	ldr	r2, [pc, #84]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d10c      	bne.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	4313      	orrs	r3, r2
 8008234:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	40010000 	.word	0x40010000
 8008260:	40010400 	.word	0x40010400
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40001800 	.word	0x40001800
 8008274:	40014000 	.word	0x40014000

08008278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e042      	b.n	800834c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7f9 fd4d 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2224      	movs	r2, #36	@ 0x24
 80082e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0201 	bic.w	r2, r2, #1
 80082f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fe80 	bl	8009004 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f915 	bl	8008534 <UART_SetConfig>
 800830a:	4603      	mov	r3, r0
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e01b      	b.n	800834c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 feff 	bl	8009148 <UART_CheckIdleState>
 800834a:	4603      	mov	r3, r0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	@ 0x28
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	4613      	mov	r3, r2
 8008362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836a:	2b20      	cmp	r3, #32
 800836c:	d17b      	bne.n	8008466 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <HAL_UART_Transmit+0x26>
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e074      	b.n	8008468 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2221      	movs	r2, #33	@ 0x21
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800838e:	f7f9 fe0d 	bl	8001fac <HAL_GetTick>
 8008392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	88fa      	ldrh	r2, [r7, #6]
 80083a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ac:	d108      	bne.n	80083c0 <HAL_UART_Transmit+0x6c>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	61bb      	str	r3, [r7, #24]
 80083be:	e003      	b.n	80083c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083c8:	e030      	b.n	800842c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	2180      	movs	r1, #128	@ 0x80
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 ff61 	bl	800929c <UART_WaitOnFlagUntilTimeout>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e03d      	b.n	8008468 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10b      	bne.n	800840a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008400:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	3302      	adds	r3, #2
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	e007      	b.n	800841a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	781a      	ldrb	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1c8      	bne.n	80083ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2200      	movs	r2, #0
 8008440:	2140      	movs	r1, #64	@ 0x40
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 ff2a 	bl	800929c <UART_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e006      	b.n	8008468 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	e000      	b.n	8008468 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008466:	2302      	movs	r3, #2
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008484:	2b20      	cmp	r3, #32
 8008486:	d137      	bne.n	80084f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_UART_Receive_IT+0x24>
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e030      	b.n	80084fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a18      	ldr	r2, [pc, #96]	@ (8008504 <HAL_UART_Receive_IT+0x94>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d01f      	beq.n	80084e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	613b      	str	r3, [r7, #16]
   return(result);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	623b      	str	r3, [r7, #32]
 80084d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	69f9      	ldr	r1, [r7, #28]
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084e8:	88fb      	ldrh	r3, [r7, #6]
 80084ea:	461a      	mov	r2, r3
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 ff42 	bl	8009378 <UART_Start_Receive_IT>
 80084f4:	4603      	mov	r3, r0
 80084f6:	e000      	b.n	80084fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084f8:	2302      	movs	r3, #2
  }
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3728      	adds	r7, #40	@ 0x28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	58000c00 	.word	0x58000c00

08008508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008538:	b092      	sub	sp, #72	@ 0x48
 800853a:	af00      	add	r7, sp, #0
 800853c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	431a      	orrs	r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4313      	orrs	r3, r2
 800855a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4bbe      	ldr	r3, [pc, #760]	@ (800885c <UART_SetConfig+0x328>)
 8008564:	4013      	ands	r3, r2
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800856c:	430b      	orrs	r3, r1
 800856e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4ab3      	ldr	r2, [pc, #716]	@ (8008860 <UART_SetConfig+0x32c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d004      	beq.n	80085a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800859c:	4313      	orrs	r3, r2
 800859e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	4baf      	ldr	r3, [pc, #700]	@ (8008864 <UART_SetConfig+0x330>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ba:	f023 010f 	bic.w	r1, r3, #15
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4aa6      	ldr	r2, [pc, #664]	@ (8008868 <UART_SetConfig+0x334>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d177      	bne.n	80086c4 <UART_SetConfig+0x190>
 80085d4:	4ba5      	ldr	r3, [pc, #660]	@ (800886c <UART_SetConfig+0x338>)
 80085d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085dc:	2b28      	cmp	r3, #40	@ 0x28
 80085de:	d86d      	bhi.n	80086bc <UART_SetConfig+0x188>
 80085e0:	a201      	add	r2, pc, #4	@ (adr r2, 80085e8 <UART_SetConfig+0xb4>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	0800868d 	.word	0x0800868d
 80085ec:	080086bd 	.word	0x080086bd
 80085f0:	080086bd 	.word	0x080086bd
 80085f4:	080086bd 	.word	0x080086bd
 80085f8:	080086bd 	.word	0x080086bd
 80085fc:	080086bd 	.word	0x080086bd
 8008600:	080086bd 	.word	0x080086bd
 8008604:	080086bd 	.word	0x080086bd
 8008608:	08008695 	.word	0x08008695
 800860c:	080086bd 	.word	0x080086bd
 8008610:	080086bd 	.word	0x080086bd
 8008614:	080086bd 	.word	0x080086bd
 8008618:	080086bd 	.word	0x080086bd
 800861c:	080086bd 	.word	0x080086bd
 8008620:	080086bd 	.word	0x080086bd
 8008624:	080086bd 	.word	0x080086bd
 8008628:	0800869d 	.word	0x0800869d
 800862c:	080086bd 	.word	0x080086bd
 8008630:	080086bd 	.word	0x080086bd
 8008634:	080086bd 	.word	0x080086bd
 8008638:	080086bd 	.word	0x080086bd
 800863c:	080086bd 	.word	0x080086bd
 8008640:	080086bd 	.word	0x080086bd
 8008644:	080086bd 	.word	0x080086bd
 8008648:	080086a5 	.word	0x080086a5
 800864c:	080086bd 	.word	0x080086bd
 8008650:	080086bd 	.word	0x080086bd
 8008654:	080086bd 	.word	0x080086bd
 8008658:	080086bd 	.word	0x080086bd
 800865c:	080086bd 	.word	0x080086bd
 8008660:	080086bd 	.word	0x080086bd
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086ad 	.word	0x080086ad
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086bd 	.word	0x080086bd
 8008674:	080086bd 	.word	0x080086bd
 8008678:	080086bd 	.word	0x080086bd
 800867c:	080086bd 	.word	0x080086bd
 8008680:	080086bd 	.word	0x080086bd
 8008684:	080086bd 	.word	0x080086bd
 8008688:	080086b5 	.word	0x080086b5
 800868c:	2301      	movs	r3, #1
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e222      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e21e      	b.n	8008ada <UART_SetConfig+0x5a6>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e21a      	b.n	8008ada <UART_SetConfig+0x5a6>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e216      	b.n	8008ada <UART_SetConfig+0x5a6>
 80086ac:	2320      	movs	r3, #32
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e212      	b.n	8008ada <UART_SetConfig+0x5a6>
 80086b4:	2340      	movs	r3, #64	@ 0x40
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e20e      	b.n	8008ada <UART_SetConfig+0x5a6>
 80086bc:	2380      	movs	r3, #128	@ 0x80
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e20a      	b.n	8008ada <UART_SetConfig+0x5a6>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a69      	ldr	r2, [pc, #420]	@ (8008870 <UART_SetConfig+0x33c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d130      	bne.n	8008730 <UART_SetConfig+0x1fc>
 80086ce:	4b67      	ldr	r3, [pc, #412]	@ (800886c <UART_SetConfig+0x338>)
 80086d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d826      	bhi.n	8008728 <UART_SetConfig+0x1f4>
 80086da:	a201      	add	r2, pc, #4	@ (adr r2, 80086e0 <UART_SetConfig+0x1ac>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008709 	.word	0x08008709
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e1ec      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e1e8      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e1e4      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e1e0      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e1dc      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008720:	2340      	movs	r3, #64	@ 0x40
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e1d8      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008728:	2380      	movs	r3, #128	@ 0x80
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e1d4      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a4f      	ldr	r2, [pc, #316]	@ (8008874 <UART_SetConfig+0x340>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d130      	bne.n	800879c <UART_SetConfig+0x268>
 800873a:	4b4c      	ldr	r3, [pc, #304]	@ (800886c <UART_SetConfig+0x338>)
 800873c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	2b05      	cmp	r3, #5
 8008744:	d826      	bhi.n	8008794 <UART_SetConfig+0x260>
 8008746:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <UART_SetConfig+0x218>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008765 	.word	0x08008765
 8008750:	0800876d 	.word	0x0800876d
 8008754:	08008775 	.word	0x08008775
 8008758:	0800877d 	.word	0x0800877d
 800875c:	08008785 	.word	0x08008785
 8008760:	0800878d 	.word	0x0800878d
 8008764:	2300      	movs	r3, #0
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876a:	e1b6      	b.n	8008ada <UART_SetConfig+0x5a6>
 800876c:	2304      	movs	r3, #4
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e1b2      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008774:	2308      	movs	r3, #8
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e1ae      	b.n	8008ada <UART_SetConfig+0x5a6>
 800877c:	2310      	movs	r3, #16
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e1aa      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008784:	2320      	movs	r3, #32
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e1a6      	b.n	8008ada <UART_SetConfig+0x5a6>
 800878c:	2340      	movs	r3, #64	@ 0x40
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e1a2      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008794:	2380      	movs	r3, #128	@ 0x80
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e19e      	b.n	8008ada <UART_SetConfig+0x5a6>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a35      	ldr	r2, [pc, #212]	@ (8008878 <UART_SetConfig+0x344>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d130      	bne.n	8008808 <UART_SetConfig+0x2d4>
 80087a6:	4b31      	ldr	r3, [pc, #196]	@ (800886c <UART_SetConfig+0x338>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d826      	bhi.n	8008800 <UART_SetConfig+0x2cc>
 80087b2:	a201      	add	r2, pc, #4	@ (adr r2, 80087b8 <UART_SetConfig+0x284>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087e1 	.word	0x080087e1
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	080087f1 	.word	0x080087f1
 80087cc:	080087f9 	.word	0x080087f9
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e180      	b.n	8008ada <UART_SetConfig+0x5a6>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e17c      	b.n	8008ada <UART_SetConfig+0x5a6>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e178      	b.n	8008ada <UART_SetConfig+0x5a6>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e174      	b.n	8008ada <UART_SetConfig+0x5a6>
 80087f0:	2320      	movs	r3, #32
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e170      	b.n	8008ada <UART_SetConfig+0x5a6>
 80087f8:	2340      	movs	r3, #64	@ 0x40
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e16c      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008800:	2380      	movs	r3, #128	@ 0x80
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e168      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1b      	ldr	r2, [pc, #108]	@ (800887c <UART_SetConfig+0x348>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d142      	bne.n	8008898 <UART_SetConfig+0x364>
 8008812:	4b16      	ldr	r3, [pc, #88]	@ (800886c <UART_SetConfig+0x338>)
 8008814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b05      	cmp	r3, #5
 800881c:	d838      	bhi.n	8008890 <UART_SetConfig+0x35c>
 800881e:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <UART_SetConfig+0x2f0>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800884d 	.word	0x0800884d
 8008830:	08008855 	.word	0x08008855
 8008834:	08008881 	.word	0x08008881
 8008838:	08008889 	.word	0x08008889
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e14a      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e146      	b.n	8008ada <UART_SetConfig+0x5a6>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e142      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e13e      	b.n	8008ada <UART_SetConfig+0x5a6>
 800885c:	cfff69f3 	.word	0xcfff69f3
 8008860:	58000c00 	.word	0x58000c00
 8008864:	11fff4ff 	.word	0x11fff4ff
 8008868:	40011000 	.word	0x40011000
 800886c:	58024400 	.word	0x58024400
 8008870:	40004400 	.word	0x40004400
 8008874:	40004800 	.word	0x40004800
 8008878:	40004c00 	.word	0x40004c00
 800887c:	40005000 	.word	0x40005000
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e128      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008888:	2340      	movs	r3, #64	@ 0x40
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e124      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008890:	2380      	movs	r3, #128	@ 0x80
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e120      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4acb      	ldr	r2, [pc, #812]	@ (8008bcc <UART_SetConfig+0x698>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d176      	bne.n	8008990 <UART_SetConfig+0x45c>
 80088a2:	4bcb      	ldr	r3, [pc, #812]	@ (8008bd0 <UART_SetConfig+0x69c>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088aa:	2b28      	cmp	r3, #40	@ 0x28
 80088ac:	d86c      	bhi.n	8008988 <UART_SetConfig+0x454>
 80088ae:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <UART_SetConfig+0x380>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008989 	.word	0x08008989
 80088bc:	08008989 	.word	0x08008989
 80088c0:	08008989 	.word	0x08008989
 80088c4:	08008989 	.word	0x08008989
 80088c8:	08008989 	.word	0x08008989
 80088cc:	08008989 	.word	0x08008989
 80088d0:	08008989 	.word	0x08008989
 80088d4:	08008961 	.word	0x08008961
 80088d8:	08008989 	.word	0x08008989
 80088dc:	08008989 	.word	0x08008989
 80088e0:	08008989 	.word	0x08008989
 80088e4:	08008989 	.word	0x08008989
 80088e8:	08008989 	.word	0x08008989
 80088ec:	08008989 	.word	0x08008989
 80088f0:	08008989 	.word	0x08008989
 80088f4:	08008969 	.word	0x08008969
 80088f8:	08008989 	.word	0x08008989
 80088fc:	08008989 	.word	0x08008989
 8008900:	08008989 	.word	0x08008989
 8008904:	08008989 	.word	0x08008989
 8008908:	08008989 	.word	0x08008989
 800890c:	08008989 	.word	0x08008989
 8008910:	08008989 	.word	0x08008989
 8008914:	08008971 	.word	0x08008971
 8008918:	08008989 	.word	0x08008989
 800891c:	08008989 	.word	0x08008989
 8008920:	08008989 	.word	0x08008989
 8008924:	08008989 	.word	0x08008989
 8008928:	08008989 	.word	0x08008989
 800892c:	08008989 	.word	0x08008989
 8008930:	08008989 	.word	0x08008989
 8008934:	08008979 	.word	0x08008979
 8008938:	08008989 	.word	0x08008989
 800893c:	08008989 	.word	0x08008989
 8008940:	08008989 	.word	0x08008989
 8008944:	08008989 	.word	0x08008989
 8008948:	08008989 	.word	0x08008989
 800894c:	08008989 	.word	0x08008989
 8008950:	08008989 	.word	0x08008989
 8008954:	08008981 	.word	0x08008981
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e0bc      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e0b8      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e0b4      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e0b0      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008978:	2320      	movs	r3, #32
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e0ac      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008980:	2340      	movs	r3, #64	@ 0x40
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e0a8      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008988:	2380      	movs	r3, #128	@ 0x80
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e0a4      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a8f      	ldr	r2, [pc, #572]	@ (8008bd4 <UART_SetConfig+0x6a0>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d130      	bne.n	80089fc <UART_SetConfig+0x4c8>
 800899a:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd0 <UART_SetConfig+0x69c>)
 800899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d826      	bhi.n	80089f4 <UART_SetConfig+0x4c0>
 80089a6:	a201      	add	r2, pc, #4	@ (adr r2, 80089ac <UART_SetConfig+0x478>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089d5 	.word	0x080089d5
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e086      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089cc:	2304      	movs	r3, #4
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e082      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089d4:	2308      	movs	r3, #8
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e07e      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089dc:	2310      	movs	r3, #16
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e07a      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089e4:	2320      	movs	r3, #32
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e076      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089ec:	2340      	movs	r3, #64	@ 0x40
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e072      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089f4:	2380      	movs	r3, #128	@ 0x80
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e06e      	b.n	8008ada <UART_SetConfig+0x5a6>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a75      	ldr	r2, [pc, #468]	@ (8008bd8 <UART_SetConfig+0x6a4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d130      	bne.n	8008a68 <UART_SetConfig+0x534>
 8008a06:	4b72      	ldr	r3, [pc, #456]	@ (8008bd0 <UART_SetConfig+0x69c>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d826      	bhi.n	8008a60 <UART_SetConfig+0x52c>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <UART_SetConfig+0x4e4>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a31 	.word	0x08008a31
 8008a1c:	08008a39 	.word	0x08008a39
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e050      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e04c      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a40:	2308      	movs	r3, #8
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e048      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e044      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a50:	2320      	movs	r3, #32
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e040      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a58:	2340      	movs	r3, #64	@ 0x40
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e03c      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a60:	2380      	movs	r3, #128	@ 0x80
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e038      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a5b      	ldr	r2, [pc, #364]	@ (8008bdc <UART_SetConfig+0x6a8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d130      	bne.n	8008ad4 <UART_SetConfig+0x5a0>
 8008a72:	4b57      	ldr	r3, [pc, #348]	@ (8008bd0 <UART_SetConfig+0x69c>)
 8008a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d826      	bhi.n	8008acc <UART_SetConfig+0x598>
 8008a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <UART_SetConfig+0x550>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008aa5 	.word	0x08008aa5
 8008a8c:	08008aad 	.word	0x08008aad
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008abd 	.word	0x08008abd
 8008a98:	08008ac5 	.word	0x08008ac5
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa2:	e01a      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e016      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008aac:	2308      	movs	r3, #8
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e012      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e00e      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008abc:	2320      	movs	r3, #32
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e00a      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008ac4:	2340      	movs	r3, #64	@ 0x40
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e006      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008acc:	2380      	movs	r3, #128	@ 0x80
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e002      	b.n	8008ada <UART_SetConfig+0x5a6>
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a3f      	ldr	r2, [pc, #252]	@ (8008bdc <UART_SetConfig+0x6a8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	f040 80f8 	bne.w	8008cd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ae6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	dc46      	bgt.n	8008b7c <UART_SetConfig+0x648>
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	f2c0 8082 	blt.w	8008bf8 <UART_SetConfig+0x6c4>
 8008af4:	3b02      	subs	r3, #2
 8008af6:	2b1e      	cmp	r3, #30
 8008af8:	d87e      	bhi.n	8008bf8 <UART_SetConfig+0x6c4>
 8008afa:	a201      	add	r2, pc, #4	@ (adr r2, 8008b00 <UART_SetConfig+0x5cc>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b83 	.word	0x08008b83
 8008b04:	08008bf9 	.word	0x08008bf9
 8008b08:	08008b8b 	.word	0x08008b8b
 8008b0c:	08008bf9 	.word	0x08008bf9
 8008b10:	08008bf9 	.word	0x08008bf9
 8008b14:	08008bf9 	.word	0x08008bf9
 8008b18:	08008b9b 	.word	0x08008b9b
 8008b1c:	08008bf9 	.word	0x08008bf9
 8008b20:	08008bf9 	.word	0x08008bf9
 8008b24:	08008bf9 	.word	0x08008bf9
 8008b28:	08008bf9 	.word	0x08008bf9
 8008b2c:	08008bf9 	.word	0x08008bf9
 8008b30:	08008bf9 	.word	0x08008bf9
 8008b34:	08008bf9 	.word	0x08008bf9
 8008b38:	08008bab 	.word	0x08008bab
 8008b3c:	08008bf9 	.word	0x08008bf9
 8008b40:	08008bf9 	.word	0x08008bf9
 8008b44:	08008bf9 	.word	0x08008bf9
 8008b48:	08008bf9 	.word	0x08008bf9
 8008b4c:	08008bf9 	.word	0x08008bf9
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008bf9 	.word	0x08008bf9
 8008b58:	08008bf9 	.word	0x08008bf9
 8008b5c:	08008bf9 	.word	0x08008bf9
 8008b60:	08008bf9 	.word	0x08008bf9
 8008b64:	08008bf9 	.word	0x08008bf9
 8008b68:	08008bf9 	.word	0x08008bf9
 8008b6c:	08008bf9 	.word	0x08008bf9
 8008b70:	08008bf9 	.word	0x08008bf9
 8008b74:	08008bf9 	.word	0x08008bf9
 8008b78:	08008beb 	.word	0x08008beb
 8008b7c:	2b40      	cmp	r3, #64	@ 0x40
 8008b7e:	d037      	beq.n	8008bf0 <UART_SetConfig+0x6bc>
 8008b80:	e03a      	b.n	8008bf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b82:	f7fc ff0f 	bl	80059a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b88:	e03c      	b.n	8008c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fc ff1e 	bl	80059d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b98:	e034      	b.n	8008c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9a:	f107 0318 	add.w	r3, r7, #24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fd f86a 	bl	8005c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba8:	e02c      	b.n	8008c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008baa:	4b09      	ldr	r3, [pc, #36]	@ (8008bd0 <UART_SetConfig+0x69c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d016      	beq.n	8008be4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bb6:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <UART_SetConfig+0x69c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	08db      	lsrs	r3, r3, #3
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	4a07      	ldr	r2, [pc, #28]	@ (8008be0 <UART_SetConfig+0x6ac>)
 8008bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bc8:	e01c      	b.n	8008c04 <UART_SetConfig+0x6d0>
 8008bca:	bf00      	nop
 8008bcc:	40011400 	.word	0x40011400
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	40007800 	.word	0x40007800
 8008bd8:	40007c00 	.word	0x40007c00
 8008bdc:	58000c00 	.word	0x58000c00
 8008be0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008be4:	4b9d      	ldr	r3, [pc, #628]	@ (8008e5c <UART_SetConfig+0x928>)
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be8:	e00c      	b.n	8008c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bea:	4b9d      	ldr	r3, [pc, #628]	@ (8008e60 <UART_SetConfig+0x92c>)
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bee:	e009      	b.n	8008c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf6:	e005      	b.n	8008c04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 81de 	beq.w	8008fc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	4a94      	ldr	r2, [pc, #592]	@ (8008e64 <UART_SetConfig+0x930>)
 8008c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	4613      	mov	r3, r2
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	4413      	add	r3, r2
 8008c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d305      	bcc.n	8008c3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d903      	bls.n	8008c44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c42:	e1c1      	b.n	8008fc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c46:	2200      	movs	r2, #0
 8008c48:	60bb      	str	r3, [r7, #8]
 8008c4a:	60fa      	str	r2, [r7, #12]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	4a84      	ldr	r2, [pc, #528]	@ (8008e64 <UART_SetConfig+0x930>)
 8008c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	2200      	movs	r2, #0
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c66:	f7f7 fb93 	bl	8000390 <__aeabi_uldivmod>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4619      	mov	r1, r3
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	f04f 0300 	mov.w	r3, #0
 8008c7a:	020b      	lsls	r3, r1, #8
 8008c7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c80:	0202      	lsls	r2, r0, #8
 8008c82:	6979      	ldr	r1, [r7, #20]
 8008c84:	6849      	ldr	r1, [r1, #4]
 8008c86:	0849      	lsrs	r1, r1, #1
 8008c88:	2000      	movs	r0, #0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	eb12 0804 	adds.w	r8, r2, r4
 8008c92:	eb43 0905 	adc.w	r9, r3, r5
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	469a      	mov	sl, r3
 8008c9e:	4693      	mov	fp, r2
 8008ca0:	4652      	mov	r2, sl
 8008ca2:	465b      	mov	r3, fp
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 fb72 	bl	8000390 <__aeabi_uldivmod>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cba:	d308      	bcc.n	8008cce <UART_SetConfig+0x79a>
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cc2:	d204      	bcs.n	8008cce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cca:	60da      	str	r2, [r3, #12]
 8008ccc:	e17c      	b.n	8008fc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cd4:	e178      	b.n	8008fc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cde:	f040 80c5 	bne.w	8008e6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008ce2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	dc48      	bgt.n	8008d7c <UART_SetConfig+0x848>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	db7b      	blt.n	8008de6 <UART_SetConfig+0x8b2>
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	d879      	bhi.n	8008de6 <UART_SetConfig+0x8b2>
 8008cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf8 <UART_SetConfig+0x7c4>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d83 	.word	0x08008d83
 8008cfc:	08008d8b 	.word	0x08008d8b
 8008d00:	08008de7 	.word	0x08008de7
 8008d04:	08008de7 	.word	0x08008de7
 8008d08:	08008d93 	.word	0x08008d93
 8008d0c:	08008de7 	.word	0x08008de7
 8008d10:	08008de7 	.word	0x08008de7
 8008d14:	08008de7 	.word	0x08008de7
 8008d18:	08008da3 	.word	0x08008da3
 8008d1c:	08008de7 	.word	0x08008de7
 8008d20:	08008de7 	.word	0x08008de7
 8008d24:	08008de7 	.word	0x08008de7
 8008d28:	08008de7 	.word	0x08008de7
 8008d2c:	08008de7 	.word	0x08008de7
 8008d30:	08008de7 	.word	0x08008de7
 8008d34:	08008de7 	.word	0x08008de7
 8008d38:	08008db3 	.word	0x08008db3
 8008d3c:	08008de7 	.word	0x08008de7
 8008d40:	08008de7 	.word	0x08008de7
 8008d44:	08008de7 	.word	0x08008de7
 8008d48:	08008de7 	.word	0x08008de7
 8008d4c:	08008de7 	.word	0x08008de7
 8008d50:	08008de7 	.word	0x08008de7
 8008d54:	08008de7 	.word	0x08008de7
 8008d58:	08008de7 	.word	0x08008de7
 8008d5c:	08008de7 	.word	0x08008de7
 8008d60:	08008de7 	.word	0x08008de7
 8008d64:	08008de7 	.word	0x08008de7
 8008d68:	08008de7 	.word	0x08008de7
 8008d6c:	08008de7 	.word	0x08008de7
 8008d70:	08008de7 	.word	0x08008de7
 8008d74:	08008de7 	.word	0x08008de7
 8008d78:	08008dd9 	.word	0x08008dd9
 8008d7c:	2b40      	cmp	r3, #64	@ 0x40
 8008d7e:	d02e      	beq.n	8008dde <UART_SetConfig+0x8aa>
 8008d80:	e031      	b.n	8008de6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d82:	f7fb fbd9 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8008d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d88:	e033      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d8a:	f7fb fbeb 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8008d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d90:	e02f      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fc fe1a 	bl	80059d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da0:	e027      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da2:	f107 0318 	add.w	r3, r7, #24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fc ff66 	bl	8005c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db0:	e01f      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db2:	4b2d      	ldr	r3, [pc, #180]	@ (8008e68 <UART_SetConfig+0x934>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8008e68 <UART_SetConfig+0x934>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	08db      	lsrs	r3, r3, #3
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	4a24      	ldr	r2, [pc, #144]	@ (8008e5c <UART_SetConfig+0x928>)
 8008dca:	fa22 f303 	lsr.w	r3, r2, r3
 8008dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dd0:	e00f      	b.n	8008df2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008dd2:	4b22      	ldr	r3, [pc, #136]	@ (8008e5c <UART_SetConfig+0x928>)
 8008dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd6:	e00c      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dd8:	4b21      	ldr	r3, [pc, #132]	@ (8008e60 <UART_SetConfig+0x92c>)
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ddc:	e009      	b.n	8008df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de4:	e005      	b.n	8008df2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80e7 	beq.w	8008fc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	4a19      	ldr	r2, [pc, #100]	@ (8008e64 <UART_SetConfig+0x930>)
 8008e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0c:	005a      	lsls	r2, r3, #1
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	441a      	add	r2, r3
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e22:	2b0f      	cmp	r3, #15
 8008e24:	d916      	bls.n	8008e54 <UART_SetConfig+0x920>
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e2c:	d212      	bcs.n	8008e54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f023 030f 	bic.w	r3, r3, #15
 8008e36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e46:	4313      	orrs	r3, r2
 8008e48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	e0b9      	b.n	8008fc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e5a:	e0b5      	b.n	8008fc8 <UART_SetConfig+0xa94>
 8008e5c:	03d09000 	.word	0x03d09000
 8008e60:	003d0900 	.word	0x003d0900
 8008e64:	0800b3c4 	.word	0x0800b3c4
 8008e68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	dc49      	bgt.n	8008f08 <UART_SetConfig+0x9d4>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db7c      	blt.n	8008f72 <UART_SetConfig+0xa3e>
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d87a      	bhi.n	8008f72 <UART_SetConfig+0xa3e>
 8008e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <UART_SetConfig+0x950>)
 8008e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e82:	bf00      	nop
 8008e84:	08008f0f 	.word	0x08008f0f
 8008e88:	08008f17 	.word	0x08008f17
 8008e8c:	08008f73 	.word	0x08008f73
 8008e90:	08008f73 	.word	0x08008f73
 8008e94:	08008f1f 	.word	0x08008f1f
 8008e98:	08008f73 	.word	0x08008f73
 8008e9c:	08008f73 	.word	0x08008f73
 8008ea0:	08008f73 	.word	0x08008f73
 8008ea4:	08008f2f 	.word	0x08008f2f
 8008ea8:	08008f73 	.word	0x08008f73
 8008eac:	08008f73 	.word	0x08008f73
 8008eb0:	08008f73 	.word	0x08008f73
 8008eb4:	08008f73 	.word	0x08008f73
 8008eb8:	08008f73 	.word	0x08008f73
 8008ebc:	08008f73 	.word	0x08008f73
 8008ec0:	08008f73 	.word	0x08008f73
 8008ec4:	08008f3f 	.word	0x08008f3f
 8008ec8:	08008f73 	.word	0x08008f73
 8008ecc:	08008f73 	.word	0x08008f73
 8008ed0:	08008f73 	.word	0x08008f73
 8008ed4:	08008f73 	.word	0x08008f73
 8008ed8:	08008f73 	.word	0x08008f73
 8008edc:	08008f73 	.word	0x08008f73
 8008ee0:	08008f73 	.word	0x08008f73
 8008ee4:	08008f73 	.word	0x08008f73
 8008ee8:	08008f73 	.word	0x08008f73
 8008eec:	08008f73 	.word	0x08008f73
 8008ef0:	08008f73 	.word	0x08008f73
 8008ef4:	08008f73 	.word	0x08008f73
 8008ef8:	08008f73 	.word	0x08008f73
 8008efc:	08008f73 	.word	0x08008f73
 8008f00:	08008f73 	.word	0x08008f73
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	2b40      	cmp	r3, #64	@ 0x40
 8008f0a:	d02e      	beq.n	8008f6a <UART_SetConfig+0xa36>
 8008f0c:	e031      	b.n	8008f72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f0e:	f7fb fb13 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8008f12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f14:	e033      	b.n	8008f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f16:	f7fb fb25 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8008f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e02f      	b.n	8008f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fc fd54 	bl	80059d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2c:	e027      	b.n	8008f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fc fea0 	bl	8005c78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3c:	e01f      	b.n	8008f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ff4 <UART_SetConfig+0xac0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d009      	beq.n	8008f5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ff4 <UART_SetConfig+0xac0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	08db      	lsrs	r3, r3, #3
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	4a28      	ldr	r2, [pc, #160]	@ (8008ff8 <UART_SetConfig+0xac4>)
 8008f56:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f5c:	e00f      	b.n	8008f7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008f5e:	4b26      	ldr	r3, [pc, #152]	@ (8008ff8 <UART_SetConfig+0xac4>)
 8008f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f62:	e00c      	b.n	8008f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f64:	4b25      	ldr	r3, [pc, #148]	@ (8008ffc <UART_SetConfig+0xac8>)
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f68:	e009      	b.n	8008f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e005      	b.n	8008f7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d021      	beq.n	8008fc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f88:	4a1d      	ldr	r2, [pc, #116]	@ (8009000 <UART_SetConfig+0xacc>)
 8008f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f92:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	085b      	lsrs	r3, r3, #1
 8008f9c:	441a      	add	r2, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	2b0f      	cmp	r3, #15
 8008fac:	d909      	bls.n	8008fc2 <UART_SetConfig+0xa8e>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fb4:	d205      	bcs.n	8008fc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60da      	str	r2, [r3, #12]
 8008fc0:	e002      	b.n	8008fc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fe4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3748      	adds	r7, #72	@ 0x48
 8008fec:	46bd      	mov	sp, r7
 8008fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ff2:	bf00      	nop
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
 8008ffc:	003d0900 	.word	0x003d0900
 8009000:	0800b3c4 	.word	0x0800b3c4

08009004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	430a      	orrs	r2, r1
 80090b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01a      	beq.n	800911a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009102:	d10a      	bne.n	800911a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800911e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00a      	beq.n	800913c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	605a      	str	r2, [r3, #4]
  }
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b098      	sub	sp, #96	@ 0x60
 800914c:	af02      	add	r7, sp, #8
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009158:	f7f8 ff28 	bl	8001fac <HAL_GetTick>
 800915c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b08      	cmp	r3, #8
 800916a:	d12f      	bne.n	80091cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800916c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009174:	2200      	movs	r2, #0
 8009176:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f88e 	bl	800929c <UART_WaitOnFlagUntilTimeout>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d022      	beq.n	80091cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800919a:	653b      	str	r3, [r7, #80]	@ 0x50
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e063      	b.n	8009294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d149      	bne.n	800926e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091e2:	2200      	movs	r2, #0
 80091e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f857 	bl	800929c <UART_WaitOnFlagUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d03c      	beq.n	800926e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	623b      	str	r3, [r7, #32]
   return(result);
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009212:	633b      	str	r3, [r7, #48]	@ 0x30
 8009214:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e6      	bne.n	80091f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	60fb      	str	r3, [r7, #12]
   return(result);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009246:	61fa      	str	r2, [r7, #28]
 8009248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	69b9      	ldr	r1, [r7, #24]
 800924c:	69fa      	ldr	r2, [r7, #28]
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	617b      	str	r3, [r7, #20]
   return(result);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e5      	bne.n	8009226 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e012      	b.n	8009294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3758      	adds	r7, #88	@ 0x58
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	4613      	mov	r3, r2
 80092aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ac:	e04f      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b4:	d04b      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b6:	f7f8 fe79 	bl	8001fac <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d302      	bcc.n	80092cc <UART_WaitOnFlagUntilTimeout+0x30>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e04e      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0304 	and.w	r3, r3, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d037      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb2>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2b80      	cmp	r3, #128	@ 0x80
 80092e2:	d034      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb2>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b40      	cmp	r3, #64	@ 0x40
 80092e8:	d031      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	f003 0308 	and.w	r3, r3, #8
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d110      	bne.n	800931a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2208      	movs	r2, #8
 80092fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f95b 	bl	80095bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2208      	movs	r2, #8
 800930a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e029      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009328:	d111      	bne.n	800934e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 f941 	bl	80095bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2220      	movs	r2, #32
 800933e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e00f      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	bf0c      	ite	eq
 800935e:	2301      	moveq	r3, #1
 8009360:	2300      	movne	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	429a      	cmp	r2, r3
 800936a:	d0a0      	beq.n	80092ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009378:	b480      	push	{r7}
 800937a:	b0a3      	sub	sp, #140	@ 0x8c
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	88fa      	ldrh	r2, [r7, #6]
 8009390:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093aa:	d10e      	bne.n	80093ca <UART_Start_Receive_IT+0x52>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <UART_Start_Receive_IT+0x48>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80093ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093be:	e02d      	b.n	800941c <UART_Start_Receive_IT+0xa4>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	22ff      	movs	r2, #255	@ 0xff
 80093c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093c8:	e028      	b.n	800941c <UART_Start_Receive_IT+0xa4>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10d      	bne.n	80093ee <UART_Start_Receive_IT+0x76>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d104      	bne.n	80093e4 <UART_Start_Receive_IT+0x6c>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	22ff      	movs	r2, #255	@ 0xff
 80093de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093e2:	e01b      	b.n	800941c <UART_Start_Receive_IT+0xa4>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	227f      	movs	r2, #127	@ 0x7f
 80093e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093ec:	e016      	b.n	800941c <UART_Start_Receive_IT+0xa4>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093f6:	d10d      	bne.n	8009414 <UART_Start_Receive_IT+0x9c>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d104      	bne.n	800940a <UART_Start_Receive_IT+0x92>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	227f      	movs	r2, #127	@ 0x7f
 8009404:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009408:	e008      	b.n	800941c <UART_Start_Receive_IT+0xa4>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	223f      	movs	r2, #63	@ 0x3f
 800940e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009412:	e003      	b.n	800941c <UART_Start_Receive_IT+0xa4>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2222      	movs	r2, #34	@ 0x22
 8009428:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800943c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009450:	673a      	str	r2, [r7, #112]	@ 0x70
 8009452:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009456:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800945e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e3      	bne.n	800942c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800946c:	d14f      	bne.n	800950e <UART_Start_Receive_IT+0x196>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	429a      	cmp	r2, r3
 8009478:	d349      	bcc.n	800950e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009482:	d107      	bne.n	8009494 <UART_Start_Receive_IT+0x11c>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a47      	ldr	r2, [pc, #284]	@ (80095ac <UART_Start_Receive_IT+0x234>)
 8009490:	675a      	str	r2, [r3, #116]	@ 0x74
 8009492:	e002      	b.n	800949a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a46      	ldr	r2, [pc, #280]	@ (80095b0 <UART_Start_Receive_IT+0x238>)
 8009498:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01a      	beq.n	80094d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80094b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80094ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80094d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e4      	bne.n	80094a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80094f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80094fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e5      	bne.n	80094d8 <UART_Start_Receive_IT+0x160>
 800950c:	e046      	b.n	800959c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009516:	d107      	bne.n	8009528 <UART_Start_Receive_IT+0x1b0>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d103      	bne.n	8009528 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a24      	ldr	r2, [pc, #144]	@ (80095b4 <UART_Start_Receive_IT+0x23c>)
 8009524:	675a      	str	r2, [r3, #116]	@ 0x74
 8009526:	e002      	b.n	800952e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a23      	ldr	r2, [pc, #140]	@ (80095b8 <UART_Start_Receive_IT+0x240>)
 800952c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d019      	beq.n	800956a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800954a:	677b      	str	r3, [r7, #116]	@ 0x74
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
 8009556:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800955a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e6      	bne.n	8009536 <UART_Start_Receive_IT+0x1be>
 8009568:	e018      	b.n	800959c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f043 0320 	orr.w	r3, r3, #32
 800957e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009588:	623b      	str	r3, [r7, #32]
 800958a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	69f9      	ldr	r1, [r7, #28]
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	61bb      	str	r3, [r7, #24]
   return(result);
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e6      	bne.n	800956a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	378c      	adds	r7, #140	@ 0x8c
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	08009d59 	.word	0x08009d59
 80095b0:	080099f9 	.word	0x080099f9
 80095b4:	08009841 	.word	0x08009841
 80095b8:	08009689 	.word	0x08009689

080095bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b095      	sub	sp, #84	@ 0x54
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80095e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e6      	bne.n	80095c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3308      	adds	r3, #8
 80095fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	61fb      	str	r3, [r7, #28]
   return(result);
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	4b1e      	ldr	r3, [pc, #120]	@ (8009684 <UART_EndRxTransfer+0xc8>)
 800960a:	4013      	ands	r3, r2
 800960c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009618:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800961c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e5      	bne.n	80095f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800962e:	2b01      	cmp	r3, #1
 8009630:	d118      	bne.n	8009664 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f023 0310 	bic.w	r3, r3, #16
 8009646:	647b      	str	r3, [r7, #68]	@ 0x44
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009650:	61bb      	str	r3, [r7, #24]
 8009652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6979      	ldr	r1, [r7, #20]
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	613b      	str	r3, [r7, #16]
   return(result);
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e6      	bne.n	8009632 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2220      	movs	r2, #32
 8009668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009678:	bf00      	nop
 800967a:	3754      	adds	r7, #84	@ 0x54
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	effffffe 	.word	0xeffffffe

08009688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b09c      	sub	sp, #112	@ 0x70
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009696:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096a0:	2b22      	cmp	r3, #34	@ 0x22
 80096a2:	f040 80be 	bne.w	8009822 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80096b4:	b2d9      	uxtb	r1, r3
 80096b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c0:	400a      	ands	r2, r1
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 80a1 	bne.w	8009832 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800970e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009710:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800971c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e6      	bne.n	80096f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	667b      	str	r3, [r7, #100]	@ 0x64
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009742:	647a      	str	r2, [r7, #68]	@ 0x44
 8009744:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e5      	bne.n	8009722 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a33      	ldr	r2, [pc, #204]	@ (800983c <UART_RxISR_8BIT+0x1b4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d01f      	beq.n	80097b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d018      	beq.n	80097b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	623b      	str	r3, [r7, #32]
   return(result);
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009796:	663b      	str	r3, [r7, #96]	@ 0x60
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80097a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e6      	bne.n	8009782 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d12e      	bne.n	800981a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 0310 	bic.w	r3, r3, #16
 80097d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e0:	61fb      	str	r3, [r7, #28]
 80097e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	69b9      	ldr	r1, [r7, #24]
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	617b      	str	r3, [r7, #20]
   return(result);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	f003 0310 	and.w	r3, r3, #16
 80097fe:	2b10      	cmp	r3, #16
 8009800:	d103      	bne.n	800980a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2210      	movs	r2, #16
 8009808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fe fe82 	bl	800851c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009818:	e00b      	b.n	8009832 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7f8 fa40 	bl	8001ca0 <HAL_UART_RxCpltCallback>
}
 8009820:	e007      	b.n	8009832 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	619a      	str	r2, [r3, #24]
}
 8009832:	bf00      	nop
 8009834:	3770      	adds	r7, #112	@ 0x70
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	58000c00 	.word	0x58000c00

08009840 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b09c      	sub	sp, #112	@ 0x70
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800984e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009858:	2b22      	cmp	r3, #34	@ 0x22
 800985a:	f040 80be 	bne.w	80099da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009864:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800986c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800986e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009872:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009876:	4013      	ands	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800987c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009882:	1c9a      	adds	r2, r3, #2
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800988e:	b29b      	uxth	r3, r3
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 80a1 	bne.w	80099ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80098c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e6      	bne.n	80098a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80098fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e5      	bne.n	80098da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a33      	ldr	r2, [pc, #204]	@ (80099f4 <UART_RxISR_16BIT+0x1b4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d01f      	beq.n	800996c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	61fb      	str	r3, [r7, #28]
   return(result);
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800994e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800995a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800995e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e6      	bne.n	800993a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d12e      	bne.n	80099d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	60bb      	str	r3, [r7, #8]
   return(result);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f023 0310 	bic.w	r3, r3, #16
 800998e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009998:	61bb      	str	r3, [r7, #24]
 800999a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6979      	ldr	r1, [r7, #20]
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	613b      	str	r3, [r7, #16]
   return(result);
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	f003 0310 	and.w	r3, r3, #16
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d103      	bne.n	80099c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2210      	movs	r2, #16
 80099c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe fda6 	bl	800851c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099d0:	e00b      	b.n	80099ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7f8 f964 	bl	8001ca0 <HAL_UART_RxCpltCallback>
}
 80099d8:	e007      	b.n	80099ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0208 	orr.w	r2, r2, #8
 80099e8:	619a      	str	r2, [r3, #24]
}
 80099ea:	bf00      	nop
 80099ec:	3770      	adds	r7, #112	@ 0x70
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	58000c00 	.word	0x58000c00

080099f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b0ac      	sub	sp, #176	@ 0xb0
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a06:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a2e:	2b22      	cmp	r3, #34	@ 0x22
 8009a30:	f040 8180 	bne.w	8009d34 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a3a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a3e:	e123      	b.n	8009c88 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a46:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009a4e:	b2d9      	uxtb	r1, r3
 8009a50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5a:	400a      	ands	r2, r1
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d053      	beq.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d011      	beq.n	8009ac2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00b      	beq.n	8009ac2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab8:	f043 0201 	orr.w	r2, r3, #1
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d011      	beq.n	8009af2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae8:	f043 0204 	orr.w	r2, r3, #4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009af6:	f003 0304 	and.w	r3, r3, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d011      	beq.n	8009b22 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b18:	f043 0202 	orr.w	r2, r3, #2
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d006      	beq.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fe fceb 	bl	8008508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 80a0 	bne.w	8009c88 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b6c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009b70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e4      	bne.n	8009b48 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009b8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b90:	4b6e      	ldr	r3, [pc, #440]	@ (8009d4c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ba2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009ba4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009ba8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e3      	bne.n	8009b7e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a60      	ldr	r2, [pc, #384]	@ (8009d50 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d021      	beq.n	8009c18 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01a      	beq.n	8009c18 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c06:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c0c:	e841 2300 	strex	r3, r2, [r1]
 8009c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1e4      	bne.n	8009be2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d130      	bne.n	8009c82 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f023 0310 	bic.w	r3, r3, #16
 8009c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e4      	bne.n	8009c26 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	f003 0310 	and.w	r3, r3, #16
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d103      	bne.n	8009c72 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2210      	movs	r2, #16
 8009c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe fc4e 	bl	800851c <HAL_UARTEx_RxEventCallback>
 8009c80:	e002      	b.n	8009c88 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7f8 f80c 	bl	8001ca0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c88:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d006      	beq.n	8009c9e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f aed1 	bne.w	8009a40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ca4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ca8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d049      	beq.n	8009d44 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cb6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d242      	bcs.n	8009d44 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ce2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1e3      	bne.n	8009cbe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a16      	ldr	r2, [pc, #88]	@ (8009d54 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009cfa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f043 0320 	orr.w	r3, r3, #32
 8009d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6979      	ldr	r1, [r7, #20]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e4      	bne.n	8009cfc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d32:	e007      	b.n	8009d44 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0208 	orr.w	r2, r2, #8
 8009d42:	619a      	str	r2, [r3, #24]
}
 8009d44:	bf00      	nop
 8009d46:	37b0      	adds	r7, #176	@ 0xb0
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	effffffe 	.word	0xeffffffe
 8009d50:	58000c00 	.word	0x58000c00
 8009d54:	08009689 	.word	0x08009689

08009d58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b0ae      	sub	sp, #184	@ 0xb8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d66:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d8e:	2b22      	cmp	r3, #34	@ 0x22
 8009d90:	f040 8184 	bne.w	800a09c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d9a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d9e:	e127      	b.n	8009ff0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009db2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009db6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009dba:	4013      	ands	r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc8:	1c9a      	adds	r2, r3, #2
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d053      	beq.n	8009e9e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d011      	beq.n	8009e26 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2201      	movs	r2, #1
 8009e14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e1c:	f043 0201 	orr.w	r2, r3, #1
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2202      	movs	r2, #2
 8009e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e4c:	f043 0204 	orr.w	r2, r3, #4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d011      	beq.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2204      	movs	r2, #4
 8009e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e7c:	f043 0202 	orr.w	r2, r3, #2
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7fe fb39 	bl	8008508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f040 80a2 	bne.w	8009ff0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009eb4:	e853 3f00 	ldrex	r3, [r3]
 8009eb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ece:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ed2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e2      	bne.n	8009eac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3308      	adds	r3, #8
 8009eec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ef6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ef8:	4b6e      	ldr	r3, [pc, #440]	@ (800a0b4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009efa:	4013      	ands	r3, r2
 8009efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3308      	adds	r3, #8
 8009f06:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009f0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e3      	bne.n	8009ee6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a60      	ldr	r2, [pc, #384]	@ (800a0b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d021      	beq.n	8009f80 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01a      	beq.n	8009f80 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f74:	e841 2300 	strex	r3, r2, [r1]
 8009f78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e4      	bne.n	8009f4a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d130      	bne.n	8009fea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9e:	f023 0310 	bic.w	r3, r3, #16
 8009fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fb8:	e841 2300 	strex	r3, r2, [r1]
 8009fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e4      	bne.n	8009f8e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b10      	cmp	r3, #16
 8009fd0:	d103      	bne.n	8009fda <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2210      	movs	r2, #16
 8009fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fe fa9a 	bl	800851c <HAL_UARTEx_RxEventCallback>
 8009fe8:	e002      	b.n	8009ff0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7f7 fe58 	bl	8001ca0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ff0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d006      	beq.n	800a006 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ffc:	f003 0320 	and.w	r3, r3, #32
 800a000:	2b00      	cmp	r3, #0
 800a002:	f47f aecd 	bne.w	8009da0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a00c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a010:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a014:	2b00      	cmp	r3, #0
 800a016:	d049      	beq.n	800a0ac <UART_RxISR_16BIT_FIFOEN+0x354>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a01e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a022:	429a      	cmp	r2, r3
 800a024:	d242      	bcs.n	800a0ac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	623b      	str	r3, [r7, #32]
   return(result);
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a03c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3308      	adds	r3, #8
 800a046:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a04a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e3      	bne.n	800a026 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a16      	ldr	r2, [pc, #88]	@ (800a0bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a062:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	60fb      	str	r3, [r7, #12]
   return(result);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f043 0320 	orr.w	r3, r3, #32
 800a078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a086:	61fb      	str	r3, [r7, #28]
 800a088:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	69b9      	ldr	r1, [r7, #24]
 800a08c:	69fa      	ldr	r2, [r7, #28]
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	617b      	str	r3, [r7, #20]
   return(result);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e4      	bne.n	800a064 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a09a:	e007      	b.n	800a0ac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0208 	orr.w	r2, r2, #8
 800a0aa:	619a      	str	r2, [r3, #24]
}
 800a0ac:	bf00      	nop
 800a0ae:	37b8      	adds	r7, #184	@ 0xb8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	effffffe 	.word	0xeffffffe
 800a0b8:	58000c00 	.word	0x58000c00
 800a0bc:	08009841 	.word	0x08009841

0800a0c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e027      	b.n	800a126 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2224      	movs	r2, #36	@ 0x24
 800a0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0201 	bic.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a146:	2302      	movs	r3, #2
 800a148:	e02d      	b.n	800a1a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2224      	movs	r2, #36	@ 0x24
 800a156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0201 	bic.w	r2, r2, #1
 800a170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f850 	bl	800a22c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d101      	bne.n	800a1c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e02d      	b.n	800a222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2224      	movs	r2, #36	@ 0x24
 800a1d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0201 	bic.w	r2, r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f812 	bl	800a22c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d108      	bne.n	800a24e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a24c:	e031      	b.n	800a2b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a24e:	2310      	movs	r3, #16
 800a250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a252:	2310      	movs	r3, #16
 800a254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	0e5b      	lsrs	r3, r3, #25
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	0f5b      	lsrs	r3, r3, #29
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	7b3a      	ldrb	r2, [r7, #12]
 800a27a:	4911      	ldr	r1, [pc, #68]	@ (800a2c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a27c:	5c8a      	ldrb	r2, [r1, r2]
 800a27e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a282:	7b3a      	ldrb	r2, [r7, #12]
 800a284:	490f      	ldr	r1, [pc, #60]	@ (800a2c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a288:	fb93 f3f2 	sdiv	r3, r3, r2
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	7b7a      	ldrb	r2, [r7, #13]
 800a298:	4909      	ldr	r1, [pc, #36]	@ (800a2c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a29a:	5c8a      	ldrb	r2, [r1, r2]
 800a29c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2a0:	7b7a      	ldrb	r2, [r7, #13]
 800a2a2:	4908      	ldr	r1, [pc, #32]	@ (800a2c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a2a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	0800b3dc 	.word	0x0800b3dc
 800a2c4:	0800b3e4 	.word	0x0800b3e4

0800a2c8 <std>:
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	b510      	push	{r4, lr}
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2d6:	6083      	str	r3, [r0, #8]
 800a2d8:	8181      	strh	r1, [r0, #12]
 800a2da:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2dc:	81c2      	strh	r2, [r0, #14]
 800a2de:	6183      	str	r3, [r0, #24]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	2208      	movs	r2, #8
 800a2e4:	305c      	adds	r0, #92	@ 0x5c
 800a2e6:	f000 fa1f 	bl	800a728 <memset>
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a320 <std+0x58>)
 800a2ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <std+0x5c>)
 800a2f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <std+0x60>)
 800a2f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a32c <std+0x64>)
 800a2f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a330 <std+0x68>)
 800a2fc:	6224      	str	r4, [r4, #32]
 800a2fe:	429c      	cmp	r4, r3
 800a300:	d006      	beq.n	800a310 <std+0x48>
 800a302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a306:	4294      	cmp	r4, r2
 800a308:	d002      	beq.n	800a310 <std+0x48>
 800a30a:	33d0      	adds	r3, #208	@ 0xd0
 800a30c:	429c      	cmp	r4, r3
 800a30e:	d105      	bne.n	800a31c <std+0x54>
 800a310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a318:	f000 ba7e 	b.w	800a818 <__retarget_lock_init_recursive>
 800a31c:	bd10      	pop	{r4, pc}
 800a31e:	bf00      	nop
 800a320:	0800a509 	.word	0x0800a509
 800a324:	0800a52b 	.word	0x0800a52b
 800a328:	0800a563 	.word	0x0800a563
 800a32c:	0800a587 	.word	0x0800a587
 800a330:	2400029c 	.word	0x2400029c

0800a334 <stdio_exit_handler>:
 800a334:	4a02      	ldr	r2, [pc, #8]	@ (800a340 <stdio_exit_handler+0xc>)
 800a336:	4903      	ldr	r1, [pc, #12]	@ (800a344 <stdio_exit_handler+0x10>)
 800a338:	4803      	ldr	r0, [pc, #12]	@ (800a348 <stdio_exit_handler+0x14>)
 800a33a:	f000 b869 	b.w	800a410 <_fwalk_sglue>
 800a33e:	bf00      	nop
 800a340:	24000010 	.word	0x24000010
 800a344:	0800b0e5 	.word	0x0800b0e5
 800a348:	24000020 	.word	0x24000020

0800a34c <cleanup_stdio>:
 800a34c:	6841      	ldr	r1, [r0, #4]
 800a34e:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <cleanup_stdio+0x34>)
 800a350:	4299      	cmp	r1, r3
 800a352:	b510      	push	{r4, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	d001      	beq.n	800a35c <cleanup_stdio+0x10>
 800a358:	f000 fec4 	bl	800b0e4 <_fflush_r>
 800a35c:	68a1      	ldr	r1, [r4, #8]
 800a35e:	4b09      	ldr	r3, [pc, #36]	@ (800a384 <cleanup_stdio+0x38>)
 800a360:	4299      	cmp	r1, r3
 800a362:	d002      	beq.n	800a36a <cleanup_stdio+0x1e>
 800a364:	4620      	mov	r0, r4
 800a366:	f000 febd 	bl	800b0e4 <_fflush_r>
 800a36a:	68e1      	ldr	r1, [r4, #12]
 800a36c:	4b06      	ldr	r3, [pc, #24]	@ (800a388 <cleanup_stdio+0x3c>)
 800a36e:	4299      	cmp	r1, r3
 800a370:	d004      	beq.n	800a37c <cleanup_stdio+0x30>
 800a372:	4620      	mov	r0, r4
 800a374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a378:	f000 beb4 	b.w	800b0e4 <_fflush_r>
 800a37c:	bd10      	pop	{r4, pc}
 800a37e:	bf00      	nop
 800a380:	2400029c 	.word	0x2400029c
 800a384:	24000304 	.word	0x24000304
 800a388:	2400036c 	.word	0x2400036c

0800a38c <global_stdio_init.part.0>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	4b0b      	ldr	r3, [pc, #44]	@ (800a3bc <global_stdio_init.part.0+0x30>)
 800a390:	4c0b      	ldr	r4, [pc, #44]	@ (800a3c0 <global_stdio_init.part.0+0x34>)
 800a392:	4a0c      	ldr	r2, [pc, #48]	@ (800a3c4 <global_stdio_init.part.0+0x38>)
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	4620      	mov	r0, r4
 800a398:	2200      	movs	r2, #0
 800a39a:	2104      	movs	r1, #4
 800a39c:	f7ff ff94 	bl	800a2c8 <std>
 800a3a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	2109      	movs	r1, #9
 800a3a8:	f7ff ff8e 	bl	800a2c8 <std>
 800a3ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b6:	2112      	movs	r1, #18
 800a3b8:	f7ff bf86 	b.w	800a2c8 <std>
 800a3bc:	240003d4 	.word	0x240003d4
 800a3c0:	2400029c 	.word	0x2400029c
 800a3c4:	0800a335 	.word	0x0800a335

0800a3c8 <__sfp_lock_acquire>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	@ (800a3d0 <__sfp_lock_acquire+0x8>)
 800a3ca:	f000 ba26 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	240003dd 	.word	0x240003dd

0800a3d4 <__sfp_lock_release>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	@ (800a3dc <__sfp_lock_release+0x8>)
 800a3d6:	f000 ba21 	b.w	800a81c <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	240003dd 	.word	0x240003dd

0800a3e0 <__sinit>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	f7ff fff0 	bl	800a3c8 <__sfp_lock_acquire>
 800a3e8:	6a23      	ldr	r3, [r4, #32]
 800a3ea:	b11b      	cbz	r3, 800a3f4 <__sinit+0x14>
 800a3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f0:	f7ff bff0 	b.w	800a3d4 <__sfp_lock_release>
 800a3f4:	4b04      	ldr	r3, [pc, #16]	@ (800a408 <__sinit+0x28>)
 800a3f6:	6223      	str	r3, [r4, #32]
 800a3f8:	4b04      	ldr	r3, [pc, #16]	@ (800a40c <__sinit+0x2c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1f5      	bne.n	800a3ec <__sinit+0xc>
 800a400:	f7ff ffc4 	bl	800a38c <global_stdio_init.part.0>
 800a404:	e7f2      	b.n	800a3ec <__sinit+0xc>
 800a406:	bf00      	nop
 800a408:	0800a34d 	.word	0x0800a34d
 800a40c:	240003d4 	.word	0x240003d4

0800a410 <_fwalk_sglue>:
 800a410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a414:	4607      	mov	r7, r0
 800a416:	4688      	mov	r8, r1
 800a418:	4614      	mov	r4, r2
 800a41a:	2600      	movs	r6, #0
 800a41c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a420:	f1b9 0901 	subs.w	r9, r9, #1
 800a424:	d505      	bpl.n	800a432 <_fwalk_sglue+0x22>
 800a426:	6824      	ldr	r4, [r4, #0]
 800a428:	2c00      	cmp	r4, #0
 800a42a:	d1f7      	bne.n	800a41c <_fwalk_sglue+0xc>
 800a42c:	4630      	mov	r0, r6
 800a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d907      	bls.n	800a448 <_fwalk_sglue+0x38>
 800a438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a43c:	3301      	adds	r3, #1
 800a43e:	d003      	beq.n	800a448 <_fwalk_sglue+0x38>
 800a440:	4629      	mov	r1, r5
 800a442:	4638      	mov	r0, r7
 800a444:	47c0      	blx	r8
 800a446:	4306      	orrs	r6, r0
 800a448:	3568      	adds	r5, #104	@ 0x68
 800a44a:	e7e9      	b.n	800a420 <_fwalk_sglue+0x10>

0800a44c <_puts_r>:
 800a44c:	6a03      	ldr	r3, [r0, #32]
 800a44e:	b570      	push	{r4, r5, r6, lr}
 800a450:	6884      	ldr	r4, [r0, #8]
 800a452:	4605      	mov	r5, r0
 800a454:	460e      	mov	r6, r1
 800a456:	b90b      	cbnz	r3, 800a45c <_puts_r+0x10>
 800a458:	f7ff ffc2 	bl	800a3e0 <__sinit>
 800a45c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a45e:	07db      	lsls	r3, r3, #31
 800a460:	d405      	bmi.n	800a46e <_puts_r+0x22>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	0598      	lsls	r0, r3, #22
 800a466:	d402      	bmi.n	800a46e <_puts_r+0x22>
 800a468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a46a:	f000 f9d6 	bl	800a81a <__retarget_lock_acquire_recursive>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	0719      	lsls	r1, r3, #28
 800a472:	d502      	bpl.n	800a47a <_puts_r+0x2e>
 800a474:	6923      	ldr	r3, [r4, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d135      	bne.n	800a4e6 <_puts_r+0x9a>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f000 f8fd 	bl	800a67c <__swsetup_r>
 800a482:	b380      	cbz	r0, 800a4e6 <_puts_r+0x9a>
 800a484:	f04f 35ff 	mov.w	r5, #4294967295
 800a488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a48a:	07da      	lsls	r2, r3, #31
 800a48c:	d405      	bmi.n	800a49a <_puts_r+0x4e>
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	059b      	lsls	r3, r3, #22
 800a492:	d402      	bmi.n	800a49a <_puts_r+0x4e>
 800a494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a496:	f000 f9c1 	bl	800a81c <__retarget_lock_release_recursive>
 800a49a:	4628      	mov	r0, r5
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	da04      	bge.n	800a4ac <_puts_r+0x60>
 800a4a2:	69a2      	ldr	r2, [r4, #24]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	dc17      	bgt.n	800a4d8 <_puts_r+0x8c>
 800a4a8:	290a      	cmp	r1, #10
 800a4aa:	d015      	beq.n	800a4d8 <_puts_r+0x8c>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	6022      	str	r2, [r4, #0]
 800a4b2:	7019      	strb	r1, [r3, #0]
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	60a3      	str	r3, [r4, #8]
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d1ed      	bne.n	800a49e <_puts_r+0x52>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	da11      	bge.n	800a4ea <_puts_r+0x9e>
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	210a      	movs	r1, #10
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f898 	bl	800a600 <__swbuf_r>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d0d7      	beq.n	800a484 <_puts_r+0x38>
 800a4d4:	250a      	movs	r5, #10
 800a4d6:	e7d7      	b.n	800a488 <_puts_r+0x3c>
 800a4d8:	4622      	mov	r2, r4
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f000 f890 	bl	800a600 <__swbuf_r>
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d1e7      	bne.n	800a4b4 <_puts_r+0x68>
 800a4e4:	e7ce      	b.n	800a484 <_puts_r+0x38>
 800a4e6:	3e01      	subs	r6, #1
 800a4e8:	e7e4      	b.n	800a4b4 <_puts_r+0x68>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	6022      	str	r2, [r4, #0]
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e7ee      	b.n	800a4d4 <_puts_r+0x88>
	...

0800a4f8 <puts>:
 800a4f8:	4b02      	ldr	r3, [pc, #8]	@ (800a504 <puts+0xc>)
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	f7ff bfa5 	b.w	800a44c <_puts_r>
 800a502:	bf00      	nop
 800a504:	2400001c 	.word	0x2400001c

0800a508 <__sread>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	460c      	mov	r4, r1
 800a50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a510:	f000 f934 	bl	800a77c <_read_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	bfab      	itete	ge
 800a518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a51a:	89a3      	ldrhlt	r3, [r4, #12]
 800a51c:	181b      	addge	r3, r3, r0
 800a51e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a522:	bfac      	ite	ge
 800a524:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a526:	81a3      	strhlt	r3, [r4, #12]
 800a528:	bd10      	pop	{r4, pc}

0800a52a <__swrite>:
 800a52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52e:	461f      	mov	r7, r3
 800a530:	898b      	ldrh	r3, [r1, #12]
 800a532:	05db      	lsls	r3, r3, #23
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	4616      	mov	r6, r2
 800a53a:	d505      	bpl.n	800a548 <__swrite+0x1e>
 800a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a540:	2302      	movs	r3, #2
 800a542:	2200      	movs	r2, #0
 800a544:	f000 f908 	bl	800a758 <_lseek_r>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a54e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a552:	81a3      	strh	r3, [r4, #12]
 800a554:	4632      	mov	r2, r6
 800a556:	463b      	mov	r3, r7
 800a558:	4628      	mov	r0, r5
 800a55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a55e:	f000 b91f 	b.w	800a7a0 <_write_r>

0800a562 <__sseek>:
 800a562:	b510      	push	{r4, lr}
 800a564:	460c      	mov	r4, r1
 800a566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56a:	f000 f8f5 	bl	800a758 <_lseek_r>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	bf15      	itete	ne
 800a574:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a57a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a57e:	81a3      	strheq	r3, [r4, #12]
 800a580:	bf18      	it	ne
 800a582:	81a3      	strhne	r3, [r4, #12]
 800a584:	bd10      	pop	{r4, pc}

0800a586 <__sclose>:
 800a586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58a:	f000 b8d5 	b.w	800a738 <_close_r>

0800a58e <_vsniprintf_r>:
 800a58e:	b530      	push	{r4, r5, lr}
 800a590:	4614      	mov	r4, r2
 800a592:	2c00      	cmp	r4, #0
 800a594:	b09b      	sub	sp, #108	@ 0x6c
 800a596:	4605      	mov	r5, r0
 800a598:	461a      	mov	r2, r3
 800a59a:	da05      	bge.n	800a5a8 <_vsniprintf_r+0x1a>
 800a59c:	238b      	movs	r3, #139	@ 0x8b
 800a59e:	6003      	str	r3, [r0, #0]
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	b01b      	add	sp, #108	@ 0x6c
 800a5a6:	bd30      	pop	{r4, r5, pc}
 800a5a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a5b0:	bf14      	ite	ne
 800a5b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5b6:	4623      	moveq	r3, r4
 800a5b8:	9302      	str	r3, [sp, #8]
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5c0:	9100      	str	r1, [sp, #0]
 800a5c2:	9104      	str	r1, [sp, #16]
 800a5c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a5c8:	4669      	mov	r1, sp
 800a5ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a5cc:	f000 fa7c 	bl	800aac8 <_svfiprintf_r>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	bfbc      	itt	lt
 800a5d4:	238b      	movlt	r3, #139	@ 0x8b
 800a5d6:	602b      	strlt	r3, [r5, #0]
 800a5d8:	2c00      	cmp	r4, #0
 800a5da:	d0e3      	beq.n	800a5a4 <_vsniprintf_r+0x16>
 800a5dc:	9b00      	ldr	r3, [sp, #0]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	e7df      	b.n	800a5a4 <_vsniprintf_r+0x16>

0800a5e4 <vsniprintf>:
 800a5e4:	b507      	push	{r0, r1, r2, lr}
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	460a      	mov	r2, r1
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	4803      	ldr	r0, [pc, #12]	@ (800a5fc <vsniprintf+0x18>)
 800a5f0:	6800      	ldr	r0, [r0, #0]
 800a5f2:	f7ff ffcc 	bl	800a58e <_vsniprintf_r>
 800a5f6:	b003      	add	sp, #12
 800a5f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5fc:	2400001c 	.word	0x2400001c

0800a600 <__swbuf_r>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	460e      	mov	r6, r1
 800a604:	4614      	mov	r4, r2
 800a606:	4605      	mov	r5, r0
 800a608:	b118      	cbz	r0, 800a612 <__swbuf_r+0x12>
 800a60a:	6a03      	ldr	r3, [r0, #32]
 800a60c:	b90b      	cbnz	r3, 800a612 <__swbuf_r+0x12>
 800a60e:	f7ff fee7 	bl	800a3e0 <__sinit>
 800a612:	69a3      	ldr	r3, [r4, #24]
 800a614:	60a3      	str	r3, [r4, #8]
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	071a      	lsls	r2, r3, #28
 800a61a:	d501      	bpl.n	800a620 <__swbuf_r+0x20>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	b943      	cbnz	r3, 800a632 <__swbuf_r+0x32>
 800a620:	4621      	mov	r1, r4
 800a622:	4628      	mov	r0, r5
 800a624:	f000 f82a 	bl	800a67c <__swsetup_r>
 800a628:	b118      	cbz	r0, 800a632 <__swbuf_r+0x32>
 800a62a:	f04f 37ff 	mov.w	r7, #4294967295
 800a62e:	4638      	mov	r0, r7
 800a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	6922      	ldr	r2, [r4, #16]
 800a636:	1a98      	subs	r0, r3, r2
 800a638:	6963      	ldr	r3, [r4, #20]
 800a63a:	b2f6      	uxtb	r6, r6
 800a63c:	4283      	cmp	r3, r0
 800a63e:	4637      	mov	r7, r6
 800a640:	dc05      	bgt.n	800a64e <__swbuf_r+0x4e>
 800a642:	4621      	mov	r1, r4
 800a644:	4628      	mov	r0, r5
 800a646:	f000 fd4d 	bl	800b0e4 <_fflush_r>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d1ed      	bne.n	800a62a <__swbuf_r+0x2a>
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	3b01      	subs	r3, #1
 800a652:	60a3      	str	r3, [r4, #8]
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	6022      	str	r2, [r4, #0]
 800a65a:	701e      	strb	r6, [r3, #0]
 800a65c:	6962      	ldr	r2, [r4, #20]
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	429a      	cmp	r2, r3
 800a662:	d004      	beq.n	800a66e <__swbuf_r+0x6e>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	07db      	lsls	r3, r3, #31
 800a668:	d5e1      	bpl.n	800a62e <__swbuf_r+0x2e>
 800a66a:	2e0a      	cmp	r6, #10
 800a66c:	d1df      	bne.n	800a62e <__swbuf_r+0x2e>
 800a66e:	4621      	mov	r1, r4
 800a670:	4628      	mov	r0, r5
 800a672:	f000 fd37 	bl	800b0e4 <_fflush_r>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0d9      	beq.n	800a62e <__swbuf_r+0x2e>
 800a67a:	e7d6      	b.n	800a62a <__swbuf_r+0x2a>

0800a67c <__swsetup_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4b29      	ldr	r3, [pc, #164]	@ (800a724 <__swsetup_r+0xa8>)
 800a680:	4605      	mov	r5, r0
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	460c      	mov	r4, r1
 800a686:	b118      	cbz	r0, 800a690 <__swsetup_r+0x14>
 800a688:	6a03      	ldr	r3, [r0, #32]
 800a68a:	b90b      	cbnz	r3, 800a690 <__swsetup_r+0x14>
 800a68c:	f7ff fea8 	bl	800a3e0 <__sinit>
 800a690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a694:	0719      	lsls	r1, r3, #28
 800a696:	d422      	bmi.n	800a6de <__swsetup_r+0x62>
 800a698:	06da      	lsls	r2, r3, #27
 800a69a:	d407      	bmi.n	800a6ac <__swsetup_r+0x30>
 800a69c:	2209      	movs	r2, #9
 800a69e:	602a      	str	r2, [r5, #0]
 800a6a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6aa:	e033      	b.n	800a714 <__swsetup_r+0x98>
 800a6ac:	0758      	lsls	r0, r3, #29
 800a6ae:	d512      	bpl.n	800a6d6 <__swsetup_r+0x5a>
 800a6b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6b2:	b141      	cbz	r1, 800a6c6 <__swsetup_r+0x4a>
 800a6b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6b8:	4299      	cmp	r1, r3
 800a6ba:	d002      	beq.n	800a6c2 <__swsetup_r+0x46>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 f8af 	bl	800a820 <_free_r>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6cc:	81a3      	strh	r3, [r4, #12]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6063      	str	r3, [r4, #4]
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f043 0308 	orr.w	r3, r3, #8
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	6923      	ldr	r3, [r4, #16]
 800a6e0:	b94b      	cbnz	r3, 800a6f6 <__swsetup_r+0x7a>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6ec:	d003      	beq.n	800a6f6 <__swsetup_r+0x7a>
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 fd45 	bl	800b180 <__smakebuf_r>
 800a6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6fa:	f013 0201 	ands.w	r2, r3, #1
 800a6fe:	d00a      	beq.n	800a716 <__swsetup_r+0x9a>
 800a700:	2200      	movs	r2, #0
 800a702:	60a2      	str	r2, [r4, #8]
 800a704:	6962      	ldr	r2, [r4, #20]
 800a706:	4252      	negs	r2, r2
 800a708:	61a2      	str	r2, [r4, #24]
 800a70a:	6922      	ldr	r2, [r4, #16]
 800a70c:	b942      	cbnz	r2, 800a720 <__swsetup_r+0xa4>
 800a70e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a712:	d1c5      	bne.n	800a6a0 <__swsetup_r+0x24>
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	0799      	lsls	r1, r3, #30
 800a718:	bf58      	it	pl
 800a71a:	6962      	ldrpl	r2, [r4, #20]
 800a71c:	60a2      	str	r2, [r4, #8]
 800a71e:	e7f4      	b.n	800a70a <__swsetup_r+0x8e>
 800a720:	2000      	movs	r0, #0
 800a722:	e7f7      	b.n	800a714 <__swsetup_r+0x98>
 800a724:	2400001c 	.word	0x2400001c

0800a728 <memset>:
 800a728:	4402      	add	r2, r0
 800a72a:	4603      	mov	r3, r0
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d100      	bne.n	800a732 <memset+0xa>
 800a730:	4770      	bx	lr
 800a732:	f803 1b01 	strb.w	r1, [r3], #1
 800a736:	e7f9      	b.n	800a72c <memset+0x4>

0800a738 <_close_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d06      	ldr	r5, [pc, #24]	@ (800a754 <_close_r+0x1c>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	f7f7 f8bd 	bl	80018c2 <_close>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_close_r+0x1a>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_close_r+0x1a>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	240003d8 	.word	0x240003d8

0800a758 <_lseek_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	@ (800a778 <_lseek_r+0x20>)
 800a75c:	4604      	mov	r4, r0
 800a75e:	4608      	mov	r0, r1
 800a760:	4611      	mov	r1, r2
 800a762:	2200      	movs	r2, #0
 800a764:	602a      	str	r2, [r5, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f7f7 f8d2 	bl	8001910 <_lseek>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_lseek_r+0x1e>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_lseek_r+0x1e>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	240003d8 	.word	0x240003d8

0800a77c <_read_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d07      	ldr	r5, [pc, #28]	@ (800a79c <_read_r+0x20>)
 800a780:	4604      	mov	r4, r0
 800a782:	4608      	mov	r0, r1
 800a784:	4611      	mov	r1, r2
 800a786:	2200      	movs	r2, #0
 800a788:	602a      	str	r2, [r5, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f7f7 f87c 	bl	8001888 <_read>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_read_r+0x1e>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_read_r+0x1e>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	240003d8 	.word	0x240003d8

0800a7a0 <_write_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	@ (800a7c0 <_write_r+0x20>)
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f6 fdc8 	bl	8001344 <_write>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_write_r+0x1e>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_write_r+0x1e>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	240003d8 	.word	0x240003d8

0800a7c4 <__errno>:
 800a7c4:	4b01      	ldr	r3, [pc, #4]	@ (800a7cc <__errno+0x8>)
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	2400001c 	.word	0x2400001c

0800a7d0 <__libc_init_array>:
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a808 <__libc_init_array+0x38>)
 800a7d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a80c <__libc_init_array+0x3c>)
 800a7d6:	1b64      	subs	r4, r4, r5
 800a7d8:	10a4      	asrs	r4, r4, #2
 800a7da:	2600      	movs	r6, #0
 800a7dc:	42a6      	cmp	r6, r4
 800a7de:	d109      	bne.n	800a7f4 <__libc_init_array+0x24>
 800a7e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a810 <__libc_init_array+0x40>)
 800a7e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a814 <__libc_init_array+0x44>)
 800a7e4:	f000 fd98 	bl	800b318 <_init>
 800a7e8:	1b64      	subs	r4, r4, r5
 800a7ea:	10a4      	asrs	r4, r4, #2
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	42a6      	cmp	r6, r4
 800a7f0:	d105      	bne.n	800a7fe <__libc_init_array+0x2e>
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7f8:	4798      	blx	r3
 800a7fa:	3601      	adds	r6, #1
 800a7fc:	e7ee      	b.n	800a7dc <__libc_init_array+0xc>
 800a7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a802:	4798      	blx	r3
 800a804:	3601      	adds	r6, #1
 800a806:	e7f2      	b.n	800a7ee <__libc_init_array+0x1e>
 800a808:	0800b428 	.word	0x0800b428
 800a80c:	0800b428 	.word	0x0800b428
 800a810:	0800b428 	.word	0x0800b428
 800a814:	0800b42c 	.word	0x0800b42c

0800a818 <__retarget_lock_init_recursive>:
 800a818:	4770      	bx	lr

0800a81a <__retarget_lock_acquire_recursive>:
 800a81a:	4770      	bx	lr

0800a81c <__retarget_lock_release_recursive>:
 800a81c:	4770      	bx	lr
	...

0800a820 <_free_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4605      	mov	r5, r0
 800a824:	2900      	cmp	r1, #0
 800a826:	d041      	beq.n	800a8ac <_free_r+0x8c>
 800a828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a82c:	1f0c      	subs	r4, r1, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bfb8      	it	lt
 800a832:	18e4      	addlt	r4, r4, r3
 800a834:	f000 f8e0 	bl	800a9f8 <__malloc_lock>
 800a838:	4a1d      	ldr	r2, [pc, #116]	@ (800a8b0 <_free_r+0x90>)
 800a83a:	6813      	ldr	r3, [r2, #0]
 800a83c:	b933      	cbnz	r3, 800a84c <_free_r+0x2c>
 800a83e:	6063      	str	r3, [r4, #4]
 800a840:	6014      	str	r4, [r2, #0]
 800a842:	4628      	mov	r0, r5
 800a844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a848:	f000 b8dc 	b.w	800aa04 <__malloc_unlock>
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	d908      	bls.n	800a862 <_free_r+0x42>
 800a850:	6820      	ldr	r0, [r4, #0]
 800a852:	1821      	adds	r1, r4, r0
 800a854:	428b      	cmp	r3, r1
 800a856:	bf01      	itttt	eq
 800a858:	6819      	ldreq	r1, [r3, #0]
 800a85a:	685b      	ldreq	r3, [r3, #4]
 800a85c:	1809      	addeq	r1, r1, r0
 800a85e:	6021      	streq	r1, [r4, #0]
 800a860:	e7ed      	b.n	800a83e <_free_r+0x1e>
 800a862:	461a      	mov	r2, r3
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	b10b      	cbz	r3, 800a86c <_free_r+0x4c>
 800a868:	42a3      	cmp	r3, r4
 800a86a:	d9fa      	bls.n	800a862 <_free_r+0x42>
 800a86c:	6811      	ldr	r1, [r2, #0]
 800a86e:	1850      	adds	r0, r2, r1
 800a870:	42a0      	cmp	r0, r4
 800a872:	d10b      	bne.n	800a88c <_free_r+0x6c>
 800a874:	6820      	ldr	r0, [r4, #0]
 800a876:	4401      	add	r1, r0
 800a878:	1850      	adds	r0, r2, r1
 800a87a:	4283      	cmp	r3, r0
 800a87c:	6011      	str	r1, [r2, #0]
 800a87e:	d1e0      	bne.n	800a842 <_free_r+0x22>
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	6053      	str	r3, [r2, #4]
 800a886:	4408      	add	r0, r1
 800a888:	6010      	str	r0, [r2, #0]
 800a88a:	e7da      	b.n	800a842 <_free_r+0x22>
 800a88c:	d902      	bls.n	800a894 <_free_r+0x74>
 800a88e:	230c      	movs	r3, #12
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	e7d6      	b.n	800a842 <_free_r+0x22>
 800a894:	6820      	ldr	r0, [r4, #0]
 800a896:	1821      	adds	r1, r4, r0
 800a898:	428b      	cmp	r3, r1
 800a89a:	bf04      	itt	eq
 800a89c:	6819      	ldreq	r1, [r3, #0]
 800a89e:	685b      	ldreq	r3, [r3, #4]
 800a8a0:	6063      	str	r3, [r4, #4]
 800a8a2:	bf04      	itt	eq
 800a8a4:	1809      	addeq	r1, r1, r0
 800a8a6:	6021      	streq	r1, [r4, #0]
 800a8a8:	6054      	str	r4, [r2, #4]
 800a8aa:	e7ca      	b.n	800a842 <_free_r+0x22>
 800a8ac:	bd38      	pop	{r3, r4, r5, pc}
 800a8ae:	bf00      	nop
 800a8b0:	240003e4 	.word	0x240003e4

0800a8b4 <sbrk_aligned>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	4e0f      	ldr	r6, [pc, #60]	@ (800a8f4 <sbrk_aligned+0x40>)
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	6831      	ldr	r1, [r6, #0]
 800a8bc:	4605      	mov	r5, r0
 800a8be:	b911      	cbnz	r1, 800a8c6 <sbrk_aligned+0x12>
 800a8c0:	f000 fcd6 	bl	800b270 <_sbrk_r>
 800a8c4:	6030      	str	r0, [r6, #0]
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 fcd1 	bl	800b270 <_sbrk_r>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	d103      	bne.n	800a8da <sbrk_aligned+0x26>
 800a8d2:	f04f 34ff 	mov.w	r4, #4294967295
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
 800a8da:	1cc4      	adds	r4, r0, #3
 800a8dc:	f024 0403 	bic.w	r4, r4, #3
 800a8e0:	42a0      	cmp	r0, r4
 800a8e2:	d0f8      	beq.n	800a8d6 <sbrk_aligned+0x22>
 800a8e4:	1a21      	subs	r1, r4, r0
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f000 fcc2 	bl	800b270 <_sbrk_r>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d1f2      	bne.n	800a8d6 <sbrk_aligned+0x22>
 800a8f0:	e7ef      	b.n	800a8d2 <sbrk_aligned+0x1e>
 800a8f2:	bf00      	nop
 800a8f4:	240003e0 	.word	0x240003e0

0800a8f8 <_malloc_r>:
 800a8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8fc:	1ccd      	adds	r5, r1, #3
 800a8fe:	f025 0503 	bic.w	r5, r5, #3
 800a902:	3508      	adds	r5, #8
 800a904:	2d0c      	cmp	r5, #12
 800a906:	bf38      	it	cc
 800a908:	250c      	movcc	r5, #12
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	4606      	mov	r6, r0
 800a90e:	db01      	blt.n	800a914 <_malloc_r+0x1c>
 800a910:	42a9      	cmp	r1, r5
 800a912:	d904      	bls.n	800a91e <_malloc_r+0x26>
 800a914:	230c      	movs	r3, #12
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	2000      	movs	r0, #0
 800a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a91e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9f4 <_malloc_r+0xfc>
 800a922:	f000 f869 	bl	800a9f8 <__malloc_lock>
 800a926:	f8d8 3000 	ldr.w	r3, [r8]
 800a92a:	461c      	mov	r4, r3
 800a92c:	bb44      	cbnz	r4, 800a980 <_malloc_r+0x88>
 800a92e:	4629      	mov	r1, r5
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff ffbf 	bl	800a8b4 <sbrk_aligned>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	4604      	mov	r4, r0
 800a93a:	d158      	bne.n	800a9ee <_malloc_r+0xf6>
 800a93c:	f8d8 4000 	ldr.w	r4, [r8]
 800a940:	4627      	mov	r7, r4
 800a942:	2f00      	cmp	r7, #0
 800a944:	d143      	bne.n	800a9ce <_malloc_r+0xd6>
 800a946:	2c00      	cmp	r4, #0
 800a948:	d04b      	beq.n	800a9e2 <_malloc_r+0xea>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	4639      	mov	r1, r7
 800a94e:	4630      	mov	r0, r6
 800a950:	eb04 0903 	add.w	r9, r4, r3
 800a954:	f000 fc8c 	bl	800b270 <_sbrk_r>
 800a958:	4581      	cmp	r9, r0
 800a95a:	d142      	bne.n	800a9e2 <_malloc_r+0xea>
 800a95c:	6821      	ldr	r1, [r4, #0]
 800a95e:	1a6d      	subs	r5, r5, r1
 800a960:	4629      	mov	r1, r5
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ffa6 	bl	800a8b4 <sbrk_aligned>
 800a968:	3001      	adds	r0, #1
 800a96a:	d03a      	beq.n	800a9e2 <_malloc_r+0xea>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	442b      	add	r3, r5
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	f8d8 3000 	ldr.w	r3, [r8]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	bb62      	cbnz	r2, 800a9d4 <_malloc_r+0xdc>
 800a97a:	f8c8 7000 	str.w	r7, [r8]
 800a97e:	e00f      	b.n	800a9a0 <_malloc_r+0xa8>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	1b52      	subs	r2, r2, r5
 800a984:	d420      	bmi.n	800a9c8 <_malloc_r+0xd0>
 800a986:	2a0b      	cmp	r2, #11
 800a988:	d917      	bls.n	800a9ba <_malloc_r+0xc2>
 800a98a:	1961      	adds	r1, r4, r5
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	6025      	str	r5, [r4, #0]
 800a990:	bf18      	it	ne
 800a992:	6059      	strne	r1, [r3, #4]
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	bf08      	it	eq
 800a998:	f8c8 1000 	streq.w	r1, [r8]
 800a99c:	5162      	str	r2, [r4, r5]
 800a99e:	604b      	str	r3, [r1, #4]
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 f82f 	bl	800aa04 <__malloc_unlock>
 800a9a6:	f104 000b 	add.w	r0, r4, #11
 800a9aa:	1d23      	adds	r3, r4, #4
 800a9ac:	f020 0007 	bic.w	r0, r0, #7
 800a9b0:	1ac2      	subs	r2, r0, r3
 800a9b2:	bf1c      	itt	ne
 800a9b4:	1a1b      	subne	r3, r3, r0
 800a9b6:	50a3      	strne	r3, [r4, r2]
 800a9b8:	e7af      	b.n	800a91a <_malloc_r+0x22>
 800a9ba:	6862      	ldr	r2, [r4, #4]
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	bf0c      	ite	eq
 800a9c0:	f8c8 2000 	streq.w	r2, [r8]
 800a9c4:	605a      	strne	r2, [r3, #4]
 800a9c6:	e7eb      	b.n	800a9a0 <_malloc_r+0xa8>
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	6864      	ldr	r4, [r4, #4]
 800a9cc:	e7ae      	b.n	800a92c <_malloc_r+0x34>
 800a9ce:	463c      	mov	r4, r7
 800a9d0:	687f      	ldr	r7, [r7, #4]
 800a9d2:	e7b6      	b.n	800a942 <_malloc_r+0x4a>
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d1fb      	bne.n	800a9d4 <_malloc_r+0xdc>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6053      	str	r3, [r2, #4]
 800a9e0:	e7de      	b.n	800a9a0 <_malloc_r+0xa8>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 f80c 	bl	800aa04 <__malloc_unlock>
 800a9ec:	e794      	b.n	800a918 <_malloc_r+0x20>
 800a9ee:	6005      	str	r5, [r0, #0]
 800a9f0:	e7d6      	b.n	800a9a0 <_malloc_r+0xa8>
 800a9f2:	bf00      	nop
 800a9f4:	240003e4 	.word	0x240003e4

0800a9f8 <__malloc_lock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	@ (800aa00 <__malloc_lock+0x8>)
 800a9fa:	f7ff bf0e 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	240003dc 	.word	0x240003dc

0800aa04 <__malloc_unlock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	@ (800aa0c <__malloc_unlock+0x8>)
 800aa06:	f7ff bf09 	b.w	800a81c <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	240003dc 	.word	0x240003dc

0800aa10 <__ssputs_r>:
 800aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa14:	688e      	ldr	r6, [r1, #8]
 800aa16:	461f      	mov	r7, r3
 800aa18:	42be      	cmp	r6, r7
 800aa1a:	680b      	ldr	r3, [r1, #0]
 800aa1c:	4682      	mov	sl, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4690      	mov	r8, r2
 800aa22:	d82d      	bhi.n	800aa80 <__ssputs_r+0x70>
 800aa24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa2c:	d026      	beq.n	800aa7c <__ssputs_r+0x6c>
 800aa2e:	6965      	ldr	r5, [r4, #20]
 800aa30:	6909      	ldr	r1, [r1, #16]
 800aa32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa36:	eba3 0901 	sub.w	r9, r3, r1
 800aa3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa3e:	1c7b      	adds	r3, r7, #1
 800aa40:	444b      	add	r3, r9
 800aa42:	106d      	asrs	r5, r5, #1
 800aa44:	429d      	cmp	r5, r3
 800aa46:	bf38      	it	cc
 800aa48:	461d      	movcc	r5, r3
 800aa4a:	0553      	lsls	r3, r2, #21
 800aa4c:	d527      	bpl.n	800aa9e <__ssputs_r+0x8e>
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f7ff ff52 	bl	800a8f8 <_malloc_r>
 800aa54:	4606      	mov	r6, r0
 800aa56:	b360      	cbz	r0, 800aab2 <__ssputs_r+0xa2>
 800aa58:	6921      	ldr	r1, [r4, #16]
 800aa5a:	464a      	mov	r2, r9
 800aa5c:	f000 fc18 	bl	800b290 <memcpy>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	6126      	str	r6, [r4, #16]
 800aa6e:	6165      	str	r5, [r4, #20]
 800aa70:	444e      	add	r6, r9
 800aa72:	eba5 0509 	sub.w	r5, r5, r9
 800aa76:	6026      	str	r6, [r4, #0]
 800aa78:	60a5      	str	r5, [r4, #8]
 800aa7a:	463e      	mov	r6, r7
 800aa7c:	42be      	cmp	r6, r7
 800aa7e:	d900      	bls.n	800aa82 <__ssputs_r+0x72>
 800aa80:	463e      	mov	r6, r7
 800aa82:	6820      	ldr	r0, [r4, #0]
 800aa84:	4632      	mov	r2, r6
 800aa86:	4641      	mov	r1, r8
 800aa88:	f000 fbb6 	bl	800b1f8 <memmove>
 800aa8c:	68a3      	ldr	r3, [r4, #8]
 800aa8e:	1b9b      	subs	r3, r3, r6
 800aa90:	60a3      	str	r3, [r4, #8]
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	4433      	add	r3, r6
 800aa96:	6023      	str	r3, [r4, #0]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	f000 fc04 	bl	800b2ac <_realloc_r>
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d1e0      	bne.n	800aa6c <__ssputs_r+0x5c>
 800aaaa:	6921      	ldr	r1, [r4, #16]
 800aaac:	4650      	mov	r0, sl
 800aaae:	f7ff feb7 	bl	800a820 <_free_r>
 800aab2:	230c      	movs	r3, #12
 800aab4:	f8ca 3000 	str.w	r3, [sl]
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	e7e9      	b.n	800aa9a <__ssputs_r+0x8a>
	...

0800aac8 <_svfiprintf_r>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	4698      	mov	r8, r3
 800aace:	898b      	ldrh	r3, [r1, #12]
 800aad0:	061b      	lsls	r3, r3, #24
 800aad2:	b09d      	sub	sp, #116	@ 0x74
 800aad4:	4607      	mov	r7, r0
 800aad6:	460d      	mov	r5, r1
 800aad8:	4614      	mov	r4, r2
 800aada:	d510      	bpl.n	800aafe <_svfiprintf_r+0x36>
 800aadc:	690b      	ldr	r3, [r1, #16]
 800aade:	b973      	cbnz	r3, 800aafe <_svfiprintf_r+0x36>
 800aae0:	2140      	movs	r1, #64	@ 0x40
 800aae2:	f7ff ff09 	bl	800a8f8 <_malloc_r>
 800aae6:	6028      	str	r0, [r5, #0]
 800aae8:	6128      	str	r0, [r5, #16]
 800aaea:	b930      	cbnz	r0, 800aafa <_svfiprintf_r+0x32>
 800aaec:	230c      	movs	r3, #12
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	b01d      	add	sp, #116	@ 0x74
 800aaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafa:	2340      	movs	r3, #64	@ 0x40
 800aafc:	616b      	str	r3, [r5, #20]
 800aafe:	2300      	movs	r3, #0
 800ab00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab02:	2320      	movs	r3, #32
 800ab04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab08:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab0c:	2330      	movs	r3, #48	@ 0x30
 800ab0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800acac <_svfiprintf_r+0x1e4>
 800ab12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab16:	f04f 0901 	mov.w	r9, #1
 800ab1a:	4623      	mov	r3, r4
 800ab1c:	469a      	mov	sl, r3
 800ab1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab22:	b10a      	cbz	r2, 800ab28 <_svfiprintf_r+0x60>
 800ab24:	2a25      	cmp	r2, #37	@ 0x25
 800ab26:	d1f9      	bne.n	800ab1c <_svfiprintf_r+0x54>
 800ab28:	ebba 0b04 	subs.w	fp, sl, r4
 800ab2c:	d00b      	beq.n	800ab46 <_svfiprintf_r+0x7e>
 800ab2e:	465b      	mov	r3, fp
 800ab30:	4622      	mov	r2, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	4638      	mov	r0, r7
 800ab36:	f7ff ff6b 	bl	800aa10 <__ssputs_r>
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	f000 80a7 	beq.w	800ac8e <_svfiprintf_r+0x1c6>
 800ab40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab42:	445a      	add	r2, fp
 800ab44:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab46:	f89a 3000 	ldrb.w	r3, [sl]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 809f 	beq.w	800ac8e <_svfiprintf_r+0x1c6>
 800ab50:	2300      	movs	r3, #0
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab5a:	f10a 0a01 	add.w	sl, sl, #1
 800ab5e:	9304      	str	r3, [sp, #16]
 800ab60:	9307      	str	r3, [sp, #28]
 800ab62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab66:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab68:	4654      	mov	r4, sl
 800ab6a:	2205      	movs	r2, #5
 800ab6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab70:	484e      	ldr	r0, [pc, #312]	@ (800acac <_svfiprintf_r+0x1e4>)
 800ab72:	f7f5 fbbd 	bl	80002f0 <memchr>
 800ab76:	9a04      	ldr	r2, [sp, #16]
 800ab78:	b9d8      	cbnz	r0, 800abb2 <_svfiprintf_r+0xea>
 800ab7a:	06d0      	lsls	r0, r2, #27
 800ab7c:	bf44      	itt	mi
 800ab7e:	2320      	movmi	r3, #32
 800ab80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab84:	0711      	lsls	r1, r2, #28
 800ab86:	bf44      	itt	mi
 800ab88:	232b      	movmi	r3, #43	@ 0x2b
 800ab8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab94:	d015      	beq.n	800abc2 <_svfiprintf_r+0xfa>
 800ab96:	9a07      	ldr	r2, [sp, #28]
 800ab98:	4654      	mov	r4, sl
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f04f 0c0a 	mov.w	ip, #10
 800aba0:	4621      	mov	r1, r4
 800aba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aba6:	3b30      	subs	r3, #48	@ 0x30
 800aba8:	2b09      	cmp	r3, #9
 800abaa:	d94b      	bls.n	800ac44 <_svfiprintf_r+0x17c>
 800abac:	b1b0      	cbz	r0, 800abdc <_svfiprintf_r+0x114>
 800abae:	9207      	str	r2, [sp, #28]
 800abb0:	e014      	b.n	800abdc <_svfiprintf_r+0x114>
 800abb2:	eba0 0308 	sub.w	r3, r0, r8
 800abb6:	fa09 f303 	lsl.w	r3, r9, r3
 800abba:	4313      	orrs	r3, r2
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	46a2      	mov	sl, r4
 800abc0:	e7d2      	b.n	800ab68 <_svfiprintf_r+0xa0>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	1d19      	adds	r1, r3, #4
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	9103      	str	r1, [sp, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	bfbb      	ittet	lt
 800abce:	425b      	neglt	r3, r3
 800abd0:	f042 0202 	orrlt.w	r2, r2, #2
 800abd4:	9307      	strge	r3, [sp, #28]
 800abd6:	9307      	strlt	r3, [sp, #28]
 800abd8:	bfb8      	it	lt
 800abda:	9204      	strlt	r2, [sp, #16]
 800abdc:	7823      	ldrb	r3, [r4, #0]
 800abde:	2b2e      	cmp	r3, #46	@ 0x2e
 800abe0:	d10a      	bne.n	800abf8 <_svfiprintf_r+0x130>
 800abe2:	7863      	ldrb	r3, [r4, #1]
 800abe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800abe6:	d132      	bne.n	800ac4e <_svfiprintf_r+0x186>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	1d1a      	adds	r2, r3, #4
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	9203      	str	r2, [sp, #12]
 800abf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abf4:	3402      	adds	r4, #2
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800acbc <_svfiprintf_r+0x1f4>
 800abfc:	7821      	ldrb	r1, [r4, #0]
 800abfe:	2203      	movs	r2, #3
 800ac00:	4650      	mov	r0, sl
 800ac02:	f7f5 fb75 	bl	80002f0 <memchr>
 800ac06:	b138      	cbz	r0, 800ac18 <_svfiprintf_r+0x150>
 800ac08:	9b04      	ldr	r3, [sp, #16]
 800ac0a:	eba0 000a 	sub.w	r0, r0, sl
 800ac0e:	2240      	movs	r2, #64	@ 0x40
 800ac10:	4082      	lsls	r2, r0
 800ac12:	4313      	orrs	r3, r2
 800ac14:	3401      	adds	r4, #1
 800ac16:	9304      	str	r3, [sp, #16]
 800ac18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1c:	4824      	ldr	r0, [pc, #144]	@ (800acb0 <_svfiprintf_r+0x1e8>)
 800ac1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac22:	2206      	movs	r2, #6
 800ac24:	f7f5 fb64 	bl	80002f0 <memchr>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d036      	beq.n	800ac9a <_svfiprintf_r+0x1d2>
 800ac2c:	4b21      	ldr	r3, [pc, #132]	@ (800acb4 <_svfiprintf_r+0x1ec>)
 800ac2e:	bb1b      	cbnz	r3, 800ac78 <_svfiprintf_r+0x1b0>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	3307      	adds	r3, #7
 800ac34:	f023 0307 	bic.w	r3, r3, #7
 800ac38:	3308      	adds	r3, #8
 800ac3a:	9303      	str	r3, [sp, #12]
 800ac3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac3e:	4433      	add	r3, r6
 800ac40:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac42:	e76a      	b.n	800ab1a <_svfiprintf_r+0x52>
 800ac44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac48:	460c      	mov	r4, r1
 800ac4a:	2001      	movs	r0, #1
 800ac4c:	e7a8      	b.n	800aba0 <_svfiprintf_r+0xd8>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	3401      	adds	r4, #1
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	4619      	mov	r1, r3
 800ac56:	f04f 0c0a 	mov.w	ip, #10
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac60:	3a30      	subs	r2, #48	@ 0x30
 800ac62:	2a09      	cmp	r2, #9
 800ac64:	d903      	bls.n	800ac6e <_svfiprintf_r+0x1a6>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0c6      	beq.n	800abf8 <_svfiprintf_r+0x130>
 800ac6a:	9105      	str	r1, [sp, #20]
 800ac6c:	e7c4      	b.n	800abf8 <_svfiprintf_r+0x130>
 800ac6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac72:	4604      	mov	r4, r0
 800ac74:	2301      	movs	r3, #1
 800ac76:	e7f0      	b.n	800ac5a <_svfiprintf_r+0x192>
 800ac78:	ab03      	add	r3, sp, #12
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	@ (800acb8 <_svfiprintf_r+0x1f0>)
 800ac80:	a904      	add	r1, sp, #16
 800ac82:	4638      	mov	r0, r7
 800ac84:	f3af 8000 	nop.w
 800ac88:	1c42      	adds	r2, r0, #1
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	d1d6      	bne.n	800ac3c <_svfiprintf_r+0x174>
 800ac8e:	89ab      	ldrh	r3, [r5, #12]
 800ac90:	065b      	lsls	r3, r3, #25
 800ac92:	f53f af2d 	bmi.w	800aaf0 <_svfiprintf_r+0x28>
 800ac96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac98:	e72c      	b.n	800aaf4 <_svfiprintf_r+0x2c>
 800ac9a:	ab03      	add	r3, sp, #12
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4b05      	ldr	r3, [pc, #20]	@ (800acb8 <_svfiprintf_r+0x1f0>)
 800aca2:	a904      	add	r1, sp, #16
 800aca4:	4638      	mov	r0, r7
 800aca6:	f000 f879 	bl	800ad9c <_printf_i>
 800acaa:	e7ed      	b.n	800ac88 <_svfiprintf_r+0x1c0>
 800acac:	0800b3ec 	.word	0x0800b3ec
 800acb0:	0800b3f6 	.word	0x0800b3f6
 800acb4:	00000000 	.word	0x00000000
 800acb8:	0800aa11 	.word	0x0800aa11
 800acbc:	0800b3f2 	.word	0x0800b3f2

0800acc0 <_printf_common>:
 800acc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	4616      	mov	r6, r2
 800acc6:	4698      	mov	r8, r3
 800acc8:	688a      	ldr	r2, [r1, #8]
 800acca:	690b      	ldr	r3, [r1, #16]
 800accc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acd0:	4293      	cmp	r3, r2
 800acd2:	bfb8      	it	lt
 800acd4:	4613      	movlt	r3, r2
 800acd6:	6033      	str	r3, [r6, #0]
 800acd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acdc:	4607      	mov	r7, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	b10a      	cbz	r2, 800ace6 <_printf_common+0x26>
 800ace2:	3301      	adds	r3, #1
 800ace4:	6033      	str	r3, [r6, #0]
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	0699      	lsls	r1, r3, #26
 800acea:	bf42      	ittt	mi
 800acec:	6833      	ldrmi	r3, [r6, #0]
 800acee:	3302      	addmi	r3, #2
 800acf0:	6033      	strmi	r3, [r6, #0]
 800acf2:	6825      	ldr	r5, [r4, #0]
 800acf4:	f015 0506 	ands.w	r5, r5, #6
 800acf8:	d106      	bne.n	800ad08 <_printf_common+0x48>
 800acfa:	f104 0a19 	add.w	sl, r4, #25
 800acfe:	68e3      	ldr	r3, [r4, #12]
 800ad00:	6832      	ldr	r2, [r6, #0]
 800ad02:	1a9b      	subs	r3, r3, r2
 800ad04:	42ab      	cmp	r3, r5
 800ad06:	dc26      	bgt.n	800ad56 <_printf_common+0x96>
 800ad08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	3b00      	subs	r3, #0
 800ad10:	bf18      	it	ne
 800ad12:	2301      	movne	r3, #1
 800ad14:	0692      	lsls	r2, r2, #26
 800ad16:	d42b      	bmi.n	800ad70 <_printf_common+0xb0>
 800ad18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad1c:	4641      	mov	r1, r8
 800ad1e:	4638      	mov	r0, r7
 800ad20:	47c8      	blx	r9
 800ad22:	3001      	adds	r0, #1
 800ad24:	d01e      	beq.n	800ad64 <_printf_common+0xa4>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	f003 0306 	and.w	r3, r3, #6
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	bf02      	ittt	eq
 800ad32:	68e5      	ldreq	r5, [r4, #12]
 800ad34:	6833      	ldreq	r3, [r6, #0]
 800ad36:	1aed      	subeq	r5, r5, r3
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	bf0c      	ite	eq
 800ad3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad40:	2500      	movne	r5, #0
 800ad42:	4293      	cmp	r3, r2
 800ad44:	bfc4      	itt	gt
 800ad46:	1a9b      	subgt	r3, r3, r2
 800ad48:	18ed      	addgt	r5, r5, r3
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	341a      	adds	r4, #26
 800ad4e:	42b5      	cmp	r5, r6
 800ad50:	d11a      	bne.n	800ad88 <_printf_common+0xc8>
 800ad52:	2000      	movs	r0, #0
 800ad54:	e008      	b.n	800ad68 <_printf_common+0xa8>
 800ad56:	2301      	movs	r3, #1
 800ad58:	4652      	mov	r2, sl
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	47c8      	blx	r9
 800ad60:	3001      	adds	r0, #1
 800ad62:	d103      	bne.n	800ad6c <_printf_common+0xac>
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6c:	3501      	adds	r5, #1
 800ad6e:	e7c6      	b.n	800acfe <_printf_common+0x3e>
 800ad70:	18e1      	adds	r1, r4, r3
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	2030      	movs	r0, #48	@ 0x30
 800ad76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad7a:	4422      	add	r2, r4
 800ad7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad84:	3302      	adds	r3, #2
 800ad86:	e7c7      	b.n	800ad18 <_printf_common+0x58>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	4641      	mov	r1, r8
 800ad8e:	4638      	mov	r0, r7
 800ad90:	47c8      	blx	r9
 800ad92:	3001      	adds	r0, #1
 800ad94:	d0e6      	beq.n	800ad64 <_printf_common+0xa4>
 800ad96:	3601      	adds	r6, #1
 800ad98:	e7d9      	b.n	800ad4e <_printf_common+0x8e>
	...

0800ad9c <_printf_i>:
 800ad9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ada0:	7e0f      	ldrb	r7, [r1, #24]
 800ada2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ada4:	2f78      	cmp	r7, #120	@ 0x78
 800ada6:	4691      	mov	r9, r2
 800ada8:	4680      	mov	r8, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	469a      	mov	sl, r3
 800adae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adb2:	d807      	bhi.n	800adc4 <_printf_i+0x28>
 800adb4:	2f62      	cmp	r7, #98	@ 0x62
 800adb6:	d80a      	bhi.n	800adce <_printf_i+0x32>
 800adb8:	2f00      	cmp	r7, #0
 800adba:	f000 80d2 	beq.w	800af62 <_printf_i+0x1c6>
 800adbe:	2f58      	cmp	r7, #88	@ 0x58
 800adc0:	f000 80b9 	beq.w	800af36 <_printf_i+0x19a>
 800adc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adcc:	e03a      	b.n	800ae44 <_printf_i+0xa8>
 800adce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800add2:	2b15      	cmp	r3, #21
 800add4:	d8f6      	bhi.n	800adc4 <_printf_i+0x28>
 800add6:	a101      	add	r1, pc, #4	@ (adr r1, 800addc <_printf_i+0x40>)
 800add8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800addc:	0800ae35 	.word	0x0800ae35
 800ade0:	0800ae49 	.word	0x0800ae49
 800ade4:	0800adc5 	.word	0x0800adc5
 800ade8:	0800adc5 	.word	0x0800adc5
 800adec:	0800adc5 	.word	0x0800adc5
 800adf0:	0800adc5 	.word	0x0800adc5
 800adf4:	0800ae49 	.word	0x0800ae49
 800adf8:	0800adc5 	.word	0x0800adc5
 800adfc:	0800adc5 	.word	0x0800adc5
 800ae00:	0800adc5 	.word	0x0800adc5
 800ae04:	0800adc5 	.word	0x0800adc5
 800ae08:	0800af49 	.word	0x0800af49
 800ae0c:	0800ae73 	.word	0x0800ae73
 800ae10:	0800af03 	.word	0x0800af03
 800ae14:	0800adc5 	.word	0x0800adc5
 800ae18:	0800adc5 	.word	0x0800adc5
 800ae1c:	0800af6b 	.word	0x0800af6b
 800ae20:	0800adc5 	.word	0x0800adc5
 800ae24:	0800ae73 	.word	0x0800ae73
 800ae28:	0800adc5 	.word	0x0800adc5
 800ae2c:	0800adc5 	.word	0x0800adc5
 800ae30:	0800af0b 	.word	0x0800af0b
 800ae34:	6833      	ldr	r3, [r6, #0]
 800ae36:	1d1a      	adds	r2, r3, #4
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6032      	str	r2, [r6, #0]
 800ae3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae44:	2301      	movs	r3, #1
 800ae46:	e09d      	b.n	800af84 <_printf_i+0x1e8>
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	6820      	ldr	r0, [r4, #0]
 800ae4c:	1d19      	adds	r1, r3, #4
 800ae4e:	6031      	str	r1, [r6, #0]
 800ae50:	0606      	lsls	r6, r0, #24
 800ae52:	d501      	bpl.n	800ae58 <_printf_i+0xbc>
 800ae54:	681d      	ldr	r5, [r3, #0]
 800ae56:	e003      	b.n	800ae60 <_printf_i+0xc4>
 800ae58:	0645      	lsls	r5, r0, #25
 800ae5a:	d5fb      	bpl.n	800ae54 <_printf_i+0xb8>
 800ae5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	da03      	bge.n	800ae6c <_printf_i+0xd0>
 800ae64:	232d      	movs	r3, #45	@ 0x2d
 800ae66:	426d      	negs	r5, r5
 800ae68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae6c:	4859      	ldr	r0, [pc, #356]	@ (800afd4 <_printf_i+0x238>)
 800ae6e:	230a      	movs	r3, #10
 800ae70:	e011      	b.n	800ae96 <_printf_i+0xfa>
 800ae72:	6821      	ldr	r1, [r4, #0]
 800ae74:	6833      	ldr	r3, [r6, #0]
 800ae76:	0608      	lsls	r0, r1, #24
 800ae78:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae7c:	d402      	bmi.n	800ae84 <_printf_i+0xe8>
 800ae7e:	0649      	lsls	r1, r1, #25
 800ae80:	bf48      	it	mi
 800ae82:	b2ad      	uxthmi	r5, r5
 800ae84:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae86:	4853      	ldr	r0, [pc, #332]	@ (800afd4 <_printf_i+0x238>)
 800ae88:	6033      	str	r3, [r6, #0]
 800ae8a:	bf14      	ite	ne
 800ae8c:	230a      	movne	r3, #10
 800ae8e:	2308      	moveq	r3, #8
 800ae90:	2100      	movs	r1, #0
 800ae92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae96:	6866      	ldr	r6, [r4, #4]
 800ae98:	60a6      	str	r6, [r4, #8]
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	bfa2      	ittt	ge
 800ae9e:	6821      	ldrge	r1, [r4, #0]
 800aea0:	f021 0104 	bicge.w	r1, r1, #4
 800aea4:	6021      	strge	r1, [r4, #0]
 800aea6:	b90d      	cbnz	r5, 800aeac <_printf_i+0x110>
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	d04b      	beq.n	800af44 <_printf_i+0x1a8>
 800aeac:	4616      	mov	r6, r2
 800aeae:	fbb5 f1f3 	udiv	r1, r5, r3
 800aeb2:	fb03 5711 	mls	r7, r3, r1, r5
 800aeb6:	5dc7      	ldrb	r7, [r0, r7]
 800aeb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aebc:	462f      	mov	r7, r5
 800aebe:	42bb      	cmp	r3, r7
 800aec0:	460d      	mov	r5, r1
 800aec2:	d9f4      	bls.n	800aeae <_printf_i+0x112>
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d10b      	bne.n	800aee0 <_printf_i+0x144>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	07df      	lsls	r7, r3, #31
 800aecc:	d508      	bpl.n	800aee0 <_printf_i+0x144>
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	6861      	ldr	r1, [r4, #4]
 800aed2:	4299      	cmp	r1, r3
 800aed4:	bfde      	ittt	le
 800aed6:	2330      	movle	r3, #48	@ 0x30
 800aed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aedc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aee0:	1b92      	subs	r2, r2, r6
 800aee2:	6122      	str	r2, [r4, #16]
 800aee4:	f8cd a000 	str.w	sl, [sp]
 800aee8:	464b      	mov	r3, r9
 800aeea:	aa03      	add	r2, sp, #12
 800aeec:	4621      	mov	r1, r4
 800aeee:	4640      	mov	r0, r8
 800aef0:	f7ff fee6 	bl	800acc0 <_printf_common>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d14a      	bne.n	800af8e <_printf_i+0x1f2>
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	b004      	add	sp, #16
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	f043 0320 	orr.w	r3, r3, #32
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	4833      	ldr	r0, [pc, #204]	@ (800afd8 <_printf_i+0x23c>)
 800af0c:	2778      	movs	r7, #120	@ 0x78
 800af0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	6831      	ldr	r1, [r6, #0]
 800af16:	061f      	lsls	r7, r3, #24
 800af18:	f851 5b04 	ldr.w	r5, [r1], #4
 800af1c:	d402      	bmi.n	800af24 <_printf_i+0x188>
 800af1e:	065f      	lsls	r7, r3, #25
 800af20:	bf48      	it	mi
 800af22:	b2ad      	uxthmi	r5, r5
 800af24:	6031      	str	r1, [r6, #0]
 800af26:	07d9      	lsls	r1, r3, #31
 800af28:	bf44      	itt	mi
 800af2a:	f043 0320 	orrmi.w	r3, r3, #32
 800af2e:	6023      	strmi	r3, [r4, #0]
 800af30:	b11d      	cbz	r5, 800af3a <_printf_i+0x19e>
 800af32:	2310      	movs	r3, #16
 800af34:	e7ac      	b.n	800ae90 <_printf_i+0xf4>
 800af36:	4827      	ldr	r0, [pc, #156]	@ (800afd4 <_printf_i+0x238>)
 800af38:	e7e9      	b.n	800af0e <_printf_i+0x172>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	f023 0320 	bic.w	r3, r3, #32
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	e7f6      	b.n	800af32 <_printf_i+0x196>
 800af44:	4616      	mov	r6, r2
 800af46:	e7bd      	b.n	800aec4 <_printf_i+0x128>
 800af48:	6833      	ldr	r3, [r6, #0]
 800af4a:	6825      	ldr	r5, [r4, #0]
 800af4c:	6961      	ldr	r1, [r4, #20]
 800af4e:	1d18      	adds	r0, r3, #4
 800af50:	6030      	str	r0, [r6, #0]
 800af52:	062e      	lsls	r6, r5, #24
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	d501      	bpl.n	800af5c <_printf_i+0x1c0>
 800af58:	6019      	str	r1, [r3, #0]
 800af5a:	e002      	b.n	800af62 <_printf_i+0x1c6>
 800af5c:	0668      	lsls	r0, r5, #25
 800af5e:	d5fb      	bpl.n	800af58 <_printf_i+0x1bc>
 800af60:	8019      	strh	r1, [r3, #0]
 800af62:	2300      	movs	r3, #0
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	4616      	mov	r6, r2
 800af68:	e7bc      	b.n	800aee4 <_printf_i+0x148>
 800af6a:	6833      	ldr	r3, [r6, #0]
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	6032      	str	r2, [r6, #0]
 800af70:	681e      	ldr	r6, [r3, #0]
 800af72:	6862      	ldr	r2, [r4, #4]
 800af74:	2100      	movs	r1, #0
 800af76:	4630      	mov	r0, r6
 800af78:	f7f5 f9ba 	bl	80002f0 <memchr>
 800af7c:	b108      	cbz	r0, 800af82 <_printf_i+0x1e6>
 800af7e:	1b80      	subs	r0, r0, r6
 800af80:	6060      	str	r0, [r4, #4]
 800af82:	6863      	ldr	r3, [r4, #4]
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	2300      	movs	r3, #0
 800af88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af8c:	e7aa      	b.n	800aee4 <_printf_i+0x148>
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	4632      	mov	r2, r6
 800af92:	4649      	mov	r1, r9
 800af94:	4640      	mov	r0, r8
 800af96:	47d0      	blx	sl
 800af98:	3001      	adds	r0, #1
 800af9a:	d0ad      	beq.n	800aef8 <_printf_i+0x15c>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	079b      	lsls	r3, r3, #30
 800afa0:	d413      	bmi.n	800afca <_printf_i+0x22e>
 800afa2:	68e0      	ldr	r0, [r4, #12]
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	4298      	cmp	r0, r3
 800afa8:	bfb8      	it	lt
 800afaa:	4618      	movlt	r0, r3
 800afac:	e7a6      	b.n	800aefc <_printf_i+0x160>
 800afae:	2301      	movs	r3, #1
 800afb0:	4632      	mov	r2, r6
 800afb2:	4649      	mov	r1, r9
 800afb4:	4640      	mov	r0, r8
 800afb6:	47d0      	blx	sl
 800afb8:	3001      	adds	r0, #1
 800afba:	d09d      	beq.n	800aef8 <_printf_i+0x15c>
 800afbc:	3501      	adds	r5, #1
 800afbe:	68e3      	ldr	r3, [r4, #12]
 800afc0:	9903      	ldr	r1, [sp, #12]
 800afc2:	1a5b      	subs	r3, r3, r1
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	dcf2      	bgt.n	800afae <_printf_i+0x212>
 800afc8:	e7eb      	b.n	800afa2 <_printf_i+0x206>
 800afca:	2500      	movs	r5, #0
 800afcc:	f104 0619 	add.w	r6, r4, #25
 800afd0:	e7f5      	b.n	800afbe <_printf_i+0x222>
 800afd2:	bf00      	nop
 800afd4:	0800b3fd 	.word	0x0800b3fd
 800afd8:	0800b40e 	.word	0x0800b40e

0800afdc <__sflush_r>:
 800afdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe4:	0716      	lsls	r6, r2, #28
 800afe6:	4605      	mov	r5, r0
 800afe8:	460c      	mov	r4, r1
 800afea:	d454      	bmi.n	800b096 <__sflush_r+0xba>
 800afec:	684b      	ldr	r3, [r1, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dc02      	bgt.n	800aff8 <__sflush_r+0x1c>
 800aff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd48      	ble.n	800b08a <__sflush_r+0xae>
 800aff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800affa:	2e00      	cmp	r6, #0
 800affc:	d045      	beq.n	800b08a <__sflush_r+0xae>
 800affe:	2300      	movs	r3, #0
 800b000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b004:	682f      	ldr	r7, [r5, #0]
 800b006:	6a21      	ldr	r1, [r4, #32]
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	d030      	beq.n	800b06e <__sflush_r+0x92>
 800b00c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	0759      	lsls	r1, r3, #29
 800b012:	d505      	bpl.n	800b020 <__sflush_r+0x44>
 800b014:	6863      	ldr	r3, [r4, #4]
 800b016:	1ad2      	subs	r2, r2, r3
 800b018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b01a:	b10b      	cbz	r3, 800b020 <__sflush_r+0x44>
 800b01c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b01e:	1ad2      	subs	r2, r2, r3
 800b020:	2300      	movs	r3, #0
 800b022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b024:	6a21      	ldr	r1, [r4, #32]
 800b026:	4628      	mov	r0, r5
 800b028:	47b0      	blx	r6
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	d106      	bne.n	800b03e <__sflush_r+0x62>
 800b030:	6829      	ldr	r1, [r5, #0]
 800b032:	291d      	cmp	r1, #29
 800b034:	d82b      	bhi.n	800b08e <__sflush_r+0xb2>
 800b036:	4a2a      	ldr	r2, [pc, #168]	@ (800b0e0 <__sflush_r+0x104>)
 800b038:	410a      	asrs	r2, r1
 800b03a:	07d6      	lsls	r6, r2, #31
 800b03c:	d427      	bmi.n	800b08e <__sflush_r+0xb2>
 800b03e:	2200      	movs	r2, #0
 800b040:	6062      	str	r2, [r4, #4]
 800b042:	04d9      	lsls	r1, r3, #19
 800b044:	6922      	ldr	r2, [r4, #16]
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	d504      	bpl.n	800b054 <__sflush_r+0x78>
 800b04a:	1c42      	adds	r2, r0, #1
 800b04c:	d101      	bne.n	800b052 <__sflush_r+0x76>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	b903      	cbnz	r3, 800b054 <__sflush_r+0x78>
 800b052:	6560      	str	r0, [r4, #84]	@ 0x54
 800b054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b056:	602f      	str	r7, [r5, #0]
 800b058:	b1b9      	cbz	r1, 800b08a <__sflush_r+0xae>
 800b05a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b05e:	4299      	cmp	r1, r3
 800b060:	d002      	beq.n	800b068 <__sflush_r+0x8c>
 800b062:	4628      	mov	r0, r5
 800b064:	f7ff fbdc 	bl	800a820 <_free_r>
 800b068:	2300      	movs	r3, #0
 800b06a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b06c:	e00d      	b.n	800b08a <__sflush_r+0xae>
 800b06e:	2301      	movs	r3, #1
 800b070:	4628      	mov	r0, r5
 800b072:	47b0      	blx	r6
 800b074:	4602      	mov	r2, r0
 800b076:	1c50      	adds	r0, r2, #1
 800b078:	d1c9      	bne.n	800b00e <__sflush_r+0x32>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0c6      	beq.n	800b00e <__sflush_r+0x32>
 800b080:	2b1d      	cmp	r3, #29
 800b082:	d001      	beq.n	800b088 <__sflush_r+0xac>
 800b084:	2b16      	cmp	r3, #22
 800b086:	d11e      	bne.n	800b0c6 <__sflush_r+0xea>
 800b088:	602f      	str	r7, [r5, #0]
 800b08a:	2000      	movs	r0, #0
 800b08c:	e022      	b.n	800b0d4 <__sflush_r+0xf8>
 800b08e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b092:	b21b      	sxth	r3, r3
 800b094:	e01b      	b.n	800b0ce <__sflush_r+0xf2>
 800b096:	690f      	ldr	r7, [r1, #16]
 800b098:	2f00      	cmp	r7, #0
 800b09a:	d0f6      	beq.n	800b08a <__sflush_r+0xae>
 800b09c:	0793      	lsls	r3, r2, #30
 800b09e:	680e      	ldr	r6, [r1, #0]
 800b0a0:	bf08      	it	eq
 800b0a2:	694b      	ldreq	r3, [r1, #20]
 800b0a4:	600f      	str	r7, [r1, #0]
 800b0a6:	bf18      	it	ne
 800b0a8:	2300      	movne	r3, #0
 800b0aa:	eba6 0807 	sub.w	r8, r6, r7
 800b0ae:	608b      	str	r3, [r1, #8]
 800b0b0:	f1b8 0f00 	cmp.w	r8, #0
 800b0b4:	dde9      	ble.n	800b08a <__sflush_r+0xae>
 800b0b6:	6a21      	ldr	r1, [r4, #32]
 800b0b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0ba:	4643      	mov	r3, r8
 800b0bc:	463a      	mov	r2, r7
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b0      	blx	r6
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	dc08      	bgt.n	800b0d8 <__sflush_r+0xfc>
 800b0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d8:	4407      	add	r7, r0
 800b0da:	eba8 0800 	sub.w	r8, r8, r0
 800b0de:	e7e7      	b.n	800b0b0 <__sflush_r+0xd4>
 800b0e0:	dfbffffe 	.word	0xdfbffffe

0800b0e4 <_fflush_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	690b      	ldr	r3, [r1, #16]
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	b913      	cbnz	r3, 800b0f4 <_fflush_r+0x10>
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	b118      	cbz	r0, 800b0fe <_fflush_r+0x1a>
 800b0f6:	6a03      	ldr	r3, [r0, #32]
 800b0f8:	b90b      	cbnz	r3, 800b0fe <_fflush_r+0x1a>
 800b0fa:	f7ff f971 	bl	800a3e0 <__sinit>
 800b0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f3      	beq.n	800b0ee <_fflush_r+0xa>
 800b106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b108:	07d0      	lsls	r0, r2, #31
 800b10a:	d404      	bmi.n	800b116 <_fflush_r+0x32>
 800b10c:	0599      	lsls	r1, r3, #22
 800b10e:	d402      	bmi.n	800b116 <_fflush_r+0x32>
 800b110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b112:	f7ff fb82 	bl	800a81a <__retarget_lock_acquire_recursive>
 800b116:	4628      	mov	r0, r5
 800b118:	4621      	mov	r1, r4
 800b11a:	f7ff ff5f 	bl	800afdc <__sflush_r>
 800b11e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b120:	07da      	lsls	r2, r3, #31
 800b122:	4605      	mov	r5, r0
 800b124:	d4e4      	bmi.n	800b0f0 <_fflush_r+0xc>
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	059b      	lsls	r3, r3, #22
 800b12a:	d4e1      	bmi.n	800b0f0 <_fflush_r+0xc>
 800b12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b12e:	f7ff fb75 	bl	800a81c <__retarget_lock_release_recursive>
 800b132:	e7dd      	b.n	800b0f0 <_fflush_r+0xc>

0800b134 <__swhatbuf_r>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	460c      	mov	r4, r1
 800b138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13c:	2900      	cmp	r1, #0
 800b13e:	b096      	sub	sp, #88	@ 0x58
 800b140:	4615      	mov	r5, r2
 800b142:	461e      	mov	r6, r3
 800b144:	da0d      	bge.n	800b162 <__swhatbuf_r+0x2e>
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b14c:	f04f 0100 	mov.w	r1, #0
 800b150:	bf14      	ite	ne
 800b152:	2340      	movne	r3, #64	@ 0x40
 800b154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b158:	2000      	movs	r0, #0
 800b15a:	6031      	str	r1, [r6, #0]
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	b016      	add	sp, #88	@ 0x58
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	466a      	mov	r2, sp
 800b164:	f000 f862 	bl	800b22c <_fstat_r>
 800b168:	2800      	cmp	r0, #0
 800b16a:	dbec      	blt.n	800b146 <__swhatbuf_r+0x12>
 800b16c:	9901      	ldr	r1, [sp, #4]
 800b16e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b176:	4259      	negs	r1, r3
 800b178:	4159      	adcs	r1, r3
 800b17a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b17e:	e7eb      	b.n	800b158 <__swhatbuf_r+0x24>

0800b180 <__smakebuf_r>:
 800b180:	898b      	ldrh	r3, [r1, #12]
 800b182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b184:	079d      	lsls	r5, r3, #30
 800b186:	4606      	mov	r6, r0
 800b188:	460c      	mov	r4, r1
 800b18a:	d507      	bpl.n	800b19c <__smakebuf_r+0x1c>
 800b18c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	2301      	movs	r3, #1
 800b196:	6163      	str	r3, [r4, #20]
 800b198:	b003      	add	sp, #12
 800b19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19c:	ab01      	add	r3, sp, #4
 800b19e:	466a      	mov	r2, sp
 800b1a0:	f7ff ffc8 	bl	800b134 <__swhatbuf_r>
 800b1a4:	9f00      	ldr	r7, [sp, #0]
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7ff fba4 	bl	800a8f8 <_malloc_r>
 800b1b0:	b948      	cbnz	r0, 800b1c6 <__smakebuf_r+0x46>
 800b1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b6:	059a      	lsls	r2, r3, #22
 800b1b8:	d4ee      	bmi.n	800b198 <__smakebuf_r+0x18>
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	f043 0302 	orr.w	r3, r3, #2
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	e7e2      	b.n	800b18c <__smakebuf_r+0xc>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	6020      	str	r0, [r4, #0]
 800b1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ce:	81a3      	strh	r3, [r4, #12]
 800b1d0:	9b01      	ldr	r3, [sp, #4]
 800b1d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1d6:	b15b      	cbz	r3, 800b1f0 <__smakebuf_r+0x70>
 800b1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f000 f837 	bl	800b250 <_isatty_r>
 800b1e2:	b128      	cbz	r0, 800b1f0 <__smakebuf_r+0x70>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	f023 0303 	bic.w	r3, r3, #3
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	431d      	orrs	r5, r3
 800b1f4:	81a5      	strh	r5, [r4, #12]
 800b1f6:	e7cf      	b.n	800b198 <__smakebuf_r+0x18>

0800b1f8 <memmove>:
 800b1f8:	4288      	cmp	r0, r1
 800b1fa:	b510      	push	{r4, lr}
 800b1fc:	eb01 0402 	add.w	r4, r1, r2
 800b200:	d902      	bls.n	800b208 <memmove+0x10>
 800b202:	4284      	cmp	r4, r0
 800b204:	4623      	mov	r3, r4
 800b206:	d807      	bhi.n	800b218 <memmove+0x20>
 800b208:	1e43      	subs	r3, r0, #1
 800b20a:	42a1      	cmp	r1, r4
 800b20c:	d008      	beq.n	800b220 <memmove+0x28>
 800b20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b216:	e7f8      	b.n	800b20a <memmove+0x12>
 800b218:	4402      	add	r2, r0
 800b21a:	4601      	mov	r1, r0
 800b21c:	428a      	cmp	r2, r1
 800b21e:	d100      	bne.n	800b222 <memmove+0x2a>
 800b220:	bd10      	pop	{r4, pc}
 800b222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b22a:	e7f7      	b.n	800b21c <memmove+0x24>

0800b22c <_fstat_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d07      	ldr	r5, [pc, #28]	@ (800b24c <_fstat_r+0x20>)
 800b230:	2300      	movs	r3, #0
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	4611      	mov	r1, r2
 800b238:	602b      	str	r3, [r5, #0]
 800b23a:	f7f6 fb4e 	bl	80018da <_fstat>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	d102      	bne.n	800b248 <_fstat_r+0x1c>
 800b242:	682b      	ldr	r3, [r5, #0]
 800b244:	b103      	cbz	r3, 800b248 <_fstat_r+0x1c>
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	bd38      	pop	{r3, r4, r5, pc}
 800b24a:	bf00      	nop
 800b24c:	240003d8 	.word	0x240003d8

0800b250 <_isatty_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d06      	ldr	r5, [pc, #24]	@ (800b26c <_isatty_r+0x1c>)
 800b254:	2300      	movs	r3, #0
 800b256:	4604      	mov	r4, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	602b      	str	r3, [r5, #0]
 800b25c:	f7f6 fb4d 	bl	80018fa <_isatty>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_isatty_r+0x1a>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_isatty_r+0x1a>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	240003d8 	.word	0x240003d8

0800b270 <_sbrk_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d06      	ldr	r5, [pc, #24]	@ (800b28c <_sbrk_r+0x1c>)
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	f7f6 fb56 	bl	800192c <_sbrk>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_sbrk_r+0x1a>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_sbrk_r+0x1a>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	240003d8 	.word	0x240003d8

0800b290 <memcpy>:
 800b290:	440a      	add	r2, r1
 800b292:	4291      	cmp	r1, r2
 800b294:	f100 33ff 	add.w	r3, r0, #4294967295
 800b298:	d100      	bne.n	800b29c <memcpy+0xc>
 800b29a:	4770      	bx	lr
 800b29c:	b510      	push	{r4, lr}
 800b29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2a6:	4291      	cmp	r1, r2
 800b2a8:	d1f9      	bne.n	800b29e <memcpy+0xe>
 800b2aa:	bd10      	pop	{r4, pc}

0800b2ac <_realloc_r>:
 800b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	4615      	mov	r5, r2
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	b921      	cbnz	r1, 800b2c2 <_realloc_r+0x16>
 800b2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2bc:	4611      	mov	r1, r2
 800b2be:	f7ff bb1b 	b.w	800a8f8 <_malloc_r>
 800b2c2:	b92a      	cbnz	r2, 800b2d0 <_realloc_r+0x24>
 800b2c4:	f7ff faac 	bl	800a820 <_free_r>
 800b2c8:	2400      	movs	r4, #0
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	f000 f81a 	bl	800b308 <_malloc_usable_size_r>
 800b2d4:	4285      	cmp	r5, r0
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	d802      	bhi.n	800b2e0 <_realloc_r+0x34>
 800b2da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2de:	d8f4      	bhi.n	800b2ca <_realloc_r+0x1e>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	f7ff fb08 	bl	800a8f8 <_malloc_r>
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0ec      	beq.n	800b2c8 <_realloc_r+0x1c>
 800b2ee:	42b5      	cmp	r5, r6
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	bf28      	it	cs
 800b2f6:	4632      	movcs	r2, r6
 800b2f8:	f7ff ffca 	bl	800b290 <memcpy>
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4640      	mov	r0, r8
 800b300:	f7ff fa8e 	bl	800a820 <_free_r>
 800b304:	463c      	mov	r4, r7
 800b306:	e7e0      	b.n	800b2ca <_realloc_r+0x1e>

0800b308 <_malloc_usable_size_r>:
 800b308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b30c:	1f18      	subs	r0, r3, #4
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bfbc      	itt	lt
 800b312:	580b      	ldrlt	r3, [r1, r0]
 800b314:	18c0      	addlt	r0, r0, r3
 800b316:	4770      	bx	lr

0800b318 <_init>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	bf00      	nop
 800b31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b31e:	bc08      	pop	{r3}
 800b320:	469e      	mov	lr, r3
 800b322:	4770      	bx	lr

0800b324 <_fini>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr
